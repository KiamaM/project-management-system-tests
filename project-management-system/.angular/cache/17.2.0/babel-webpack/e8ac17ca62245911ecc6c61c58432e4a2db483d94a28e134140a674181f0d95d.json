{"ast":null,"code":"import _asyncToGenerator from \"E:/QAQE/Recent Projects/Project Management System ng/project-management-system/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license Angular v17.2.1\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵDeferBlockState, ɵtriggerResourceLoading, ɵrenderDeferBlockState, ɵCONTAINER_HEADER_OFFSET, ɵgetDeferBlocks, ɵDeferBlockBehavior, InjectionToken, inject as inject$1, ɵNoopNgZone, NgZone, ɵEffectScheduler, ApplicationRef, getDebugNode, RendererFactory2, ɵPendingTasks, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetAsyncClassMetadataFn, ɵgenerateStandaloneInDeclarationsError, ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT, ɵdepsTracker, ɵgetInjectableDef, resolveForwardRef, ɵNG_COMP_DEF, ɵisComponentDefPendingResolution, ɵresolveComponentResources, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, ɵclearResolutionOfComponentResourcesQueue, ɵrestoreComponentResolutionQueue, provideZoneChangeDetection, Compiler, ɵDEFER_BLOCK_CONFIG, COMPILER_OPTIONS, Injector, ɵisEnvironmentProviders, ɵNgModuleFactory, ModuleWithComponentFactories, ɵconvertToBitFlags, InjectFlags, ɵsetAllowDuplicateNgModuleIdsForTest, ɵresetCompiledComponents, ɵsetUnknownElementStrictMode, ɵsetUnknownPropertyStrictMode, ɵgetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, runInInjectionContext, EnvironmentInjector, ɵChangeDetectionScheduler, ɵflushModuleScopingQueueAsMuchAsPossible } from '@angular/core';\nexport { ɵDeferBlockBehavior as DeferBlockBehavior, ɵDeferBlockState as DeferBlockState } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ResourceLoader } from '@angular/compiler';\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', waitForAsync(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nfunction waitForAsync(fn) {\n  const _Zone = typeof Zone !== 'undefined' ? Zone : null;\n  if (!_Zone) {\n    return function () {\n      return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js');\n    };\n  }\n  const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n  if (typeof asyncTest === 'function') {\n    return asyncTest(fn);\n  }\n  return function () {\n    return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js/testing');\n  };\n}\n/**\n * @deprecated use `waitForAsync()`, (expected removal in v12)\n * @see {@link waitForAsync}\n * @publicApi\n * */\nfunction async(fn) {\n  return waitForAsync(fn);\n}\n\n/**\n * Represents an individual defer block for testing purposes.\n *\n * @publicApi\n * @developerPreview\n */\nclass DeferBlockFixture {\n  /** @nodoc */\n  constructor(block, componentFixture) {\n    this.block = block;\n    this.componentFixture = componentFixture;\n  }\n  /**\n   * Renders the specified state of the defer fixture.\n   * @param state the defer state to render\n   */\n  render(state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!hasStateTemplate(state, _this.block)) {\n        const stateAsString = getDeferBlockStateNameFromEnum(state);\n        throw new Error(`Tried to render this defer block in the \\`${stateAsString}\\` state, ` + `but there was no @${stateAsString.toLowerCase()} block defined in a template.`);\n      }\n      if (state === ɵDeferBlockState.Complete) {\n        yield ɵtriggerResourceLoading(_this.block.tDetails, _this.block.lView, _this.block.tNode);\n      }\n      // If the `render` method is used explicitly - skip timer-based scheduling for\n      // `@placeholder` and `@loading` blocks and render them immediately.\n      const skipTimerScheduling = true;\n      ɵrenderDeferBlockState(state, _this.block.tNode, _this.block.lContainer, skipTimerScheduling);\n      _this.componentFixture.detectChanges();\n      return _this.componentFixture.whenStable();\n    })();\n  }\n  /**\n   * Retrieves all nested child defer block fixtures\n   * in a given defer block.\n   */\n  getDeferBlocks() {\n    const deferBlocks = [];\n    // An LContainer that represents a defer block has at most 1 view, which is\n    // located right after an LContainer header. Get a hold of that view and inspect\n    // it for nested defer blocks.\n    const deferBlockFixtures = [];\n    if (this.block.lContainer.length >= ɵCONTAINER_HEADER_OFFSET) {\n      const lView = this.block.lContainer[ɵCONTAINER_HEADER_OFFSET];\n      ɵgetDeferBlocks(lView, deferBlocks);\n      for (const block of deferBlocks) {\n        deferBlockFixtures.push(new DeferBlockFixture(block, this.componentFixture));\n      }\n    }\n    return Promise.resolve(deferBlockFixtures);\n  }\n}\nfunction hasStateTemplate(state, block) {\n  switch (state) {\n    case ɵDeferBlockState.Placeholder:\n      return block.tDetails.placeholderTmplIndex !== null;\n    case ɵDeferBlockState.Loading:\n      return block.tDetails.loadingTmplIndex !== null;\n    case ɵDeferBlockState.Error:\n      return block.tDetails.errorTmplIndex !== null;\n    case ɵDeferBlockState.Complete:\n      return true;\n    default:\n      return false;\n  }\n}\nfunction getDeferBlockStateNameFromEnum(state) {\n  switch (state) {\n    case ɵDeferBlockState.Placeholder:\n      return 'Placeholder';\n    case ɵDeferBlockState.Loading:\n      return 'Loading';\n    case ɵDeferBlockState.Error:\n      return 'Error';\n    default:\n      return 'Main';\n  }\n}\n\n/** Whether test modules should be torn down by default. */\nconst TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT = true;\n/** Whether unknown elements in templates should throw by default. */\nconst THROW_ON_UNKNOWN_ELEMENTS_DEFAULT = false;\n/** Whether unknown properties in templates should throw by default. */\nconst THROW_ON_UNKNOWN_PROPERTIES_DEFAULT = false;\n/** Whether defer blocks should use manual triggering or play through normally. */\nconst DEFER_BLOCK_DEFAULT_BEHAVIOR = ɵDeferBlockBehavior.Playthrough;\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nclass TestComponentRenderer {\n  insertRootElement(rootElementId) {}\n  removeAllRootElements() {}\n}\n/**\n * @publicApi\n */\nconst ComponentFixtureAutoDetect = new InjectionToken('ComponentFixtureAutoDetect');\n/**\n * TODO(atscott): Make public API once we have decided if we want this error and how we want devs to\n * disable it.\n */\nconst AllowDetectChangesAndAcknowledgeItCanHideApplicationBugs = new InjectionToken('AllowDetectChangesAndAcknowledgeItCanHideApplicationBugs');\n/**\n * @publicApi\n */\nconst ComponentFixtureNoNgZone = new InjectionToken('ComponentFixtureNoNgZone');\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nclass ComponentFixture {\n  /** @nodoc */\n  constructor(componentRef) {\n    this.componentRef = componentRef;\n    this._isDestroyed = false;\n    /** @internal */\n    this._noZoneOptionIsSet = inject$1(ComponentFixtureNoNgZone, {\n      optional: true\n    });\n    /** @internal */\n    this._ngZone = this._noZoneOptionIsSet ? new ɵNoopNgZone() : inject$1(NgZone);\n    /** @internal */\n    this._effectRunner = inject$1(ɵEffectScheduler);\n    // Inject ApplicationRef to ensure NgZone stableness causes after render hooks to run\n    // This will likely happen as a result of fixture.detectChanges because it calls ngZone.run\n    // This is a crazy way of doing things but hey, it's the world we live in.\n    // The zoneless scheduler should instead do this more imperatively by attaching\n    // the `ComponentRef` to `ApplicationRef` and calling `appRef.tick` as the `detectChanges`\n    // behavior.\n    /** @internal */\n    this._appRef = inject$1(ApplicationRef);\n    // TODO(atscott): Remove this from public API\n    this.ngZone = this._noZoneOptionIsSet ? null : this._ngZone;\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = getDebugNode(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n  }\n  /**\n   * Do a change detection run to make sure there were no changes.\n   */\n  checkNoChanges() {\n    this.changeDetectorRef.checkNoChanges();\n  }\n  /**\n   * Retrieves all defer block fixtures in the component fixture.\n   *\n   * @developerPreview\n   */\n  getDeferBlocks() {\n    const deferBlocks = [];\n    const lView = this.componentRef.hostView['_lView'];\n    ɵgetDeferBlocks(lView, deferBlocks);\n    const deferBlockFixtures = [];\n    for (const block of deferBlocks) {\n      deferBlockFixtures.push(new DeferBlockFixture(block, this));\n    }\n    return Promise.resolve(deferBlockFixtures);\n  }\n  _getRenderer() {\n    if (this._renderer === undefined) {\n      this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n    }\n    return this._renderer;\n  }\n  /**\n   * Get a promise that resolves when the ui state is stable following animations.\n   */\n  whenRenderingDone() {\n    const renderer = this._getRenderer();\n    if (renderer && renderer.whenRenderingDone) {\n      return renderer.whenRenderingDone();\n    }\n    return this.whenStable();\n  }\n  /**\n   * Trigger component destruction.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this.componentRef.destroy();\n      this._isDestroyed = true;\n    }\n  }\n}\n/**\n * ComponentFixture behavior that actually attaches the component to the application to ensure\n * behaviors between fixture and application do not diverge. `detectChanges` is disabled by default\n * (instead, tests should wait for the scheduler to detect changes), `whenStable` is directly the\n * `ApplicationRef.isStable`, and `autoDetectChanges` cannot be disabled.\n */\nclass ScheduledComponentFixture extends ComponentFixture {\n  constructor() {\n    super(...arguments);\n    this.disableDetectChangesError = inject$1(AllowDetectChangesAndAcknowledgeItCanHideApplicationBugs, {\n      optional: true\n    }) ?? false;\n    this.pendingTasks = inject$1(ɵPendingTasks);\n  }\n  initialize() {\n    this._appRef.attachView(this.componentRef.hostView);\n  }\n  detectChanges(checkNoChanges = true) {\n    if (!this.disableDetectChangesError) {\n      throw new Error('Do not use `detectChanges` directly when using zoneless change detection.' + ' Instead, wait for the next render or `fixture.whenStable`.');\n    } else if (!checkNoChanges) {\n      throw new Error('Cannot disable `checkNoChanges` in this configuration. ' + 'Use `fixture.componentRef.hostView.changeDetectorRef.detectChanges()` instead.');\n    }\n    this._effectRunner.flush();\n    this._appRef.tick();\n    this._effectRunner.flush();\n  }\n  isStable() {\n    return !this.pendingTasks.hasPendingTasks.value;\n  }\n  whenStable() {\n    if (this.isStable()) {\n      return Promise.resolve(false);\n    }\n    return this._appRef.isStable.pipe(first(stable => stable)).toPromise().then(() => true);\n  }\n  autoDetectChanges(autoDetect) {\n    throw new Error('Cannot call autoDetectChanges when using change detection scheduling.');\n  }\n}\n/**\n * ComponentFixture behavior that attempts to act as a \"mini application\".\n */\nclass PseudoApplicationComponentFixture extends ComponentFixture {\n  constructor() {\n    super(...arguments);\n    this._subscriptions = new Subscription();\n    this._autoDetect = inject$1(ComponentFixtureAutoDetect, {\n      optional: true\n    }) ?? false;\n    this._isStable = true;\n    this._promise = null;\n    this._resolve = null;\n  }\n  initialize() {\n    // Create subscriptions outside the NgZone so that the callbacks run outside\n    // of NgZone.\n    this._ngZone.runOutsideAngular(() => {\n      this._subscriptions.add(this._ngZone.onUnstable.subscribe({\n        next: () => {\n          this._isStable = false;\n        }\n      }));\n      this._subscriptions.add(this._ngZone.onMicrotaskEmpty.subscribe({\n        next: () => {\n          if (this._autoDetect) {\n            // Do a change detection run with checkNoChanges set to true to check\n            // there are no changes on the second run.\n            this.detectChanges(true);\n          }\n        }\n      }));\n      this._subscriptions.add(this._ngZone.onStable.subscribe({\n        next: () => {\n          this._isStable = true;\n          // Check whether there is a pending whenStable() completer to resolve.\n          if (this._promise !== null) {\n            // If so check whether there are no pending macrotasks before resolving.\n            // Do this check in the next tick so that ngZone gets a chance to update the state of\n            // pending macrotasks.\n            queueMicrotask(() => {\n              if (!this._ngZone.hasPendingMacrotasks) {\n                if (this._promise !== null) {\n                  this._resolve(true);\n                  this._resolve = null;\n                  this._promise = null;\n                }\n              }\n            });\n          }\n        }\n      }));\n      this._subscriptions.add(this._ngZone.onError.subscribe({\n        next: error => {\n          throw error;\n        }\n      }));\n    });\n  }\n  detectChanges(checkNoChanges = true) {\n    this._effectRunner.flush();\n    // Run the change detection inside the NgZone so that any async tasks as part of the change\n    // detection are captured by the zone and can be waited for in isStable.\n    this._ngZone.run(() => {\n      this.changeDetectorRef.detectChanges();\n      if (checkNoChanges) {\n        this.checkNoChanges();\n      }\n    });\n    // Run any effects that were created/dirtied during change detection. Such effects might become\n    // dirty in response to input signals changing.\n    this._effectRunner.flush();\n  }\n  isStable() {\n    return this._isStable && !this._ngZone.hasPendingMacrotasks;\n  }\n  whenStable() {\n    if (this.isStable()) {\n      return Promise.resolve(false);\n    } else if (this._promise !== null) {\n      return this._promise;\n    } else {\n      this._promise = new Promise(res => {\n        this._resolve = res;\n      });\n      return this._promise;\n    }\n  }\n  autoDetectChanges(autoDetect = true) {\n    if (this._noZoneOptionIsSet) {\n      throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set.');\n    }\n    this._autoDetect = autoDetect;\n    this.detectChanges();\n  }\n  destroy() {\n    this._subscriptions.unsubscribe();\n    super.destroy();\n  }\n}\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\nconst fakeAsyncTestModuleNotLoadedErrorMessage = `zone-testing.js is needed for the fakeAsync() test helper but could not be found.\n        Please make sure that your environment includes zone.js/testing`;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nfunction resetFakeAsyncZone() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.resetFakeAsyncZone();\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Wraps a function to be executed in the `fakeAsync` zone:\n * - Microtasks are manually executed by calling `flushMicrotasks()`.\n * - Timers are synchronous; `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception is thrown.\n *\n * Can be used to wrap `inject()` calls.\n *\n * @param fn The function that you want to wrap in the `fakeAsync` zone.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n *\n * @returns The function wrapped to be executed in the `fakeAsync` zone.\n * Any arguments passed when calling this returned function will be passed through to the `fn`\n * function in the parameters when it is called.\n *\n * @publicApi\n */\nfunction fakeAsync(fn) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.fakeAsync(fn);\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @param millis The number of milliseconds to advance the virtual timer.\n * @param tickOptions The options to pass to the `tick()` function.\n *\n * @usageNotes\n *\n * The `tick()` option is a flag called `processNewMacroTasksSynchronously`,\n * which determines whether or not to invoke new macroTasks.\n *\n * If you provide a `tickOptions` object, but do not specify a\n * `processNewMacroTasksSynchronously` property (`tick(100, {})`),\n * then `processNewMacroTasksSynchronously` defaults to true.\n *\n * If you omit the `tickOptions` parameter (`tick(100))`), then\n * `tickOptions` defaults to `{processNewMacroTasksSynchronously: true}`.\n *\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * The following example includes a nested timeout (new macroTask), and\n * the `tickOptions` parameter is allowed to default. In this case,\n * `processNewMacroTasksSynchronously` defaults to true, and the nested\n * function is executed on each tick.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick();\n *   expect(nestedTimeoutInvoked).toBe(true);\n * }));\n * ```\n *\n * In the following case, `processNewMacroTasksSynchronously` is explicitly\n * set to false, so the nested timeout function is not invoked.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick(0, {processNewMacroTasksSynchronously: false});\n *   expect(nestedTimeoutInvoked).toBe(false);\n * }));\n * ```\n *\n *\n * @publicApi\n */\nfunction tick(millis = 0, tickOptions = {\n  processNewMacroTasksSynchronously: true\n}) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.tick(millis, tickOptions);\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flushes any pending microtasks and simulates the asynchronous passage of time for the timers in\n * the `fakeAsync` zone by\n * draining the macrotask queue until it is empty.\n *\n * @param maxTurns The maximum number of times the scheduler attempts to clear its queue before\n *     throwing an error.\n * @returns The simulated time elapsed, in milliseconds.\n *\n * @publicApi\n */\nfunction flush(maxTurns) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flush(maxTurns);\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nfunction discardPeriodicTasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.discardPeriodicTasks();\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nfunction flushMicrotasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flushMicrotasks();\n  }\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\nlet _nextReferenceId = 0;\nclass MetadataOverrider {\n  constructor() {\n    this._references = new Map();\n  }\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n  overrideMetadata(metadataClass, oldMetadata, override) {\n    const props = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach(prop => props[prop] = oldMetadata[prop]);\n    }\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${ɵstringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass(props);\n  }\n}\nfunction removeMetadata(metadata, remove, references) {\n  const removeObjects = new Set();\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n    if (Array.isArray(removeValue)) {\n      removeValue.forEach(value => {\n        removeObjects.add(_propHashKey(prop, value, references));\n      });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n    if (Array.isArray(propValue)) {\n      metadata[prop] = propValue.filter(value => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\nfunction addMetadata(metadata, add) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n    if (propValue != null && Array.isArray(propValue)) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\nfunction setMetadata(metadata, set) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\nfunction _propHashKey(propName, propValue, references) {\n  let nextObjectId = 0;\n  const objectIds = new Map();\n  const replacer = (key, value) => {\n    if (value !== null && typeof value === 'object') {\n      if (objectIds.has(value)) {\n        return objectIds.get(value);\n      }\n      // Record an id for this object such that any later references use the object's id instead\n      // of the object itself, in order to break cyclic pointers in objects.\n      objectIds.set(value, `ɵobj#${nextObjectId++}`);\n      // The first time an object is seen the object itself is serialized.\n      return value;\n    } else if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\nfunction _serializeReference(ref, references) {\n  let id = references.get(ref);\n  if (!id) {\n    id = `${ɵstringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\nfunction _valueProps(obj) {\n  const props = [];\n  // regular public props\n  Object.keys(obj).forEach(prop => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n  // getters\n  let proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach(protoProp => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\nconst reflection = new ɵReflectionCapabilities();\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nclass OverrideResolver {\n  constructor() {\n    this.overrides = new Map();\n    this.resolved = new Map();\n  }\n  addOverride(type, override) {\n    const overrides = this.overrides.get(type) || [];\n    overrides.push(override);\n    this.overrides.set(type, overrides);\n    this.resolved.delete(type);\n  }\n  setOverrides(overrides) {\n    this.overrides.clear();\n    overrides.forEach(([type, override]) => {\n      this.addOverride(type, override);\n    });\n  }\n  getAnnotation(type) {\n    const annotations = reflection.annotations(type);\n    // Try to find the nearest known Type annotation and make sure that this annotation is an\n    // instance of the type we are looking for, so we can use it for resolution. Note: there might\n    // be multiple known annotations found due to the fact that Components can extend Directives (so\n    // both Directive and Component annotations would be present), so we always check if the known\n    // annotation has the right type.\n    for (let i = annotations.length - 1; i >= 0; i--) {\n      const annotation = annotations[i];\n      const isKnownType = annotation instanceof Directive || annotation instanceof Component || annotation instanceof Pipe || annotation instanceof NgModule;\n      if (isKnownType) {\n        return annotation instanceof this.type ? annotation : null;\n      }\n    }\n    return null;\n  }\n  resolve(type) {\n    let resolved = this.resolved.get(type) || null;\n    if (!resolved) {\n      resolved = this.getAnnotation(type);\n      if (resolved) {\n        const overrides = this.overrides.get(type);\n        if (overrides) {\n          const overrider = new MetadataOverrider();\n          overrides.forEach(override => {\n            resolved = overrider.overrideMetadata(this.type, resolved, override);\n          });\n        }\n      }\n      this.resolved.set(type, resolved);\n    }\n    return resolved;\n  }\n}\nclass DirectiveResolver extends OverrideResolver {\n  get type() {\n    return Directive;\n  }\n}\nclass ComponentResolver extends OverrideResolver {\n  get type() {\n    return Component;\n  }\n}\nclass PipeResolver extends OverrideResolver {\n  get type() {\n    return Pipe;\n  }\n}\nclass NgModuleResolver extends OverrideResolver {\n  get type() {\n    return NgModule;\n  }\n}\nvar TestingModuleOverride;\n(function (TestingModuleOverride) {\n  TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n  TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\nfunction isTestingModuleOverride(value) {\n  return value === TestingModuleOverride.DECLARATION || value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\nfunction assertNoStandaloneComponents(types, resolver, location) {\n  types.forEach(type => {\n    if (!ɵgetAsyncClassMetadataFn(type)) {\n      const component = resolver.resolve(type);\n      if (component && component.standalone) {\n        throw new Error(ɵgenerateStandaloneInDeclarationsError(type, location));\n      }\n    }\n  });\n}\nclass TestBedCompiler {\n  constructor(platform, additionalModuleTypes) {\n    this.platform = platform;\n    this.additionalModuleTypes = additionalModuleTypes;\n    this.originalComponentResolutionQueue = null;\n    // Testing module configuration\n    this.declarations = [];\n    this.imports = [];\n    this.providers = [];\n    this.schemas = [];\n    // Queues of components/directives/pipes that should be recompiled.\n    this.pendingComponents = new Set();\n    this.pendingDirectives = new Set();\n    this.pendingPipes = new Set();\n    // Keep track of all components and directives, so we can patch Providers onto defs later.\n    this.seenComponents = new Set();\n    this.seenDirectives = new Set();\n    // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n    this.overriddenModules = new Set();\n    // Store resolved styles for Components that have template overrides present and `styleUrls`\n    // defined at the same time.\n    this.existingComponentStyles = new Map();\n    this.resolvers = initResolvers();\n    // Map of component type to an NgModule that declares it.\n    //\n    // There are a couple special cases:\n    // - for standalone components, the module scope value is `null`\n    // - when a component is declared in `TestBed.configureTestingModule()` call or\n    //   a component's template is overridden via `TestBed.overrideTemplateUsingTestingModule()`.\n    //   we use a special value from the `TestingModuleOverride` enum.\n    this.componentToModuleScope = new Map();\n    // Map that keeps initial version of component/directive/pipe defs in case\n    // we compile a Type again, thus overriding respective static fields. This is\n    // required to make sure we restore defs to their initial states between test runs.\n    // Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of an\n    // NgModule), store all of them in a map.\n    this.initialNgDefs = new Map();\n    // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n    // defs in case TestBed makes changes to the originals.\n    this.defCleanupOps = [];\n    this._injector = null;\n    this.compilerProviders = null;\n    this.providerOverrides = [];\n    this.rootProviderOverrides = [];\n    // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n    // module's provider list.\n    this.providerOverridesByModule = new Map();\n    this.providerOverridesByToken = new Map();\n    this.scopesWithOverriddenProviders = new Set();\n    this.testModuleRef = null;\n    this.deferBlockBehavior = DEFER_BLOCK_DEFAULT_BEHAVIOR;\n    class DynamicTestModule {}\n    this.testModuleType = DynamicTestModule;\n  }\n  setCompilerProviders(providers) {\n    this.compilerProviders = providers;\n    this._injector = null;\n  }\n  configureTestingModule(moduleDef) {\n    // Enqueue any compilation tasks for the directly declared component.\n    if (moduleDef.declarations !== undefined) {\n      // Verify that there are no standalone components\n      assertNoStandaloneComponents(moduleDef.declarations, this.resolvers.component, '\"TestBed.configureTestingModule\" call');\n      this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n      this.declarations.push(...moduleDef.declarations);\n    }\n    // Enqueue any compilation tasks for imported modules.\n    if (moduleDef.imports !== undefined) {\n      this.queueTypesFromModulesArray(moduleDef.imports);\n      this.imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.providers !== undefined) {\n      this.providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.schemas !== undefined) {\n      this.schemas.push(...moduleDef.schemas);\n    }\n    this.deferBlockBehavior = moduleDef.deferBlockBehavior ?? DEFER_BLOCK_DEFAULT_BEHAVIOR;\n  }\n  overrideModule(ngModule, override) {\n    if (ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n      ɵdepsTracker.clearScopeCacheFor(ngModule);\n    }\n    this.overriddenModules.add(ngModule);\n    // Compile the module right away.\n    this.resolvers.module.addOverride(ngModule, override);\n    const metadata = this.resolvers.module.resolve(ngModule);\n    if (metadata === null) {\n      throw invalidTypeError(ngModule.name, 'NgModule');\n    }\n    this.recompileNgModule(ngModule, metadata);\n    // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n    // new declarations or imported modules. Ingest any possible new types and add them to the\n    // current queue.\n    this.queueTypesFromModulesArray([ngModule]);\n  }\n  overrideComponent(component, override) {\n    this.verifyNoStandaloneFlagOverrides(component, override);\n    this.resolvers.component.addOverride(component, override);\n    this.pendingComponents.add(component);\n  }\n  overrideDirective(directive, override) {\n    this.verifyNoStandaloneFlagOverrides(directive, override);\n    this.resolvers.directive.addOverride(directive, override);\n    this.pendingDirectives.add(directive);\n  }\n  overridePipe(pipe, override) {\n    this.verifyNoStandaloneFlagOverrides(pipe, override);\n    this.resolvers.pipe.addOverride(pipe, override);\n    this.pendingPipes.add(pipe);\n  }\n  verifyNoStandaloneFlagOverrides(type, override) {\n    if (override.add?.hasOwnProperty('standalone') || override.set?.hasOwnProperty('standalone') || override.remove?.hasOwnProperty('standalone')) {\n      throw new Error(`An override for the ${type.name} class has the \\`standalone\\` flag. ` + `Changing the \\`standalone\\` flag via TestBed overrides is not supported.`);\n    }\n  }\n  overrideProvider(token, provider) {\n    let providerDef;\n    if (provider.useFactory !== undefined) {\n      providerDef = {\n        provide: token,\n        useFactory: provider.useFactory,\n        deps: provider.deps || [],\n        multi: provider.multi\n      };\n    } else if (provider.useValue !== undefined) {\n      providerDef = {\n        provide: token,\n        useValue: provider.useValue,\n        multi: provider.multi\n      };\n    } else {\n      providerDef = {\n        provide: token\n      };\n    }\n    const injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n    const providedIn = injectableDef === null ? null : resolveForwardRef(injectableDef.providedIn);\n    const overridesBucket = providedIn === 'root' ? this.rootProviderOverrides : this.providerOverrides;\n    overridesBucket.push(providerDef);\n    // Keep overrides grouped by token as well for fast lookups using token\n    this.providerOverridesByToken.set(token, providerDef);\n    if (injectableDef !== null && providedIn !== null && typeof providedIn !== 'string') {\n      const existingOverrides = this.providerOverridesByModule.get(providedIn);\n      if (existingOverrides !== undefined) {\n        existingOverrides.push(providerDef);\n      } else {\n        this.providerOverridesByModule.set(providedIn, [providerDef]);\n      }\n    }\n  }\n  overrideTemplateUsingTestingModule(type, template) {\n    const def = type[ɵNG_COMP_DEF];\n    const hasStyleUrls = () => {\n      const metadata = this.resolvers.component.resolve(type);\n      return !!metadata.styleUrl || !!metadata.styleUrls?.length;\n    };\n    const overrideStyleUrls = !!def && !ɵisComponentDefPendingResolution(type) && hasStyleUrls();\n    // In Ivy, compiling a component does not require knowing the module providing the\n    // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n    // overrideComponent. Important: overriding template requires full Component re-compilation,\n    // which may fail in case styleUrls are also present (thus Component is considered as required\n    // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n    // preserve current styles available on Component def and restore styles back once compilation\n    // is complete.\n    const override = overrideStyleUrls ? {\n      template,\n      styles: [],\n      styleUrls: [],\n      styleUrl: undefined\n    } : {\n      template\n    };\n    this.overrideComponent(type, {\n      set: override\n    });\n    if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n      this.existingComponentStyles.set(type, def.styles);\n    }\n    // Set the component's scope to be the testing module.\n    this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n  }\n  resolvePendingComponentsWithAsyncMetadata() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.pendingComponents.size === 0) return;\n      const promises = [];\n      for (const component of _this2.pendingComponents) {\n        const asyncMetadataFn = ɵgetAsyncClassMetadataFn(component);\n        if (asyncMetadataFn) {\n          promises.push(asyncMetadataFn());\n        }\n      }\n      const resolvedDeps = yield Promise.all(promises);\n      _this2.queueTypesFromModulesArray(resolvedDeps.flat(2));\n    })();\n  }\n  compileComponents() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.clearComponentResolutionQueue();\n      // Wait for all async metadata for components that were\n      // overridden, we need resolved metadata to perform an override\n      // and re-compile a component.\n      yield _this3.resolvePendingComponentsWithAsyncMetadata();\n      // Verify that there were no standalone components present in the `declarations` field\n      // during the `TestBed.configureTestingModule` call. We perform this check here in addition\n      // to the logic in the `configureTestingModule` function, since at this point we have\n      // all async metadata resolved.\n      assertNoStandaloneComponents(_this3.declarations, _this3.resolvers.component, '\"TestBed.configureTestingModule\" call');\n      // Run compilers for all queued types.\n      let needsAsyncResources = _this3.compileTypesSync();\n      // compileComponents() should not be async unless it needs to be.\n      if (needsAsyncResources) {\n        let resourceLoader;\n        let resolver = url => {\n          if (!resourceLoader) {\n            resourceLoader = _this3.injector.get(ResourceLoader);\n          }\n          return Promise.resolve(resourceLoader.get(url));\n        };\n        yield ɵresolveComponentResources(resolver);\n      }\n    })();\n  }\n  finalize() {\n    // One last compile\n    this.compileTypesSync();\n    // Create the testing module itself.\n    this.compileTestModule();\n    this.applyTransitiveScopes();\n    this.applyProviderOverrides();\n    // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n    // Components have `styleUrls` fields defined and template override was requested.\n    this.patchComponentsWithExistingStyles();\n    // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n    // every component.\n    this.componentToModuleScope.clear();\n    const parentInjector = this.platform.injector;\n    this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector, []);\n    // ApplicationInitStatus.runInitializers() is marked @internal to core.\n    // Cast it to any before accessing it.\n    this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers();\n    // Set locale ID after running app initializers, since locale information might be updated while\n    // running initializers. This is also consistent with the execution order while bootstrapping an\n    // app (see `packages/core/src/application_ref.ts` file).\n    const localeId = this.testModuleRef.injector.get(LOCALE_ID, ɵDEFAULT_LOCALE_ID);\n    ɵsetLocaleId(localeId);\n    return this.testModuleRef;\n  }\n  /**\n   * @internal\n   */\n  _compileNgModuleSync(moduleType) {\n    this.queueTypesFromModulesArray([moduleType]);\n    this.compileTypesSync();\n    this.applyProviderOverrides();\n    this.applyProviderOverridesInScope(moduleType);\n    this.applyTransitiveScopes();\n  }\n  /**\n   * @internal\n   */\n  _compileNgModuleAsync(moduleType) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.queueTypesFromModulesArray([moduleType]);\n      yield _this4.compileComponents();\n      _this4.applyProviderOverrides();\n      _this4.applyProviderOverridesInScope(moduleType);\n      _this4.applyTransitiveScopes();\n    })();\n  }\n  /**\n   * @internal\n   */\n  _getModuleResolver() {\n    return this.resolvers.module;\n  }\n  /**\n   * @internal\n   */\n  _getComponentFactories(moduleType) {\n    return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\n      const componentDef = declaration.ɵcmp;\n      componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, this.testModuleRef));\n      return factories;\n    }, []);\n  }\n  compileTypesSync() {\n    // Compile all queued components, directives, pipes.\n    let needsAsyncResources = false;\n    this.pendingComponents.forEach(declaration => {\n      if (ɵgetAsyncClassMetadataFn(declaration)) {\n        throw new Error(`Component '${declaration.name}' has unresolved metadata. ` + `Please call \\`await TestBed.compileComponents()\\` before running this test.`);\n      }\n      needsAsyncResources = needsAsyncResources || ɵisComponentDefPendingResolution(declaration);\n      const metadata = this.resolvers.component.resolve(declaration);\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Component');\n      }\n      this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n      if (ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n        ɵdepsTracker.clearScopeCacheFor(declaration);\n      }\n      ɵcompileComponent(declaration, metadata);\n    });\n    this.pendingComponents.clear();\n    this.pendingDirectives.forEach(declaration => {\n      const metadata = this.resolvers.directive.resolve(declaration);\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Directive');\n      }\n      this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n      ɵcompileDirective(declaration, metadata);\n    });\n    this.pendingDirectives.clear();\n    this.pendingPipes.forEach(declaration => {\n      const metadata = this.resolvers.pipe.resolve(declaration);\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Pipe');\n      }\n      this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n      ɵcompilePipe(declaration, metadata);\n    });\n    this.pendingPipes.clear();\n    return needsAsyncResources;\n  }\n  applyTransitiveScopes() {\n    if (this.overriddenModules.size > 0) {\n      // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n      // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n      // collect all affected modules and reset scopes to force their re-calculation.\n      const testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\n      const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n      if (affectedModules.size > 0) {\n        affectedModules.forEach(moduleType => {\n          if (!ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n            this.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\n            moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\n          } else {\n            ɵdepsTracker.clearScopeCacheFor(moduleType);\n          }\n        });\n      }\n    }\n    const moduleToScope = new Map();\n    const getScopeOfModule = moduleType => {\n      if (!moduleToScope.has(moduleType)) {\n        const isTestingModule = isTestingModuleOverride(moduleType);\n        const realType = isTestingModule ? this.testModuleType : moduleType;\n        moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\n      }\n      return moduleToScope.get(moduleType);\n    };\n    this.componentToModuleScope.forEach((moduleType, componentType) => {\n      if (moduleType !== null) {\n        const moduleScope = getScopeOfModule(moduleType);\n        this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n        this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs');\n        ɵpatchComponentDefWithScope(getComponentDef(componentType), moduleScope);\n      }\n      // `tView` that is stored on component def contains information about directives and pipes\n      // that are in the scope of this component. Patching component scope will cause `tView` to be\n      // changed. Store original `tView` before patching scope, so the `tView` (including scope\n      // information) is restored back to its previous/original state before running next test.\n      // Resetting `tView` is also needed for cases when we apply provider overrides and those\n      // providers are defined on component's level, in which case they may end up included into\n      // `tView.blueprint`.\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\n    });\n    this.componentToModuleScope.clear();\n  }\n  applyProviderOverrides() {\n    const maybeApplyOverrides = field => type => {\n      const resolver = field === ɵNG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\n      const metadata = resolver.resolve(type);\n      if (this.hasProviderOverrides(metadata.providers)) {\n        this.patchDefWithProviderOverrides(type, field);\n      }\n    };\n    this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n    this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n    this.seenComponents.clear();\n    this.seenDirectives.clear();\n  }\n  /**\n   * Applies provider overrides to a given type (either an NgModule or a standalone component)\n   * and all imported NgModules and standalone components recursively.\n   */\n  applyProviderOverridesInScope(type) {\n    const hasScope = isStandaloneComponent(type) || isNgModule(type);\n    // The function can be re-entered recursively while inspecting dependencies\n    // of an NgModule or a standalone component. Exit early if we come across a\n    // type that can not have a scope (directive or pipe) or the type is already\n    // processed earlier.\n    if (!hasScope || this.scopesWithOverriddenProviders.has(type)) {\n      return;\n    }\n    this.scopesWithOverriddenProviders.add(type);\n    // NOTE: the line below triggers JIT compilation of the module injector,\n    // which also invokes verification of the NgModule semantics, which produces\n    // detailed error messages. The fact that the code relies on this line being\n    // present here is suspicious and should be refactored in a way that the line\n    // below can be moved (for ex. after an early exit check below).\n    const injectorDef = type[ɵNG_INJ_DEF];\n    // No provider overrides, exit early.\n    if (this.providerOverridesByToken.size === 0) return;\n    if (isStandaloneComponent(type)) {\n      // Visit all component dependencies and override providers there.\n      const def = getComponentDef(type);\n      const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n      for (const dependency of dependencies) {\n        this.applyProviderOverridesInScope(dependency);\n      }\n    } else {\n      const providers = [...injectorDef.providers, ...(this.providerOverridesByModule.get(type) || [])];\n      if (this.hasProviderOverrides(providers)) {\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, type);\n        this.storeFieldOfDefOnType(type, ɵNG_INJ_DEF, 'providers');\n        injectorDef.providers = this.getOverriddenProviders(providers);\n      }\n      // Apply provider overrides to imported modules recursively\n      const moduleDef = type[ɵNG_MOD_DEF];\n      const imports = maybeUnwrapFn(moduleDef.imports);\n      for (const importedModule of imports) {\n        this.applyProviderOverridesInScope(importedModule);\n      }\n      // Also override the providers on any ModuleWithProviders imports since those don't appear in\n      // the moduleDef.\n      for (const importedModule of flatten(injectorDef.imports)) {\n        if (isModuleWithProviders(importedModule)) {\n          this.defCleanupOps.push({\n            object: importedModule,\n            fieldName: 'providers',\n            originalValue: importedModule.providers\n          });\n          importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n        }\n      }\n    }\n  }\n  patchComponentsWithExistingStyles() {\n    this.existingComponentStyles.forEach((styles, type) => type[ɵNG_COMP_DEF].styles = styles);\n    this.existingComponentStyles.clear();\n  }\n  queueTypeArray(arr, moduleType) {\n    for (const value of arr) {\n      if (Array.isArray(value)) {\n        this.queueTypeArray(value, moduleType);\n      } else {\n        this.queueType(value, moduleType);\n      }\n    }\n  }\n  recompileNgModule(ngModule, metadata) {\n    // Cache the initial ngModuleDef as it will be overwritten.\n    this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n    this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n    ɵcompileNgModuleDefs(ngModule, metadata);\n  }\n  queueType(type, moduleType) {\n    const component = this.resolvers.component.resolve(type);\n    if (component) {\n      // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n      // missing. That might happen in case a class without any Angular decorators extends another\n      // class where Component/Directive/Pipe decorator is defined.\n      if (ɵisComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n        this.pendingComponents.add(type);\n      }\n      this.seenComponents.add(type);\n      // Keep track of the module which declares this component, so later the component's scope\n      // can be set correctly. If the component has already been recorded here, then one of several\n      // cases is true:\n      // * the module containing the component was imported multiple times (common).\n      // * the component is declared in multiple modules (which is an error).\n      // * the component was in 'declarations' of the testing module, and also in an imported module\n      //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n      // * overrideTemplateUsingTestingModule was called for the component in which case the module\n      //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n      //\n      // If the component was previously in the testing module's 'declarations' (meaning the\n      // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n      // real module, which was imported. This pattern is understood to mean that the component\n      // should use its original scope, but that the testing module should also contain the\n      // component in its scope.\n      if (!this.componentToModuleScope.has(type) || this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\n        this.componentToModuleScope.set(type, moduleType);\n      }\n      return;\n    }\n    const directive = this.resolvers.directive.resolve(type);\n    if (directive) {\n      if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n        this.pendingDirectives.add(type);\n      }\n      this.seenDirectives.add(type);\n      return;\n    }\n    const pipe = this.resolvers.pipe.resolve(type);\n    if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n      this.pendingPipes.add(type);\n      return;\n    }\n  }\n  queueTypesFromModulesArray(arr) {\n    // Because we may encounter the same NgModule or a standalone Component while processing\n    // the dependencies of an NgModule or a standalone Component, we cache them in this set so we\n    // can skip ones that have already been seen encountered. In some test setups, this caching\n    // resulted in 10X runtime improvement.\n    const processedDefs = new Set();\n    const queueTypesFromModulesArrayRecur = arr => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          queueTypesFromModulesArrayRecur(value);\n        } else if (hasNgModuleDef(value)) {\n          const def = value.ɵmod;\n          if (processedDefs.has(def)) {\n            continue;\n          }\n          processedDefs.add(def);\n          // Look through declarations, imports, and exports, and queue\n          // everything found there.\n          this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n        } else if (isModuleWithProviders(value)) {\n          queueTypesFromModulesArrayRecur([value.ngModule]);\n        } else if (isStandaloneComponent(value)) {\n          this.queueType(value, null);\n          const def = getComponentDef(value);\n          if (processedDefs.has(def)) {\n            continue;\n          }\n          processedDefs.add(def);\n          const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n          dependencies.forEach(dependency => {\n            // Note: in AOT, the `dependencies` might also contain regular\n            // (NgModule-based) Component, Directive and Pipes, so we handle\n            // them separately and proceed with recursive process for standalone\n            // Components and NgModules only.\n            if (isStandaloneComponent(dependency) || hasNgModuleDef(dependency)) {\n              queueTypesFromModulesArrayRecur([dependency]);\n            } else {\n              this.queueType(dependency, null);\n            }\n          });\n        }\n      }\n    };\n    queueTypesFromModulesArrayRecur(arr);\n  }\n  // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n  // that import (even transitively) an overridden one. For all affected modules we need to\n  // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n  // of this function is to collect all affected modules in a set for further processing. Example:\n  // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n  // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n  // invalidated with the override.\n  collectModulesAffectedByOverrides(arr) {\n    const seenModules = new Set();\n    const affectedModules = new Set();\n    const calcAffectedModulesRecur = (arr, path) => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          // If the value is an array, just flatten it (by invoking this function recursively),\n          // keeping \"path\" the same.\n          calcAffectedModulesRecur(value, path);\n        } else if (hasNgModuleDef(value)) {\n          if (seenModules.has(value)) {\n            // If we've seen this module before and it's included into \"affected modules\" list, mark\n            // the whole path that leads to that module as affected, but do not descend into its\n            // imports, since we already examined them before.\n            if (affectedModules.has(value)) {\n              path.forEach(item => affectedModules.add(item));\n            }\n            continue;\n          }\n          seenModules.add(value);\n          if (this.overriddenModules.has(value)) {\n            path.forEach(item => affectedModules.add(item));\n          }\n          // Examine module imports recursively to look for overridden modules.\n          const moduleDef = value[ɵNG_MOD_DEF];\n          calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n        }\n      }\n    };\n    calcAffectedModulesRecur(arr, []);\n    return affectedModules;\n  }\n  /**\n   * Preserve an original def (such as ɵmod, ɵinj, etc) before applying an override.\n   * Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of\n   * an NgModule). If there is a def in a set already, don't override it, since\n   * an original one should be restored at the end of a test.\n   */\n  maybeStoreNgDef(prop, type) {\n    if (!this.initialNgDefs.has(type)) {\n      this.initialNgDefs.set(type, new Map());\n    }\n    const currentDefs = this.initialNgDefs.get(type);\n    if (!currentDefs.has(prop)) {\n      const currentDef = Object.getOwnPropertyDescriptor(type, prop);\n      currentDefs.set(prop, currentDef);\n    }\n  }\n  storeFieldOfDefOnType(type, defField, fieldName) {\n    const def = type[defField];\n    const originalValue = def[fieldName];\n    this.defCleanupOps.push({\n      object: def,\n      fieldName,\n      originalValue\n    });\n  }\n  /**\n   * Clears current components resolution queue, but stores the state of the queue, so we can\n   * restore it later. Clearing the queue is required before we try to compile components (via\n   * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n   */\n  clearComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue === null) {\n      this.originalComponentResolutionQueue = new Map();\n    }\n    ɵclearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));\n  }\n  /*\n   * Restores component resolution queue to the previously saved state. This operation is performed\n   * as a part of restoring the state after completion of the current set of tests (that might\n   * potentially mutate the state).\n   */\n  restoreComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue !== null) {\n      ɵrestoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n      this.originalComponentResolutionQueue = null;\n    }\n  }\n  restoreOriginalState() {\n    // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n    // case there were multiple overrides for the same field).\n    forEachRight(this.defCleanupOps, op => {\n      op.object[op.fieldName] = op.originalValue;\n    });\n    // Restore initial component/directive/pipe defs\n    this.initialNgDefs.forEach((defs, type) => {\n      if (ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n        ɵdepsTracker.clearScopeCacheFor(type);\n      }\n      defs.forEach((descriptor, prop) => {\n        if (!descriptor) {\n          // Delete operations are generally undesirable since they have performance\n          // implications on objects they were applied to. In this particular case, situations\n          // where this code is invoked should be quite rare to cause any noticeable impact,\n          // since it's applied only to some test cases (for example when class with no\n          // annotations extends some @Component) when we need to clear 'ɵcmp' field on a given\n          // class to restore its original state (before applying overrides and running tests).\n          delete type[prop];\n        } else {\n          Object.defineProperty(type, prop, descriptor);\n        }\n      });\n    });\n    this.initialNgDefs.clear();\n    this.scopesWithOverriddenProviders.clear();\n    this.restoreComponentResolutionQueue();\n    // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n    ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n  }\n  compileTestModule() {\n    class RootScopeModule {}\n    ɵcompileNgModuleDefs(RootScopeModule, {\n      providers: [...this.rootProviderOverrides]\n    });\n    const providers = [provideZoneChangeDetection(), {\n      provide: Compiler,\n      useFactory: () => new R3TestCompiler(this)\n    }, {\n      provide: ɵDEFER_BLOCK_CONFIG,\n      useValue: {\n        behavior: this.deferBlockBehavior\n      }\n    }, ...this.providers, ...this.providerOverrides];\n    const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n    // clang-format off\n    ɵcompileNgModuleDefs(this.testModuleType, {\n      declarations: this.declarations,\n      imports,\n      schemas: this.schemas,\n      providers\n    }, /* allowDuplicateDeclarationsInRoot */true);\n    // clang-format on\n    this.applyProviderOverridesInScope(this.testModuleType);\n  }\n  get injector() {\n    if (this._injector !== null) {\n      return this._injector;\n    }\n    const providers = [];\n    const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n    compilerOptions.forEach(opts => {\n      if (opts.providers) {\n        providers.push(opts.providers);\n      }\n    });\n    if (this.compilerProviders !== null) {\n      providers.push(...this.compilerProviders);\n    }\n    this._injector = Injector.create({\n      providers,\n      parent: this.platform.injector\n    });\n    return this._injector;\n  }\n  // get overrides for a specific provider (if any)\n  getSingleProviderOverrides(provider) {\n    const token = getProviderToken(provider);\n    return this.providerOverridesByToken.get(token) || null;\n  }\n  getProviderOverrides(providers) {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return [];\n    // There are two flattening operations here. The inner flattenProviders() operates on the\n    // metadata's providers and applies a mapping function which retrieves overrides for each\n    // incoming provider. The outer flatten() then flattens the produced overrides array. If this is\n    // not done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n    // providers array and contaminate any error messages that might be generated.\n    return flatten(flattenProviders(providers, provider => this.getSingleProviderOverrides(provider) || []));\n  }\n  getOverriddenProviders(providers) {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return [];\n    const flattenedProviders = flattenProviders(providers);\n    const overrides = this.getProviderOverrides(flattenedProviders);\n    const overriddenProviders = [...flattenedProviders, ...overrides];\n    const final = [];\n    const seenOverriddenProviders = new Set();\n    // We iterate through the list of providers in reverse order to make sure provider overrides\n    // take precedence over the values defined in provider list. We also filter out all providers\n    // that have overrides, keeping overridden values only. This is needed, since presence of a\n    // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n    forEachRight(overriddenProviders, provider => {\n      const token = getProviderToken(provider);\n      if (this.providerOverridesByToken.has(token)) {\n        if (!seenOverriddenProviders.has(token)) {\n          seenOverriddenProviders.add(token);\n          // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n          // make sure that provided override takes highest precedence and is not combined with\n          // other instances of the same multi provider.\n          final.unshift({\n            ...provider,\n            multi: false\n          });\n        }\n      } else {\n        final.unshift(provider);\n      }\n    });\n    return final;\n  }\n  hasProviderOverrides(providers) {\n    return this.getProviderOverrides(providers).length > 0;\n  }\n  patchDefWithProviderOverrides(declaration, field) {\n    const def = declaration[field];\n    if (def && def.providersResolver) {\n      this.maybeStoreNgDef(field, declaration);\n      const resolver = def.providersResolver;\n      const processProvidersFn = providers => this.getOverriddenProviders(providers);\n      this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n      def.providersResolver = ngDef => resolver(ngDef, processProvidersFn);\n    }\n  }\n}\nfunction initResolvers() {\n  return {\n    module: new NgModuleResolver(),\n    component: new ComponentResolver(),\n    directive: new DirectiveResolver(),\n    pipe: new PipeResolver()\n  };\n}\nfunction isStandaloneComponent(value) {\n  const def = getComponentDef(value);\n  return !!def?.standalone;\n}\nfunction getComponentDef(value) {\n  return value.ɵcmp ?? null;\n}\nfunction hasNgModuleDef(value) {\n  return value.hasOwnProperty('ɵmod');\n}\nfunction isNgModule(value) {\n  return hasNgModuleDef(value);\n}\nfunction maybeUnwrapFn(maybeFn) {\n  return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\nfunction flatten(values) {\n  const out = [];\n  values.forEach(value => {\n    if (Array.isArray(value)) {\n      out.push(...flatten(value));\n    } else {\n      out.push(value);\n    }\n  });\n  return out;\n}\nfunction identityFn(value) {\n  return value;\n}\nfunction flattenProviders(providers, mapFn = identityFn) {\n  const out = [];\n  for (let provider of providers) {\n    if (ɵisEnvironmentProviders(provider)) {\n      provider = provider.ɵproviders;\n    }\n    if (Array.isArray(provider)) {\n      out.push(...flattenProviders(provider, mapFn));\n    } else {\n      out.push(mapFn(provider));\n    }\n  }\n  return out;\n}\nfunction getProviderField(provider, field) {\n  return provider && typeof provider === 'object' && provider[field];\n}\nfunction getProviderToken(provider) {\n  return getProviderField(provider, 'provide') || provider;\n}\nfunction isModuleWithProviders(value) {\n  return value.hasOwnProperty('ngModule');\n}\nfunction forEachRight(values, fn) {\n  for (let idx = values.length - 1; idx >= 0; idx--) {\n    fn(values[idx], idx);\n  }\n}\nfunction invalidTypeError(name, expectedType) {\n  return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\n}\nclass R3TestCompiler {\n  constructor(testBed) {\n    this.testBed = testBed;\n  }\n  compileModuleSync(moduleType) {\n    this.testBed._compileNgModuleSync(moduleType);\n    return new ɵNgModuleFactory(moduleType);\n  }\n  compileModuleAsync(moduleType) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      yield _this5.testBed._compileNgModuleAsync(moduleType);\n      return new ɵNgModuleFactory(moduleType);\n    })();\n  }\n  compileModuleAndAllComponentsSync(moduleType) {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n    const componentFactories = this.testBed._getComponentFactories(moduleType);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n  compileModuleAndAllComponentsAsync(moduleType) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const ngModuleFactory = yield _this6.compileModuleAsync(moduleType);\n      const componentFactories = _this6.testBed._getComponentFactories(moduleType);\n      return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    })();\n  }\n  clearCache() {}\n  clearCacheFor(type) {}\n  getModuleId(moduleType) {\n    const meta = this.testBed._getModuleResolver().resolve(moduleType);\n    return meta && meta.id || undefined;\n  }\n}\n\n// The formatter and CI disagree on how this import statement should be formatted. Both try to keep\nlet _nextRootElementId = 0;\n/**\n * Returns a singleton of the `TestBed` class.\n *\n * @publicApi\n */\nfunction getTestBed() {\n  return TestBedImpl.INSTANCE;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n */\nclass TestBedImpl {\n  constructor() {\n    /**\n     * Defer block behavior option that specifies whether defer blocks will be triggered manually\n     * or set to play through.\n     */\n    this._instanceDeferBlockBehavior = DEFER_BLOCK_DEFAULT_BEHAVIOR;\n    // Properties\n    this.platform = null;\n    this.ngModule = null;\n    this._compiler = null;\n    this._testModuleRef = null;\n    this._activeFixtures = [];\n    /**\n     * Internal-only flag to indicate whether a module\n     * scoping queue has been checked and flushed already.\n     * @nodoc\n     */\n    this.globalCompilationChecked = false;\n  }\n  static #_ = this._INSTANCE = null;\n  static get INSTANCE() {\n    return TestBedImpl._INSTANCE = TestBedImpl._INSTANCE || new TestBedImpl();\n  }\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n  static initTestEnvironment(ngModule, platform, options) {\n    const testBed = TestBedImpl.INSTANCE;\n    testBed.initTestEnvironment(ngModule, platform, options);\n    return testBed;\n  }\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n  static resetTestEnvironment() {\n    TestBedImpl.INSTANCE.resetTestEnvironment();\n  }\n  static configureCompiler(config) {\n    return TestBedImpl.INSTANCE.configureCompiler(config);\n  }\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef) {\n    return TestBedImpl.INSTANCE.configureTestingModule(moduleDef);\n  }\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents() {\n    return TestBedImpl.INSTANCE.compileComponents();\n  }\n  static overrideModule(ngModule, override) {\n    return TestBedImpl.INSTANCE.overrideModule(ngModule, override);\n  }\n  static overrideComponent(component, override) {\n    return TestBedImpl.INSTANCE.overrideComponent(component, override);\n  }\n  static overrideDirective(directive, override) {\n    return TestBedImpl.INSTANCE.overrideDirective(directive, override);\n  }\n  static overridePipe(pipe, override) {\n    return TestBedImpl.INSTANCE.overridePipe(pipe, override);\n  }\n  static overrideTemplate(component, template) {\n    return TestBedImpl.INSTANCE.overrideTemplate(component, template);\n  }\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideTemplateUsingTestingModule(component, template) {\n    return TestBedImpl.INSTANCE.overrideTemplateUsingTestingModule(component, template);\n  }\n  static overrideProvider(token, provider) {\n    return TestBedImpl.INSTANCE.overrideProvider(token, provider);\n  }\n  static inject(token, notFoundValue, flags) {\n    return TestBedImpl.INSTANCE.inject(token, notFoundValue, ɵconvertToBitFlags(flags));\n  }\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  static get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n    return TestBedImpl.INSTANCE.inject(token, notFoundValue, flags);\n  }\n  /**\n   * Runs the given function in the `EnvironmentInjector` context of `TestBed`.\n   *\n   * @see {@link EnvironmentInjector#runInContext}\n   */\n  static runInInjectionContext(fn) {\n    return TestBedImpl.INSTANCE.runInInjectionContext(fn);\n  }\n  static createComponent(component) {\n    return TestBedImpl.INSTANCE.createComponent(component);\n  }\n  static resetTestingModule() {\n    return TestBedImpl.INSTANCE.resetTestingModule();\n  }\n  static execute(tokens, fn, context) {\n    return TestBedImpl.INSTANCE.execute(tokens, fn, context);\n  }\n  static get platform() {\n    return TestBedImpl.INSTANCE.platform;\n  }\n  static get ngModule() {\n    return TestBedImpl.INSTANCE.ngModule;\n  }\n  static flushEffects() {\n    return TestBedImpl.INSTANCE.flushEffects();\n  }\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   *\n   * @publicApi\n   */\n  initTestEnvironment(ngModule, platform, options) {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    TestBedImpl._environmentTeardownOptions = options?.teardown;\n    TestBedImpl._environmentErrorOnUnknownElementsOption = options?.errorOnUnknownElements;\n    TestBedImpl._environmentErrorOnUnknownPropertiesOption = options?.errorOnUnknownProperties;\n    this.platform = platform;\n    this.ngModule = ngModule;\n    this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n    // TestBed does not have an API which can reliably detect the start of a test, and thus could be\n    // used to track the state of the NgModule registry and reset it correctly. Instead, when we\n    // know we're in a testing scenario, we disable the check for duplicate NgModule registration\n    // completely.\n    ɵsetAllowDuplicateNgModuleIdsForTest(true);\n  }\n  /**\n   * Reset the providers for the test injector.\n   *\n   * @publicApi\n   */\n  resetTestEnvironment() {\n    this.resetTestingModule();\n    this._compiler = null;\n    this.platform = null;\n    this.ngModule = null;\n    TestBedImpl._environmentTeardownOptions = undefined;\n    ɵsetAllowDuplicateNgModuleIdsForTest(false);\n  }\n  resetTestingModule() {\n    this.checkGlobalCompilationFinished();\n    ɵresetCompiledComponents();\n    if (this._compiler !== null) {\n      this.compiler.restoreOriginalState();\n    }\n    this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n    // Restore the previous value of the \"error on unknown elements\" option\n    ɵsetUnknownElementStrictMode(this._previousErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT);\n    // Restore the previous value of the \"error on unknown properties\" option\n    ɵsetUnknownPropertyStrictMode(this._previousErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT);\n    // We have to chain a couple of try/finally blocks, because each step can\n    // throw errors and we don't want it to interrupt the next step and we also\n    // want an error to be thrown at the end.\n    try {\n      this.destroyActiveFixtures();\n    } finally {\n      try {\n        if (this.shouldTearDownTestingModule()) {\n          this.tearDownTestingModule();\n        }\n      } finally {\n        this._testModuleRef = null;\n        this._instanceTeardownOptions = undefined;\n        this._instanceErrorOnUnknownElementsOption = undefined;\n        this._instanceErrorOnUnknownPropertiesOption = undefined;\n        this._instanceDeferBlockBehavior = DEFER_BLOCK_DEFAULT_BEHAVIOR;\n      }\n    }\n    return this;\n  }\n  configureCompiler(config) {\n    if (config.useJit != null) {\n      throw new Error('JIT compiler is not configurable via TestBed APIs.');\n    }\n    if (config.providers !== undefined) {\n      this.compiler.setCompilerProviders(config.providers);\n    }\n    return this;\n  }\n  configureTestingModule(moduleDef) {\n    this.assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n    // Trigger module scoping queue flush before executing other TestBed operations in a test.\n    // This is needed for the first test invocation to ensure that globally declared modules have\n    // their components scoped properly. See the `checkGlobalCompilationFinished` function\n    // description for additional info.\n    this.checkGlobalCompilationFinished();\n    // Always re-assign the options, even if they're undefined.\n    // This ensures that we don't carry them between tests.\n    this._instanceTeardownOptions = moduleDef.teardown;\n    this._instanceErrorOnUnknownElementsOption = moduleDef.errorOnUnknownElements;\n    this._instanceErrorOnUnknownPropertiesOption = moduleDef.errorOnUnknownProperties;\n    this._instanceDeferBlockBehavior = moduleDef.deferBlockBehavior ?? DEFER_BLOCK_DEFAULT_BEHAVIOR;\n    // Store the current value of the strict mode option,\n    // so we can restore it later\n    this._previousErrorOnUnknownElementsOption = ɵgetUnknownElementStrictMode();\n    ɵsetUnknownElementStrictMode(this.shouldThrowErrorOnUnknownElements());\n    this._previousErrorOnUnknownPropertiesOption = ɵgetUnknownPropertyStrictMode();\n    ɵsetUnknownPropertyStrictMode(this.shouldThrowErrorOnUnknownProperties());\n    this.compiler.configureTestingModule(moduleDef);\n    return this;\n  }\n  compileComponents() {\n    return this.compiler.compileComponents();\n  }\n  inject(token, notFoundValue, flags) {\n    if (token === TestBed) {\n      return this;\n    }\n    const UNDEFINED = {};\n    const result = this.testModuleRef.injector.get(token, UNDEFINED, ɵconvertToBitFlags(flags));\n    return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) : result;\n  }\n  /** @deprecated from v9.0.0 use TestBed.inject */\n  get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n    return this.inject(token, notFoundValue, flags);\n  }\n  runInInjectionContext(fn) {\n    return runInInjectionContext(this.inject(EnvironmentInjector), fn);\n  }\n  execute(tokens, fn, context) {\n    const params = tokens.map(t => this.inject(t));\n    return fn.apply(context, params);\n  }\n  overrideModule(ngModule, override) {\n    this.assertNotInstantiated('overrideModule', 'override module metadata');\n    this.compiler.overrideModule(ngModule, override);\n    return this;\n  }\n  overrideComponent(component, override) {\n    this.assertNotInstantiated('overrideComponent', 'override component metadata');\n    this.compiler.overrideComponent(component, override);\n    return this;\n  }\n  overrideTemplateUsingTestingModule(component, template) {\n    this.assertNotInstantiated('TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n    this.compiler.overrideTemplateUsingTestingModule(component, template);\n    return this;\n  }\n  overrideDirective(directive, override) {\n    this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this.compiler.overrideDirective(directive, override);\n    return this;\n  }\n  overridePipe(pipe, override) {\n    this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this.compiler.overridePipe(pipe, override);\n    return this;\n  }\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token, provider) {\n    this.assertNotInstantiated('overrideProvider', 'override provider');\n    this.compiler.overrideProvider(token, provider);\n    return this;\n  }\n  overrideTemplate(component, template) {\n    return this.overrideComponent(component, {\n      set: {\n        template,\n        templateUrl: null\n      }\n    });\n  }\n  createComponent(type) {\n    const testComponentRenderer = this.inject(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n    if (ɵgetAsyncClassMetadataFn(type)) {\n      throw new Error(`Component '${type.name}' has unresolved metadata. ` + `Please call \\`await TestBed.compileComponents()\\` before running this test.`);\n    }\n    const componentDef = type.ɵcmp;\n    if (!componentDef) {\n      throw new Error(`It looks like '${ɵstringify(type)}' has not been compiled.`);\n    }\n    const componentFactory = new ɵRender3ComponentFactory(componentDef);\n    const initComponent = () => {\n      const componentRef = componentFactory.create(Injector.NULL, [], `#${rootElId}`, this.testModuleRef);\n      return this.runInInjectionContext(() => {\n        const hasScheduler = this.inject(ɵChangeDetectionScheduler, null) !== null;\n        const fixture = hasScheduler ? new ScheduledComponentFixture(componentRef) : new PseudoApplicationComponentFixture(componentRef);\n        fixture.initialize();\n        return fixture;\n      });\n    };\n    const noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n    const ngZone = noNgZone ? null : this.inject(NgZone, null);\n    const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n  get compiler() {\n    if (this._compiler === null) {\n      throw new Error(`Need to call TestBed.initTestEnvironment() first`);\n    }\n    return this._compiler;\n  }\n  /**\n   * @internal strip this from published d.ts files due to\n   * https://github.com/microsoft/TypeScript/issues/36216\n   */\n  get testModuleRef() {\n    if (this._testModuleRef === null) {\n      this._testModuleRef = this.compiler.finalize();\n    }\n    return this._testModuleRef;\n  }\n  assertNotInstantiated(methodName, methodDescription) {\n    if (this._testModuleRef !== null) {\n      throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` + `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n  /**\n   * Check whether the module scoping queue should be flushed, and flush it if needed.\n   *\n   * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n   * in-progress module compilation. This creates a potential hazard - the very first time the\n   * TestBed is initialized (or if it's reset without being initialized), there may be pending\n   * compilations of modules declared in global scope. These compilations should be finished.\n   *\n   * To ensure that globally declared modules have their components scoped properly, this function\n   * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n   * to any other operations, the scoping queue is flushed.\n   */\n  checkGlobalCompilationFinished() {\n    // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n    // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n    if (!this.globalCompilationChecked && this._testModuleRef === null) {\n      ɵflushModuleScopingQueueAsMuchAsPossible();\n    }\n    this.globalCompilationChecked = true;\n  }\n  destroyActiveFixtures() {\n    let errorCount = 0;\n    this._activeFixtures.forEach(fixture => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        errorCount++;\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e\n        });\n      }\n    });\n    this._activeFixtures = [];\n    if (errorCount > 0 && this.shouldRethrowTeardownErrors()) {\n      throw Error(`${errorCount} ${errorCount === 1 ? 'component' : 'components'} ` + `threw errors during cleanup`);\n    }\n  }\n  shouldRethrowTeardownErrors() {\n    const instanceOptions = this._instanceTeardownOptions;\n    const environmentOptions = TestBedImpl._environmentTeardownOptions;\n    // If the new teardown behavior hasn't been configured, preserve the old behavior.\n    if (!instanceOptions && !environmentOptions) {\n      return TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n    }\n    // Otherwise use the configured behavior or default to rethrowing.\n    return instanceOptions?.rethrowErrors ?? environmentOptions?.rethrowErrors ?? this.shouldTearDownTestingModule();\n  }\n  shouldThrowErrorOnUnknownElements() {\n    // Check if a configuration has been provided to throw when an unknown element is found\n    return this._instanceErrorOnUnknownElementsOption ?? TestBedImpl._environmentErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT;\n  }\n  shouldThrowErrorOnUnknownProperties() {\n    // Check if a configuration has been provided to throw when an unknown property is found\n    return this._instanceErrorOnUnknownPropertiesOption ?? TestBedImpl._environmentErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT;\n  }\n  shouldTearDownTestingModule() {\n    return this._instanceTeardownOptions?.destroyAfterEach ?? TestBedImpl._environmentTeardownOptions?.destroyAfterEach ?? TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n  }\n  getDeferBlockBehavior() {\n    return this._instanceDeferBlockBehavior;\n  }\n  tearDownTestingModule() {\n    // If the module ref has already been destroyed, we won't be able to get a test renderer.\n    if (this._testModuleRef === null) {\n      return;\n    }\n    // Resolve the renderer ahead of time, because we want to remove the root elements as the very\n    // last step, but the injector will be destroyed as a part of the module ref destruction.\n    const testRenderer = this.inject(TestComponentRenderer);\n    try {\n      this._testModuleRef.destroy();\n    } catch (e) {\n      if (this.shouldRethrowTeardownErrors()) {\n        throw e;\n      } else {\n        console.error('Error during cleanup of a testing module', {\n          component: this._testModuleRef.instance,\n          stacktrace: e\n        });\n      }\n    } finally {\n      testRenderer.removeAllRootElements?.();\n    }\n  }\n  /**\n   * Execute any pending effects.\n   *\n   * @developerPreview\n   */\n  flushEffects() {\n    this.inject(ɵEffectScheduler).flush();\n  }\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @publicApi\n */\nconst TestBed = TestBedImpl;\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`. Note: this function\n * (imported from the `@angular/core/testing` package) can **only** be used to inject dependencies\n * in tests. To inject dependencies in your application code, use the [`inject`](api/core/inject)\n * function from the `@angular/core` package instead.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * @publicApi\n */\nfunction inject(tokens, fn) {\n  const testBed = TestBedImpl.INSTANCE;\n  // Not using an arrow function to preserve context passed from call site\n  return function () {\n    return testBed.execute(tokens, fn, this);\n  };\n}\n/**\n * @publicApi\n */\nclass InjectSetupWrapper {\n  constructor(_moduleDef) {\n    this._moduleDef = _moduleDef;\n  }\n  _addModule() {\n    const moduleDef = this._moduleDef();\n    if (moduleDef) {\n      TestBedImpl.configureTestingModule(moduleDef);\n    }\n  }\n  inject(tokens, fn) {\n    const self = this;\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n      self._addModule();\n      return inject(tokens, fn).call(this);\n    };\n  }\n}\nfunction withModule(moduleDef, fn) {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n      const testBed = TestBedImpl.INSTANCE;\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n      return fn.apply(this);\n    };\n  }\n  return new InjectSetupWrapper(() => moduleDef);\n}\n\n/**\n * Public Test Library for unit testing Angular applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\n// Reset the test providers and the fake async zone before each test.\n// We keep a guard because somehow this file can make it into a bundle and be executed\n// beforeEach is only defined when executing the tests\nglobalThis.beforeEach?.(getCleanupHook(false));\n// We provide both a `beforeEach` and `afterEach`, because the updated behavior for\n// tearing down the module is supposed to run after the test so that we can associate\n// teardown errors with the correct test.\n// We keep a guard because somehow this file can make it into a bundle and be executed\n// afterEach is only defined when executing the tests\nglobalThis.afterEach?.(getCleanupHook(true));\nfunction getCleanupHook(expectedTeardownValue) {\n  return () => {\n    const testBed = TestBedImpl.INSTANCE;\n    if (testBed.shouldTearDownTestingModule() === expectedTeardownValue) {\n      testBed.resetTestingModule();\n      resetFakeAsyncZone();\n    }\n  };\n}\n/**\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\n * investigation.\n *\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\n *\n * @codeGenApi\n */\n// TODO(iminar): Remove this code in a safe way.\nconst __core_private_testing_placeholder__ = '';\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the core/testing package.\n */\n\n/// <reference types=\"jasmine\" />\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, DeferBlockFixture, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider };","map":{"version":3,"names":["ɵDeferBlockState","ɵtriggerResourceLoading","ɵrenderDeferBlockState","ɵCONTAINER_HEADER_OFFSET","ɵgetDeferBlocks","ɵDeferBlockBehavior","InjectionToken","inject","inject$1","ɵNoopNgZone","NgZone","ɵEffectScheduler","ApplicationRef","getDebugNode","RendererFactory2","ɵPendingTasks","ɵstringify","ɵReflectionCapabilities","Directive","Component","Pipe","NgModule","ɵgetAsyncClassMetadataFn","ɵgenerateStandaloneInDeclarationsError","ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT","ɵdepsTracker","ɵgetInjectableDef","resolveForwardRef","ɵNG_COMP_DEF","ɵisComponentDefPendingResolution","ɵresolveComponentResources","ɵRender3NgModuleRef","ApplicationInitStatus","LOCALE_ID","ɵDEFAULT_LOCALE_ID","ɵsetLocaleId","ɵRender3ComponentFactory","ɵcompileComponent","ɵNG_DIR_DEF","ɵcompileDirective","ɵNG_PIPE_DEF","ɵcompilePipe","ɵNG_MOD_DEF","ɵtransitiveScopesFor","ɵpatchComponentDefWithScope","ɵNG_INJ_DEF","ɵcompileNgModuleDefs","ɵclearResolutionOfComponentResourcesQueue","ɵrestoreComponentResolutionQueue","provideZoneChangeDetection","Compiler","ɵDEFER_BLOCK_CONFIG","COMPILER_OPTIONS","Injector","ɵisEnvironmentProviders","ɵNgModuleFactory","ModuleWithComponentFactories","ɵconvertToBitFlags","InjectFlags","ɵsetAllowDuplicateNgModuleIdsForTest","ɵresetCompiledComponents","ɵsetUnknownElementStrictMode","ɵsetUnknownPropertyStrictMode","ɵgetUnknownElementStrictMode","ɵgetUnknownPropertyStrictMode","runInInjectionContext","EnvironmentInjector","ɵChangeDetectionScheduler","ɵflushModuleScopingQueueAsMuchAsPossible","DeferBlockBehavior","DeferBlockState","Subscription","first","ResourceLoader","waitForAsync","fn","_Zone","Zone","Promise","reject","asyncTest","__symbol__","async","DeferBlockFixture","constructor","block","componentFixture","render","state","_this","_asyncToGenerator","hasStateTemplate","stateAsString","getDeferBlockStateNameFromEnum","Error","toLowerCase","Complete","tDetails","lView","tNode","skipTimerScheduling","lContainer","detectChanges","whenStable","getDeferBlocks","deferBlocks","deferBlockFixtures","length","push","resolve","Placeholder","placeholderTmplIndex","Loading","loadingTmplIndex","errorTmplIndex","TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT","THROW_ON_UNKNOWN_ELEMENTS_DEFAULT","THROW_ON_UNKNOWN_PROPERTIES_DEFAULT","DEFER_BLOCK_DEFAULT_BEHAVIOR","Playthrough","TestComponentRenderer","insertRootElement","rootElementId","removeAllRootElements","ComponentFixtureAutoDetect","AllowDetectChangesAndAcknowledgeItCanHideApplicationBugs","ComponentFixtureNoNgZone","ComponentFixture","componentRef","_isDestroyed","_noZoneOptionIsSet","optional","_ngZone","_effectRunner","_appRef","ngZone","changeDetectorRef","elementRef","location","debugElement","nativeElement","componentInstance","instance","checkNoChanges","hostView","_getRenderer","_renderer","undefined","injector","get","whenRenderingDone","renderer","destroy","ScheduledComponentFixture","arguments","disableDetectChangesError","pendingTasks","initialize","attachView","flush","tick","isStable","hasPendingTasks","value","pipe","stable","toPromise","then","autoDetectChanges","autoDetect","PseudoApplicationComponentFixture","_subscriptions","_autoDetect","_isStable","_promise","_resolve","runOutsideAngular","add","onUnstable","subscribe","next","onMicrotaskEmpty","onStable","queueMicrotask","hasPendingMacrotasks","onError","error","run","res","unsubscribe","fakeAsyncTestModule","fakeAsyncTestModuleNotLoadedErrorMessage","resetFakeAsyncZone","fakeAsync","millis","tickOptions","processNewMacroTasksSynchronously","maxTurns","discardPeriodicTasks","flushMicrotasks","_nextReferenceId","MetadataOverrider","_references","Map","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","forEach","prop","set","remove","setMetadata","removeMetadata","addMetadata","metadata","references","removeObjects","Set","removeValue","Array","isArray","_propHashKey","propValue","filter","has","addValue","concat","propName","nextObjectId","objectIds","replacer","key","_serializeReference","JSON","stringify","ref","id","obj","Object","keys","startsWith","proto","getPrototypeOf","protoProp","desc","getOwnPropertyDescriptor","reflection","OverrideResolver","overrides","resolved","addOverride","type","delete","setOverrides","clear","getAnnotation","annotations","i","annotation","isKnownType","overrider","DirectiveResolver","ComponentResolver","PipeResolver","NgModuleResolver","TestingModuleOverride","isTestingModuleOverride","DECLARATION","OVERRIDE_TEMPLATE","assertNoStandaloneComponents","types","resolver","component","standalone","TestBedCompiler","platform","additionalModuleTypes","originalComponentResolutionQueue","declarations","imports","providers","schemas","pendingComponents","pendingDirectives","pendingPipes","seenComponents","seenDirectives","overriddenModules","existingComponentStyles","resolvers","initResolvers","componentToModuleScope","initialNgDefs","defCleanupOps","_injector","compilerProviders","providerOverrides","rootProviderOverrides","providerOverridesByModule","providerOverridesByToken","scopesWithOverriddenProviders","testModuleRef","deferBlockBehavior","DynamicTestModule","testModuleType","setCompilerProviders","configureTestingModule","moduleDef","queueTypeArray","queueTypesFromModulesArray","overrideModule","ngModule","clearScopeCacheFor","module","invalidTypeError","name","recompileNgModule","overrideComponent","verifyNoStandaloneFlagOverrides","overrideDirective","directive","overridePipe","hasOwnProperty","overrideProvider","token","provider","providerDef","useFactory","provide","deps","multi","useValue","injectableDef","providedIn","overridesBucket","existingOverrides","overrideTemplateUsingTestingModule","template","def","hasStyleUrls","styleUrl","styleUrls","overrideStyleUrls","styles","resolvePendingComponentsWithAsyncMetadata","_this2","size","promises","asyncMetadataFn","resolvedDeps","all","flat","compileComponents","_this3","clearComponentResolutionQueue","needsAsyncResources","compileTypesSync","resourceLoader","url","finalize","compileTestModule","applyTransitiveScopes","applyProviderOverrides","patchComponentsWithExistingStyles","parentInjector","runInitializers","localeId","_compileNgModuleSync","moduleType","applyProviderOverridesInScope","_compileNgModuleAsync","_this4","_getModuleResolver","_getComponentFactories","maybeUnwrapFn","ɵmod","reduce","factories","declaration","componentDef","ɵcmp","maybeStoreNgDef","testingModuleDef","affectedModules","collectModulesAffectedByOverrides","storeFieldOfDefOnType","transitiveCompileScopes","moduleToScope","getScopeOfModule","isTestingModule","realType","componentType","moduleScope","getComponentDef","maybeApplyOverrides","field","hasProviderOverrides","patchDefWithProviderOverrides","hasScope","isStandaloneComponent","isNgModule","injectorDef","dependencies","dependency","getOverriddenProviders","importedModule","flatten","isModuleWithProviders","object","fieldName","originalValue","arr","queueType","processedDefs","queueTypesFromModulesArrayRecur","hasNgModuleDef","exports","seenModules","calcAffectedModulesRecur","path","item","currentDefs","currentDef","defField","restoreComponentResolutionQueue","restoreOriginalState","forEachRight","op","defs","descriptor","defineProperty","RootScopeModule","R3TestCompiler","behavior","compilerOptions","opts","create","parent","getSingleProviderOverrides","getProviderToken","getProviderOverrides","flattenProviders","flattenedProviders","overriddenProviders","final","seenOverriddenProviders","unshift","providersResolver","processProvidersFn","ngDef","maybeFn","Function","values","out","identityFn","mapFn","ɵproviders","getProviderField","idx","expectedType","testBed","compileModuleSync","compileModuleAsync","_this5","compileModuleAndAllComponentsSync","ngModuleFactory","componentFactories","compileModuleAndAllComponentsAsync","_this6","clearCache","clearCacheFor","getModuleId","meta","_nextRootElementId","getTestBed","TestBedImpl","INSTANCE","_instanceDeferBlockBehavior","_compiler","_testModuleRef","_activeFixtures","globalCompilationChecked","_","_INSTANCE","initTestEnvironment","options","resetTestEnvironment","configureCompiler","config","overrideTemplate","notFoundValue","flags","THROW_IF_NOT_FOUND","Default","createComponent","resetTestingModule","execute","tokens","context","flushEffects","_environmentTeardownOptions","teardown","_environmentErrorOnUnknownElementsOption","errorOnUnknownElements","_environmentErrorOnUnknownPropertiesOption","errorOnUnknownProperties","checkGlobalCompilationFinished","compiler","_previousErrorOnUnknownElementsOption","_previousErrorOnUnknownPropertiesOption","destroyActiveFixtures","shouldTearDownTestingModule","tearDownTestingModule","_instanceTeardownOptions","_instanceErrorOnUnknownElementsOption","_instanceErrorOnUnknownPropertiesOption","useJit","assertNotInstantiated","shouldThrowErrorOnUnknownElements","shouldThrowErrorOnUnknownProperties","TestBed","UNDEFINED","result","params","map","t","apply","templateUrl","testComponentRenderer","rootElId","componentFactory","initComponent","NULL","hasScheduler","fixture","noNgZone","methodName","methodDescription","errorCount","e","console","stacktrace","shouldRethrowTeardownErrors","instanceOptions","environmentOptions","rethrowErrors","destroyAfterEach","getDeferBlockBehavior","testRenderer","InjectSetupWrapper","_moduleDef","_addModule","self","call","withModule","globalThis","beforeEach","getCleanupHook","afterEach","expectedTeardownValue","__core_private_testing_placeholder__","ɵMetadataOverrider"],"sources":["E:/QAQE/Recent Projects/Project Management System ng/project-management-system/node_modules/@angular/core/fesm2022/testing.mjs"],"sourcesContent":["/**\n * @license Angular v17.2.1\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵDeferBlockState, ɵtriggerResourceLoading, ɵrenderDeferBlockState, ɵCONTAINER_HEADER_OFFSET, ɵgetDeferBlocks, ɵDeferBlockBehavior, InjectionToken, inject as inject$1, ɵNoopNgZone, NgZone, ɵEffectScheduler, ApplicationRef, getDebugNode, RendererFactory2, ɵPendingTasks, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetAsyncClassMetadataFn, ɵgenerateStandaloneInDeclarationsError, ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT, ɵdepsTracker, ɵgetInjectableDef, resolveForwardRef, ɵNG_COMP_DEF, ɵisComponentDefPendingResolution, ɵresolveComponentResources, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, ɵclearResolutionOfComponentResourcesQueue, ɵrestoreComponentResolutionQueue, provideZoneChangeDetection, Compiler, ɵDEFER_BLOCK_CONFIG, COMPILER_OPTIONS, Injector, ɵisEnvironmentProviders, ɵNgModuleFactory, ModuleWithComponentFactories, ɵconvertToBitFlags, InjectFlags, ɵsetAllowDuplicateNgModuleIdsForTest, ɵresetCompiledComponents, ɵsetUnknownElementStrictMode, ɵsetUnknownPropertyStrictMode, ɵgetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, runInInjectionContext, EnvironmentInjector, ɵChangeDetectionScheduler, ɵflushModuleScopingQueueAsMuchAsPossible } from '@angular/core';\nexport { ɵDeferBlockBehavior as DeferBlockBehavior, ɵDeferBlockState as DeferBlockState } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ResourceLoader } from '@angular/compiler';\n\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', waitForAsync(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nfunction waitForAsync(fn) {\n    const _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    if (!_Zone) {\n        return function () {\n            return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js');\n        };\n    }\n    const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n    if (typeof asyncTest === 'function') {\n        return asyncTest(fn);\n    }\n    return function () {\n        return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/testing');\n    };\n}\n/**\n * @deprecated use `waitForAsync()`, (expected removal in v12)\n * @see {@link waitForAsync}\n * @publicApi\n * */\nfunction async(fn) {\n    return waitForAsync(fn);\n}\n\n/**\n * Represents an individual defer block for testing purposes.\n *\n * @publicApi\n * @developerPreview\n */\nclass DeferBlockFixture {\n    /** @nodoc */\n    constructor(block, componentFixture) {\n        this.block = block;\n        this.componentFixture = componentFixture;\n    }\n    /**\n     * Renders the specified state of the defer fixture.\n     * @param state the defer state to render\n     */\n    async render(state) {\n        if (!hasStateTemplate(state, this.block)) {\n            const stateAsString = getDeferBlockStateNameFromEnum(state);\n            throw new Error(`Tried to render this defer block in the \\`${stateAsString}\\` state, ` +\n                `but there was no @${stateAsString.toLowerCase()} block defined in a template.`);\n        }\n        if (state === ɵDeferBlockState.Complete) {\n            await ɵtriggerResourceLoading(this.block.tDetails, this.block.lView, this.block.tNode);\n        }\n        // If the `render` method is used explicitly - skip timer-based scheduling for\n        // `@placeholder` and `@loading` blocks and render them immediately.\n        const skipTimerScheduling = true;\n        ɵrenderDeferBlockState(state, this.block.tNode, this.block.lContainer, skipTimerScheduling);\n        this.componentFixture.detectChanges();\n        return this.componentFixture.whenStable();\n    }\n    /**\n     * Retrieves all nested child defer block fixtures\n     * in a given defer block.\n     */\n    getDeferBlocks() {\n        const deferBlocks = [];\n        // An LContainer that represents a defer block has at most 1 view, which is\n        // located right after an LContainer header. Get a hold of that view and inspect\n        // it for nested defer blocks.\n        const deferBlockFixtures = [];\n        if (this.block.lContainer.length >= ɵCONTAINER_HEADER_OFFSET) {\n            const lView = this.block.lContainer[ɵCONTAINER_HEADER_OFFSET];\n            ɵgetDeferBlocks(lView, deferBlocks);\n            for (const block of deferBlocks) {\n                deferBlockFixtures.push(new DeferBlockFixture(block, this.componentFixture));\n            }\n        }\n        return Promise.resolve(deferBlockFixtures);\n    }\n}\nfunction hasStateTemplate(state, block) {\n    switch (state) {\n        case ɵDeferBlockState.Placeholder:\n            return block.tDetails.placeholderTmplIndex !== null;\n        case ɵDeferBlockState.Loading:\n            return block.tDetails.loadingTmplIndex !== null;\n        case ɵDeferBlockState.Error:\n            return block.tDetails.errorTmplIndex !== null;\n        case ɵDeferBlockState.Complete:\n            return true;\n        default:\n            return false;\n    }\n}\nfunction getDeferBlockStateNameFromEnum(state) {\n    switch (state) {\n        case ɵDeferBlockState.Placeholder:\n            return 'Placeholder';\n        case ɵDeferBlockState.Loading:\n            return 'Loading';\n        case ɵDeferBlockState.Error:\n            return 'Error';\n        default:\n            return 'Main';\n    }\n}\n\n/** Whether test modules should be torn down by default. */\nconst TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT = true;\n/** Whether unknown elements in templates should throw by default. */\nconst THROW_ON_UNKNOWN_ELEMENTS_DEFAULT = false;\n/** Whether unknown properties in templates should throw by default. */\nconst THROW_ON_UNKNOWN_PROPERTIES_DEFAULT = false;\n/** Whether defer blocks should use manual triggering or play through normally. */\nconst DEFER_BLOCK_DEFAULT_BEHAVIOR = ɵDeferBlockBehavior.Playthrough;\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nclass TestComponentRenderer {\n    insertRootElement(rootElementId) { }\n    removeAllRootElements() { }\n}\n/**\n * @publicApi\n */\nconst ComponentFixtureAutoDetect = new InjectionToken('ComponentFixtureAutoDetect');\n/**\n * TODO(atscott): Make public API once we have decided if we want this error and how we want devs to\n * disable it.\n */\nconst AllowDetectChangesAndAcknowledgeItCanHideApplicationBugs = new InjectionToken('AllowDetectChangesAndAcknowledgeItCanHideApplicationBugs');\n/**\n * @publicApi\n */\nconst ComponentFixtureNoNgZone = new InjectionToken('ComponentFixtureNoNgZone');\n\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nclass ComponentFixture {\n    /** @nodoc */\n    constructor(componentRef) {\n        this.componentRef = componentRef;\n        this._isDestroyed = false;\n        /** @internal */\n        this._noZoneOptionIsSet = inject$1(ComponentFixtureNoNgZone, { optional: true });\n        /** @internal */\n        this._ngZone = this._noZoneOptionIsSet ? new ɵNoopNgZone() : inject$1(NgZone);\n        /** @internal */\n        this._effectRunner = inject$1(ɵEffectScheduler);\n        // Inject ApplicationRef to ensure NgZone stableness causes after render hooks to run\n        // This will likely happen as a result of fixture.detectChanges because it calls ngZone.run\n        // This is a crazy way of doing things but hey, it's the world we live in.\n        // The zoneless scheduler should instead do this more imperatively by attaching\n        // the `ComponentRef` to `ApplicationRef` and calling `appRef.tick` as the `detectChanges`\n        // behavior.\n        /** @internal */\n        this._appRef = inject$1(ApplicationRef);\n        // TODO(atscott): Remove this from public API\n        this.ngZone = this._noZoneOptionIsSet ? null : this._ngZone;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = getDebugNode(this.elementRef.nativeElement);\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n    }\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    checkNoChanges() {\n        this.changeDetectorRef.checkNoChanges();\n    }\n    /**\n     * Retrieves all defer block fixtures in the component fixture.\n     *\n     * @developerPreview\n     */\n    getDeferBlocks() {\n        const deferBlocks = [];\n        const lView = this.componentRef.hostView['_lView'];\n        ɵgetDeferBlocks(lView, deferBlocks);\n        const deferBlockFixtures = [];\n        for (const block of deferBlocks) {\n            deferBlockFixtures.push(new DeferBlockFixture(block, this));\n        }\n        return Promise.resolve(deferBlockFixtures);\n    }\n    _getRenderer() {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n        }\n        return this._renderer;\n    }\n    /**\n     * Get a promise that resolves when the ui state is stable following animations.\n     */\n    whenRenderingDone() {\n        const renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    }\n    /**\n     * Trigger component destruction.\n     */\n    destroy() {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            this._isDestroyed = true;\n        }\n    }\n}\n/**\n * ComponentFixture behavior that actually attaches the component to the application to ensure\n * behaviors between fixture and application do not diverge. `detectChanges` is disabled by default\n * (instead, tests should wait for the scheduler to detect changes), `whenStable` is directly the\n * `ApplicationRef.isStable`, and `autoDetectChanges` cannot be disabled.\n */\nclass ScheduledComponentFixture extends ComponentFixture {\n    constructor() {\n        super(...arguments);\n        this.disableDetectChangesError = inject$1(AllowDetectChangesAndAcknowledgeItCanHideApplicationBugs, { optional: true }) ?? false;\n        this.pendingTasks = inject$1(ɵPendingTasks);\n    }\n    initialize() {\n        this._appRef.attachView(this.componentRef.hostView);\n    }\n    detectChanges(checkNoChanges = true) {\n        if (!this.disableDetectChangesError) {\n            throw new Error('Do not use `detectChanges` directly when using zoneless change detection.' +\n                ' Instead, wait for the next render or `fixture.whenStable`.');\n        }\n        else if (!checkNoChanges) {\n            throw new Error('Cannot disable `checkNoChanges` in this configuration. ' +\n                'Use `fixture.componentRef.hostView.changeDetectorRef.detectChanges()` instead.');\n        }\n        this._effectRunner.flush();\n        this._appRef.tick();\n        this._effectRunner.flush();\n    }\n    isStable() {\n        return !this.pendingTasks.hasPendingTasks.value;\n    }\n    whenStable() {\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        return this._appRef.isStable.pipe(first(stable => stable)).toPromise().then(() => true);\n    }\n    autoDetectChanges(autoDetect) {\n        throw new Error('Cannot call autoDetectChanges when using change detection scheduling.');\n    }\n}\n/**\n * ComponentFixture behavior that attempts to act as a \"mini application\".\n */\nclass PseudoApplicationComponentFixture extends ComponentFixture {\n    constructor() {\n        super(...arguments);\n        this._subscriptions = new Subscription();\n        this._autoDetect = inject$1(ComponentFixtureAutoDetect, { optional: true }) ?? false;\n        this._isStable = true;\n        this._promise = null;\n        this._resolve = null;\n    }\n    initialize() {\n        // Create subscriptions outside the NgZone so that the callbacks run outside\n        // of NgZone.\n        this._ngZone.runOutsideAngular(() => {\n            this._subscriptions.add(this._ngZone.onUnstable.subscribe({\n                next: () => {\n                    this._isStable = false;\n                }\n            }));\n            this._subscriptions.add(this._ngZone.onMicrotaskEmpty.subscribe({\n                next: () => {\n                    if (this._autoDetect) {\n                        // Do a change detection run with checkNoChanges set to true to check\n                        // there are no changes on the second run.\n                        this.detectChanges(true);\n                    }\n                }\n            }));\n            this._subscriptions.add(this._ngZone.onStable.subscribe({\n                next: () => {\n                    this._isStable = true;\n                    // Check whether there is a pending whenStable() completer to resolve.\n                    if (this._promise !== null) {\n                        // If so check whether there are no pending macrotasks before resolving.\n                        // Do this check in the next tick so that ngZone gets a chance to update the state of\n                        // pending macrotasks.\n                        queueMicrotask(() => {\n                            if (!this._ngZone.hasPendingMacrotasks) {\n                                if (this._promise !== null) {\n                                    this._resolve(true);\n                                    this._resolve = null;\n                                    this._promise = null;\n                                }\n                            }\n                        });\n                    }\n                }\n            }));\n            this._subscriptions.add(this._ngZone.onError.subscribe({\n                next: (error) => {\n                    throw error;\n                }\n            }));\n        });\n    }\n    detectChanges(checkNoChanges = true) {\n        this._effectRunner.flush();\n        // Run the change detection inside the NgZone so that any async tasks as part of the change\n        // detection are captured by the zone and can be waited for in isStable.\n        this._ngZone.run(() => {\n            this.changeDetectorRef.detectChanges();\n            if (checkNoChanges) {\n                this.checkNoChanges();\n            }\n        });\n        // Run any effects that were created/dirtied during change detection. Such effects might become\n        // dirty in response to input signals changing.\n        this._effectRunner.flush();\n    }\n    isStable() {\n        return this._isStable && !this._ngZone.hasPendingMacrotasks;\n    }\n    whenStable() {\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(res => {\n                this._resolve = res;\n            });\n            return this._promise;\n        }\n    }\n    autoDetectChanges(autoDetect = true) {\n        if (this._noZoneOptionIsSet) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set.');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    }\n    destroy() {\n        this._subscriptions.unsubscribe();\n        super.destroy();\n    }\n}\n\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\nconst fakeAsyncTestModuleNotLoadedErrorMessage = `zone-testing.js is needed for the fakeAsync() test helper but could not be found.\n        Please make sure that your environment includes zone.js/testing`;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nfunction resetFakeAsyncZone() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.resetFakeAsyncZone();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Wraps a function to be executed in the `fakeAsync` zone:\n * - Microtasks are manually executed by calling `flushMicrotasks()`.\n * - Timers are synchronous; `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception is thrown.\n *\n * Can be used to wrap `inject()` calls.\n *\n * @param fn The function that you want to wrap in the `fakeAsync` zone.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n *\n * @returns The function wrapped to be executed in the `fakeAsync` zone.\n * Any arguments passed when calling this returned function will be passed through to the `fn`\n * function in the parameters when it is called.\n *\n * @publicApi\n */\nfunction fakeAsync(fn) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.fakeAsync(fn);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @param millis The number of milliseconds to advance the virtual timer.\n * @param tickOptions The options to pass to the `tick()` function.\n *\n * @usageNotes\n *\n * The `tick()` option is a flag called `processNewMacroTasksSynchronously`,\n * which determines whether or not to invoke new macroTasks.\n *\n * If you provide a `tickOptions` object, but do not specify a\n * `processNewMacroTasksSynchronously` property (`tick(100, {})`),\n * then `processNewMacroTasksSynchronously` defaults to true.\n *\n * If you omit the `tickOptions` parameter (`tick(100))`), then\n * `tickOptions` defaults to `{processNewMacroTasksSynchronously: true}`.\n *\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * The following example includes a nested timeout (new macroTask), and\n * the `tickOptions` parameter is allowed to default. In this case,\n * `processNewMacroTasksSynchronously` defaults to true, and the nested\n * function is executed on each tick.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick();\n *   expect(nestedTimeoutInvoked).toBe(true);\n * }));\n * ```\n *\n * In the following case, `processNewMacroTasksSynchronously` is explicitly\n * set to false, so the nested timeout function is not invoked.\n *\n * ```\n * it ('test with nested setTimeout', fakeAsync(() => {\n *   let nestedTimeoutInvoked = false;\n *   function funcWithNestedTimeout() {\n *     setTimeout(() => {\n *       nestedTimeoutInvoked = true;\n *     });\n *   };\n *   setTimeout(funcWithNestedTimeout);\n *   tick(0, {processNewMacroTasksSynchronously: false});\n *   expect(nestedTimeoutInvoked).toBe(false);\n * }));\n * ```\n *\n *\n * @publicApi\n */\nfunction tick(millis = 0, tickOptions = {\n    processNewMacroTasksSynchronously: true\n}) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.tick(millis, tickOptions);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flushes any pending microtasks and simulates the asynchronous passage of time for the timers in\n * the `fakeAsync` zone by\n * draining the macrotask queue until it is empty.\n *\n * @param maxTurns The maximum number of times the scheduler attempts to clear its queue before\n *     throwing an error.\n * @returns The simulated time elapsed, in milliseconds.\n *\n * @publicApi\n */\nfunction flush(maxTurns) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flush(maxTurns);\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nfunction discardPeriodicTasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.discardPeriodicTasks();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nfunction flushMicrotasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flushMicrotasks();\n    }\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n\nlet _nextReferenceId = 0;\nclass MetadataOverrider {\n    constructor() {\n        this._references = new Map();\n    }\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     */\n    overrideMetadata(metadataClass, oldMetadata, override) {\n        const props = {};\n        if (oldMetadata) {\n            _valueProps(oldMetadata).forEach((prop) => props[prop] = oldMetadata[prop]);\n        }\n        if (override.set) {\n            if (override.remove || override.add) {\n                throw new Error(`Cannot set and add/remove ${ɵstringify(metadataClass)} at the same time!`);\n            }\n            setMetadata(props, override.set);\n        }\n        if (override.remove) {\n            removeMetadata(props, override.remove, this._references);\n        }\n        if (override.add) {\n            addMetadata(props, override.add);\n        }\n        return new metadataClass(props);\n    }\n}\nfunction removeMetadata(metadata, remove, references) {\n    const removeObjects = new Set();\n    for (const prop in remove) {\n        const removeValue = remove[prop];\n        if (Array.isArray(removeValue)) {\n            removeValue.forEach((value) => {\n                removeObjects.add(_propHashKey(prop, value, references));\n            });\n        }\n        else {\n            removeObjects.add(_propHashKey(prop, removeValue, references));\n        }\n    }\n    for (const prop in metadata) {\n        const propValue = metadata[prop];\n        if (Array.isArray(propValue)) {\n            metadata[prop] = propValue.filter((value) => !removeObjects.has(_propHashKey(prop, value, references)));\n        }\n        else {\n            if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                metadata[prop] = undefined;\n            }\n        }\n    }\n}\nfunction addMetadata(metadata, add) {\n    for (const prop in add) {\n        const addValue = add[prop];\n        const propValue = metadata[prop];\n        if (propValue != null && Array.isArray(propValue)) {\n            metadata[prop] = propValue.concat(addValue);\n        }\n        else {\n            metadata[prop] = addValue;\n        }\n    }\n}\nfunction setMetadata(metadata, set) {\n    for (const prop in set) {\n        metadata[prop] = set[prop];\n    }\n}\nfunction _propHashKey(propName, propValue, references) {\n    let nextObjectId = 0;\n    const objectIds = new Map();\n    const replacer = (key, value) => {\n        if (value !== null && typeof value === 'object') {\n            if (objectIds.has(value)) {\n                return objectIds.get(value);\n            }\n            // Record an id for this object such that any later references use the object's id instead\n            // of the object itself, in order to break cyclic pointers in objects.\n            objectIds.set(value, `ɵobj#${nextObjectId++}`);\n            // The first time an object is seen the object itself is serialized.\n            return value;\n        }\n        else if (typeof value === 'function') {\n            value = _serializeReference(value, references);\n        }\n        return value;\n    };\n    return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\nfunction _serializeReference(ref, references) {\n    let id = references.get(ref);\n    if (!id) {\n        id = `${ɵstringify(ref)}${_nextReferenceId++}`;\n        references.set(ref, id);\n    }\n    return id;\n}\nfunction _valueProps(obj) {\n    const props = [];\n    // regular public props\n    Object.keys(obj).forEach((prop) => {\n        if (!prop.startsWith('_')) {\n            props.push(prop);\n        }\n    });\n    // getters\n    let proto = obj;\n    while (proto = Object.getPrototypeOf(proto)) {\n        Object.keys(proto).forEach((protoProp) => {\n            const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n            if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                props.push(protoProp);\n            }\n        });\n    }\n    return props;\n}\n\nconst reflection = new ɵReflectionCapabilities();\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nclass OverrideResolver {\n    constructor() {\n        this.overrides = new Map();\n        this.resolved = new Map();\n    }\n    addOverride(type, override) {\n        const overrides = this.overrides.get(type) || [];\n        overrides.push(override);\n        this.overrides.set(type, overrides);\n        this.resolved.delete(type);\n    }\n    setOverrides(overrides) {\n        this.overrides.clear();\n        overrides.forEach(([type, override]) => {\n            this.addOverride(type, override);\n        });\n    }\n    getAnnotation(type) {\n        const annotations = reflection.annotations(type);\n        // Try to find the nearest known Type annotation and make sure that this annotation is an\n        // instance of the type we are looking for, so we can use it for resolution. Note: there might\n        // be multiple known annotations found due to the fact that Components can extend Directives (so\n        // both Directive and Component annotations would be present), so we always check if the known\n        // annotation has the right type.\n        for (let i = annotations.length - 1; i >= 0; i--) {\n            const annotation = annotations[i];\n            const isKnownType = annotation instanceof Directive || annotation instanceof Component ||\n                annotation instanceof Pipe || annotation instanceof NgModule;\n            if (isKnownType) {\n                return annotation instanceof this.type ? annotation : null;\n            }\n        }\n        return null;\n    }\n    resolve(type) {\n        let resolved = this.resolved.get(type) || null;\n        if (!resolved) {\n            resolved = this.getAnnotation(type);\n            if (resolved) {\n                const overrides = this.overrides.get(type);\n                if (overrides) {\n                    const overrider = new MetadataOverrider();\n                    overrides.forEach(override => {\n                        resolved = overrider.overrideMetadata(this.type, resolved, override);\n                    });\n                }\n            }\n            this.resolved.set(type, resolved);\n        }\n        return resolved;\n    }\n}\nclass DirectiveResolver extends OverrideResolver {\n    get type() {\n        return Directive;\n    }\n}\nclass ComponentResolver extends OverrideResolver {\n    get type() {\n        return Component;\n    }\n}\nclass PipeResolver extends OverrideResolver {\n    get type() {\n        return Pipe;\n    }\n}\nclass NgModuleResolver extends OverrideResolver {\n    get type() {\n        return NgModule;\n    }\n}\n\nvar TestingModuleOverride;\n(function (TestingModuleOverride) {\n    TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n    TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\nfunction isTestingModuleOverride(value) {\n    return value === TestingModuleOverride.DECLARATION ||\n        value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\nfunction assertNoStandaloneComponents(types, resolver, location) {\n    types.forEach(type => {\n        if (!ɵgetAsyncClassMetadataFn(type)) {\n            const component = resolver.resolve(type);\n            if (component && component.standalone) {\n                throw new Error(ɵgenerateStandaloneInDeclarationsError(type, location));\n            }\n        }\n    });\n}\nclass TestBedCompiler {\n    constructor(platform, additionalModuleTypes) {\n        this.platform = platform;\n        this.additionalModuleTypes = additionalModuleTypes;\n        this.originalComponentResolutionQueue = null;\n        // Testing module configuration\n        this.declarations = [];\n        this.imports = [];\n        this.providers = [];\n        this.schemas = [];\n        // Queues of components/directives/pipes that should be recompiled.\n        this.pendingComponents = new Set();\n        this.pendingDirectives = new Set();\n        this.pendingPipes = new Set();\n        // Keep track of all components and directives, so we can patch Providers onto defs later.\n        this.seenComponents = new Set();\n        this.seenDirectives = new Set();\n        // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n        this.overriddenModules = new Set();\n        // Store resolved styles for Components that have template overrides present and `styleUrls`\n        // defined at the same time.\n        this.existingComponentStyles = new Map();\n        this.resolvers = initResolvers();\n        // Map of component type to an NgModule that declares it.\n        //\n        // There are a couple special cases:\n        // - for standalone components, the module scope value is `null`\n        // - when a component is declared in `TestBed.configureTestingModule()` call or\n        //   a component's template is overridden via `TestBed.overrideTemplateUsingTestingModule()`.\n        //   we use a special value from the `TestingModuleOverride` enum.\n        this.componentToModuleScope = new Map();\n        // Map that keeps initial version of component/directive/pipe defs in case\n        // we compile a Type again, thus overriding respective static fields. This is\n        // required to make sure we restore defs to their initial states between test runs.\n        // Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of an\n        // NgModule), store all of them in a map.\n        this.initialNgDefs = new Map();\n        // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n        // defs in case TestBed makes changes to the originals.\n        this.defCleanupOps = [];\n        this._injector = null;\n        this.compilerProviders = null;\n        this.providerOverrides = [];\n        this.rootProviderOverrides = [];\n        // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n        // module's provider list.\n        this.providerOverridesByModule = new Map();\n        this.providerOverridesByToken = new Map();\n        this.scopesWithOverriddenProviders = new Set();\n        this.testModuleRef = null;\n        this.deferBlockBehavior = DEFER_BLOCK_DEFAULT_BEHAVIOR;\n        class DynamicTestModule {\n        }\n        this.testModuleType = DynamicTestModule;\n    }\n    setCompilerProviders(providers) {\n        this.compilerProviders = providers;\n        this._injector = null;\n    }\n    configureTestingModule(moduleDef) {\n        // Enqueue any compilation tasks for the directly declared component.\n        if (moduleDef.declarations !== undefined) {\n            // Verify that there are no standalone components\n            assertNoStandaloneComponents(moduleDef.declarations, this.resolvers.component, '\"TestBed.configureTestingModule\" call');\n            this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n            this.declarations.push(...moduleDef.declarations);\n        }\n        // Enqueue any compilation tasks for imported modules.\n        if (moduleDef.imports !== undefined) {\n            this.queueTypesFromModulesArray(moduleDef.imports);\n            this.imports.push(...moduleDef.imports);\n        }\n        if (moduleDef.providers !== undefined) {\n            this.providers.push(...moduleDef.providers);\n        }\n        if (moduleDef.schemas !== undefined) {\n            this.schemas.push(...moduleDef.schemas);\n        }\n        this.deferBlockBehavior = moduleDef.deferBlockBehavior ?? DEFER_BLOCK_DEFAULT_BEHAVIOR;\n    }\n    overrideModule(ngModule, override) {\n        if (ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n            ɵdepsTracker.clearScopeCacheFor(ngModule);\n        }\n        this.overriddenModules.add(ngModule);\n        // Compile the module right away.\n        this.resolvers.module.addOverride(ngModule, override);\n        const metadata = this.resolvers.module.resolve(ngModule);\n        if (metadata === null) {\n            throw invalidTypeError(ngModule.name, 'NgModule');\n        }\n        this.recompileNgModule(ngModule, metadata);\n        // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n        // new declarations or imported modules. Ingest any possible new types and add them to the\n        // current queue.\n        this.queueTypesFromModulesArray([ngModule]);\n    }\n    overrideComponent(component, override) {\n        this.verifyNoStandaloneFlagOverrides(component, override);\n        this.resolvers.component.addOverride(component, override);\n        this.pendingComponents.add(component);\n    }\n    overrideDirective(directive, override) {\n        this.verifyNoStandaloneFlagOverrides(directive, override);\n        this.resolvers.directive.addOverride(directive, override);\n        this.pendingDirectives.add(directive);\n    }\n    overridePipe(pipe, override) {\n        this.verifyNoStandaloneFlagOverrides(pipe, override);\n        this.resolvers.pipe.addOverride(pipe, override);\n        this.pendingPipes.add(pipe);\n    }\n    verifyNoStandaloneFlagOverrides(type, override) {\n        if (override.add?.hasOwnProperty('standalone') || override.set?.hasOwnProperty('standalone') ||\n            override.remove?.hasOwnProperty('standalone')) {\n            throw new Error(`An override for the ${type.name} class has the \\`standalone\\` flag. ` +\n                `Changing the \\`standalone\\` flag via TestBed overrides is not supported.`);\n        }\n    }\n    overrideProvider(token, provider) {\n        let providerDef;\n        if (provider.useFactory !== undefined) {\n            providerDef = {\n                provide: token,\n                useFactory: provider.useFactory,\n                deps: provider.deps || [],\n                multi: provider.multi\n            };\n        }\n        else if (provider.useValue !== undefined) {\n            providerDef = { provide: token, useValue: provider.useValue, multi: provider.multi };\n        }\n        else {\n            providerDef = { provide: token };\n        }\n        const injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n        const providedIn = injectableDef === null ? null : resolveForwardRef(injectableDef.providedIn);\n        const overridesBucket = providedIn === 'root' ? this.rootProviderOverrides : this.providerOverrides;\n        overridesBucket.push(providerDef);\n        // Keep overrides grouped by token as well for fast lookups using token\n        this.providerOverridesByToken.set(token, providerDef);\n        if (injectableDef !== null && providedIn !== null && typeof providedIn !== 'string') {\n            const existingOverrides = this.providerOverridesByModule.get(providedIn);\n            if (existingOverrides !== undefined) {\n                existingOverrides.push(providerDef);\n            }\n            else {\n                this.providerOverridesByModule.set(providedIn, [providerDef]);\n            }\n        }\n    }\n    overrideTemplateUsingTestingModule(type, template) {\n        const def = type[ɵNG_COMP_DEF];\n        const hasStyleUrls = () => {\n            const metadata = this.resolvers.component.resolve(type);\n            return !!metadata.styleUrl || !!metadata.styleUrls?.length;\n        };\n        const overrideStyleUrls = !!def && !ɵisComponentDefPendingResolution(type) && hasStyleUrls();\n        // In Ivy, compiling a component does not require knowing the module providing the\n        // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n        // overrideComponent. Important: overriding template requires full Component re-compilation,\n        // which may fail in case styleUrls are also present (thus Component is considered as required\n        // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n        // preserve current styles available on Component def and restore styles back once compilation\n        // is complete.\n        const override = overrideStyleUrls ? { template, styles: [], styleUrls: [], styleUrl: undefined } : { template };\n        this.overrideComponent(type, { set: override });\n        if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n            this.existingComponentStyles.set(type, def.styles);\n        }\n        // Set the component's scope to be the testing module.\n        this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n    }\n    async resolvePendingComponentsWithAsyncMetadata() {\n        if (this.pendingComponents.size === 0)\n            return;\n        const promises = [];\n        for (const component of this.pendingComponents) {\n            const asyncMetadataFn = ɵgetAsyncClassMetadataFn(component);\n            if (asyncMetadataFn) {\n                promises.push(asyncMetadataFn());\n            }\n        }\n        const resolvedDeps = await Promise.all(promises);\n        this.queueTypesFromModulesArray(resolvedDeps.flat(2));\n    }\n    async compileComponents() {\n        this.clearComponentResolutionQueue();\n        // Wait for all async metadata for components that were\n        // overridden, we need resolved metadata to perform an override\n        // and re-compile a component.\n        await this.resolvePendingComponentsWithAsyncMetadata();\n        // Verify that there were no standalone components present in the `declarations` field\n        // during the `TestBed.configureTestingModule` call. We perform this check here in addition\n        // to the logic in the `configureTestingModule` function, since at this point we have\n        // all async metadata resolved.\n        assertNoStandaloneComponents(this.declarations, this.resolvers.component, '\"TestBed.configureTestingModule\" call');\n        // Run compilers for all queued types.\n        let needsAsyncResources = this.compileTypesSync();\n        // compileComponents() should not be async unless it needs to be.\n        if (needsAsyncResources) {\n            let resourceLoader;\n            let resolver = (url) => {\n                if (!resourceLoader) {\n                    resourceLoader = this.injector.get(ResourceLoader);\n                }\n                return Promise.resolve(resourceLoader.get(url));\n            };\n            await ɵresolveComponentResources(resolver);\n        }\n    }\n    finalize() {\n        // One last compile\n        this.compileTypesSync();\n        // Create the testing module itself.\n        this.compileTestModule();\n        this.applyTransitiveScopes();\n        this.applyProviderOverrides();\n        // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n        // Components have `styleUrls` fields defined and template override was requested.\n        this.patchComponentsWithExistingStyles();\n        // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n        // every component.\n        this.componentToModuleScope.clear();\n        const parentInjector = this.platform.injector;\n        this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector, []);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core.\n        // Cast it to any before accessing it.\n        this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers();\n        // Set locale ID after running app initializers, since locale information might be updated while\n        // running initializers. This is also consistent with the execution order while bootstrapping an\n        // app (see `packages/core/src/application_ref.ts` file).\n        const localeId = this.testModuleRef.injector.get(LOCALE_ID, ɵDEFAULT_LOCALE_ID);\n        ɵsetLocaleId(localeId);\n        return this.testModuleRef;\n    }\n    /**\n     * @internal\n     */\n    _compileNgModuleSync(moduleType) {\n        this.queueTypesFromModulesArray([moduleType]);\n        this.compileTypesSync();\n        this.applyProviderOverrides();\n        this.applyProviderOverridesInScope(moduleType);\n        this.applyTransitiveScopes();\n    }\n    /**\n     * @internal\n     */\n    async _compileNgModuleAsync(moduleType) {\n        this.queueTypesFromModulesArray([moduleType]);\n        await this.compileComponents();\n        this.applyProviderOverrides();\n        this.applyProviderOverridesInScope(moduleType);\n        this.applyTransitiveScopes();\n    }\n    /**\n     * @internal\n     */\n    _getModuleResolver() {\n        return this.resolvers.module;\n    }\n    /**\n     * @internal\n     */\n    _getComponentFactories(moduleType) {\n        return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\n            const componentDef = declaration.ɵcmp;\n            componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, this.testModuleRef));\n            return factories;\n        }, []);\n    }\n    compileTypesSync() {\n        // Compile all queued components, directives, pipes.\n        let needsAsyncResources = false;\n        this.pendingComponents.forEach(declaration => {\n            if (ɵgetAsyncClassMetadataFn(declaration)) {\n                throw new Error(`Component '${declaration.name}' has unresolved metadata. ` +\n                    `Please call \\`await TestBed.compileComponents()\\` before running this test.`);\n            }\n            needsAsyncResources = needsAsyncResources || ɵisComponentDefPendingResolution(declaration);\n            const metadata = this.resolvers.component.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Component');\n            }\n            this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n            if (ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n                ɵdepsTracker.clearScopeCacheFor(declaration);\n            }\n            ɵcompileComponent(declaration, metadata);\n        });\n        this.pendingComponents.clear();\n        this.pendingDirectives.forEach(declaration => {\n            const metadata = this.resolvers.directive.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Directive');\n            }\n            this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n            ɵcompileDirective(declaration, metadata);\n        });\n        this.pendingDirectives.clear();\n        this.pendingPipes.forEach(declaration => {\n            const metadata = this.resolvers.pipe.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Pipe');\n            }\n            this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n            ɵcompilePipe(declaration, metadata);\n        });\n        this.pendingPipes.clear();\n        return needsAsyncResources;\n    }\n    applyTransitiveScopes() {\n        if (this.overriddenModules.size > 0) {\n            // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n            // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n            // collect all affected modules and reset scopes to force their re-calculation.\n            const testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\n            const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n            if (affectedModules.size > 0) {\n                affectedModules.forEach(moduleType => {\n                    if (!ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n                        this.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\n                        moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\n                    }\n                    else {\n                        ɵdepsTracker.clearScopeCacheFor(moduleType);\n                    }\n                });\n            }\n        }\n        const moduleToScope = new Map();\n        const getScopeOfModule = (moduleType) => {\n            if (!moduleToScope.has(moduleType)) {\n                const isTestingModule = isTestingModuleOverride(moduleType);\n                const realType = isTestingModule ? this.testModuleType : moduleType;\n                moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\n            }\n            return moduleToScope.get(moduleType);\n        };\n        this.componentToModuleScope.forEach((moduleType, componentType) => {\n            if (moduleType !== null) {\n                const moduleScope = getScopeOfModule(moduleType);\n                this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n                this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs');\n                ɵpatchComponentDefWithScope(getComponentDef(componentType), moduleScope);\n            }\n            // `tView` that is stored on component def contains information about directives and pipes\n            // that are in the scope of this component. Patching component scope will cause `tView` to be\n            // changed. Store original `tView` before patching scope, so the `tView` (including scope\n            // information) is restored back to its previous/original state before running next test.\n            // Resetting `tView` is also needed for cases when we apply provider overrides and those\n            // providers are defined on component's level, in which case they may end up included into\n            // `tView.blueprint`.\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\n        });\n        this.componentToModuleScope.clear();\n    }\n    applyProviderOverrides() {\n        const maybeApplyOverrides = (field) => (type) => {\n            const resolver = field === ɵNG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\n            const metadata = resolver.resolve(type);\n            if (this.hasProviderOverrides(metadata.providers)) {\n                this.patchDefWithProviderOverrides(type, field);\n            }\n        };\n        this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n        this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n        this.seenComponents.clear();\n        this.seenDirectives.clear();\n    }\n    /**\n     * Applies provider overrides to a given type (either an NgModule or a standalone component)\n     * and all imported NgModules and standalone components recursively.\n     */\n    applyProviderOverridesInScope(type) {\n        const hasScope = isStandaloneComponent(type) || isNgModule(type);\n        // The function can be re-entered recursively while inspecting dependencies\n        // of an NgModule or a standalone component. Exit early if we come across a\n        // type that can not have a scope (directive or pipe) or the type is already\n        // processed earlier.\n        if (!hasScope || this.scopesWithOverriddenProviders.has(type)) {\n            return;\n        }\n        this.scopesWithOverriddenProviders.add(type);\n        // NOTE: the line below triggers JIT compilation of the module injector,\n        // which also invokes verification of the NgModule semantics, which produces\n        // detailed error messages. The fact that the code relies on this line being\n        // present here is suspicious and should be refactored in a way that the line\n        // below can be moved (for ex. after an early exit check below).\n        const injectorDef = type[ɵNG_INJ_DEF];\n        // No provider overrides, exit early.\n        if (this.providerOverridesByToken.size === 0)\n            return;\n        if (isStandaloneComponent(type)) {\n            // Visit all component dependencies and override providers there.\n            const def = getComponentDef(type);\n            const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n            for (const dependency of dependencies) {\n                this.applyProviderOverridesInScope(dependency);\n            }\n        }\n        else {\n            const providers = [\n                ...injectorDef.providers,\n                ...(this.providerOverridesByModule.get(type) || [])\n            ];\n            if (this.hasProviderOverrides(providers)) {\n                this.maybeStoreNgDef(ɵNG_INJ_DEF, type);\n                this.storeFieldOfDefOnType(type, ɵNG_INJ_DEF, 'providers');\n                injectorDef.providers = this.getOverriddenProviders(providers);\n            }\n            // Apply provider overrides to imported modules recursively\n            const moduleDef = type[ɵNG_MOD_DEF];\n            const imports = maybeUnwrapFn(moduleDef.imports);\n            for (const importedModule of imports) {\n                this.applyProviderOverridesInScope(importedModule);\n            }\n            // Also override the providers on any ModuleWithProviders imports since those don't appear in\n            // the moduleDef.\n            for (const importedModule of flatten(injectorDef.imports)) {\n                if (isModuleWithProviders(importedModule)) {\n                    this.defCleanupOps.push({\n                        object: importedModule,\n                        fieldName: 'providers',\n                        originalValue: importedModule.providers\n                    });\n                    importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n                }\n            }\n        }\n    }\n    patchComponentsWithExistingStyles() {\n        this.existingComponentStyles.forEach((styles, type) => type[ɵNG_COMP_DEF].styles = styles);\n        this.existingComponentStyles.clear();\n    }\n    queueTypeArray(arr, moduleType) {\n        for (const value of arr) {\n            if (Array.isArray(value)) {\n                this.queueTypeArray(value, moduleType);\n            }\n            else {\n                this.queueType(value, moduleType);\n            }\n        }\n    }\n    recompileNgModule(ngModule, metadata) {\n        // Cache the initial ngModuleDef as it will be overwritten.\n        this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n        ɵcompileNgModuleDefs(ngModule, metadata);\n    }\n    queueType(type, moduleType) {\n        const component = this.resolvers.component.resolve(type);\n        if (component) {\n            // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n            // missing. That might happen in case a class without any Angular decorators extends another\n            // class where Component/Directive/Pipe decorator is defined.\n            if (ɵisComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n                this.pendingComponents.add(type);\n            }\n            this.seenComponents.add(type);\n            // Keep track of the module which declares this component, so later the component's scope\n            // can be set correctly. If the component has already been recorded here, then one of several\n            // cases is true:\n            // * the module containing the component was imported multiple times (common).\n            // * the component is declared in multiple modules (which is an error).\n            // * the component was in 'declarations' of the testing module, and also in an imported module\n            //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n            // * overrideTemplateUsingTestingModule was called for the component in which case the module\n            //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n            //\n            // If the component was previously in the testing module's 'declarations' (meaning the\n            // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n            // real module, which was imported. This pattern is understood to mean that the component\n            // should use its original scope, but that the testing module should also contain the\n            // component in its scope.\n            if ((!this.componentToModuleScope.has(type) ||\n                this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION)) {\n                this.componentToModuleScope.set(type, moduleType);\n            }\n            return;\n        }\n        const directive = this.resolvers.directive.resolve(type);\n        if (directive) {\n            if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n                this.pendingDirectives.add(type);\n            }\n            this.seenDirectives.add(type);\n            return;\n        }\n        const pipe = this.resolvers.pipe.resolve(type);\n        if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n            this.pendingPipes.add(type);\n            return;\n        }\n    }\n    queueTypesFromModulesArray(arr) {\n        // Because we may encounter the same NgModule or a standalone Component while processing\n        // the dependencies of an NgModule or a standalone Component, we cache them in this set so we\n        // can skip ones that have already been seen encountered. In some test setups, this caching\n        // resulted in 10X runtime improvement.\n        const processedDefs = new Set();\n        const queueTypesFromModulesArrayRecur = (arr) => {\n            for (const value of arr) {\n                if (Array.isArray(value)) {\n                    queueTypesFromModulesArrayRecur(value);\n                }\n                else if (hasNgModuleDef(value)) {\n                    const def = value.ɵmod;\n                    if (processedDefs.has(def)) {\n                        continue;\n                    }\n                    processedDefs.add(def);\n                    // Look through declarations, imports, and exports, and queue\n                    // everything found there.\n                    this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n                }\n                else if (isModuleWithProviders(value)) {\n                    queueTypesFromModulesArrayRecur([value.ngModule]);\n                }\n                else if (isStandaloneComponent(value)) {\n                    this.queueType(value, null);\n                    const def = getComponentDef(value);\n                    if (processedDefs.has(def)) {\n                        continue;\n                    }\n                    processedDefs.add(def);\n                    const dependencies = maybeUnwrapFn(def.dependencies ?? []);\n                    dependencies.forEach((dependency) => {\n                        // Note: in AOT, the `dependencies` might also contain regular\n                        // (NgModule-based) Component, Directive and Pipes, so we handle\n                        // them separately and proceed with recursive process for standalone\n                        // Components and NgModules only.\n                        if (isStandaloneComponent(dependency) || hasNgModuleDef(dependency)) {\n                            queueTypesFromModulesArrayRecur([dependency]);\n                        }\n                        else {\n                            this.queueType(dependency, null);\n                        }\n                    });\n                }\n            }\n        };\n        queueTypesFromModulesArrayRecur(arr);\n    }\n    // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n    // that import (even transitively) an overridden one. For all affected modules we need to\n    // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n    // of this function is to collect all affected modules in a set for further processing. Example:\n    // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n    // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n    // invalidated with the override.\n    collectModulesAffectedByOverrides(arr) {\n        const seenModules = new Set();\n        const affectedModules = new Set();\n        const calcAffectedModulesRecur = (arr, path) => {\n            for (const value of arr) {\n                if (Array.isArray(value)) {\n                    // If the value is an array, just flatten it (by invoking this function recursively),\n                    // keeping \"path\" the same.\n                    calcAffectedModulesRecur(value, path);\n                }\n                else if (hasNgModuleDef(value)) {\n                    if (seenModules.has(value)) {\n                        // If we've seen this module before and it's included into \"affected modules\" list, mark\n                        // the whole path that leads to that module as affected, but do not descend into its\n                        // imports, since we already examined them before.\n                        if (affectedModules.has(value)) {\n                            path.forEach(item => affectedModules.add(item));\n                        }\n                        continue;\n                    }\n                    seenModules.add(value);\n                    if (this.overriddenModules.has(value)) {\n                        path.forEach(item => affectedModules.add(item));\n                    }\n                    // Examine module imports recursively to look for overridden modules.\n                    const moduleDef = value[ɵNG_MOD_DEF];\n                    calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n                }\n            }\n        };\n        calcAffectedModulesRecur(arr, []);\n        return affectedModules;\n    }\n    /**\n     * Preserve an original def (such as ɵmod, ɵinj, etc) before applying an override.\n     * Note: one class may have multiple defs (for example: ɵmod and ɵinj in case of\n     * an NgModule). If there is a def in a set already, don't override it, since\n     * an original one should be restored at the end of a test.\n     */\n    maybeStoreNgDef(prop, type) {\n        if (!this.initialNgDefs.has(type)) {\n            this.initialNgDefs.set(type, new Map());\n        }\n        const currentDefs = this.initialNgDefs.get(type);\n        if (!currentDefs.has(prop)) {\n            const currentDef = Object.getOwnPropertyDescriptor(type, prop);\n            currentDefs.set(prop, currentDef);\n        }\n    }\n    storeFieldOfDefOnType(type, defField, fieldName) {\n        const def = type[defField];\n        const originalValue = def[fieldName];\n        this.defCleanupOps.push({ object: def, fieldName, originalValue });\n    }\n    /**\n     * Clears current components resolution queue, but stores the state of the queue, so we can\n     * restore it later. Clearing the queue is required before we try to compile components (via\n     * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n     */\n    clearComponentResolutionQueue() {\n        if (this.originalComponentResolutionQueue === null) {\n            this.originalComponentResolutionQueue = new Map();\n        }\n        ɵclearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));\n    }\n    /*\n     * Restores component resolution queue to the previously saved state. This operation is performed\n     * as a part of restoring the state after completion of the current set of tests (that might\n     * potentially mutate the state).\n     */\n    restoreComponentResolutionQueue() {\n        if (this.originalComponentResolutionQueue !== null) {\n            ɵrestoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n            this.originalComponentResolutionQueue = null;\n        }\n    }\n    restoreOriginalState() {\n        // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n        // case there were multiple overrides for the same field).\n        forEachRight(this.defCleanupOps, (op) => {\n            op.object[op.fieldName] = op.originalValue;\n        });\n        // Restore initial component/directive/pipe defs\n        this.initialNgDefs.forEach((defs, type) => {\n            if (ɵUSE_RUNTIME_DEPS_TRACKER_FOR_JIT) {\n                ɵdepsTracker.clearScopeCacheFor(type);\n            }\n            defs.forEach((descriptor, prop) => {\n                if (!descriptor) {\n                    // Delete operations are generally undesirable since they have performance\n                    // implications on objects they were applied to. In this particular case, situations\n                    // where this code is invoked should be quite rare to cause any noticeable impact,\n                    // since it's applied only to some test cases (for example when class with no\n                    // annotations extends some @Component) when we need to clear 'ɵcmp' field on a given\n                    // class to restore its original state (before applying overrides and running tests).\n                    delete type[prop];\n                }\n                else {\n                    Object.defineProperty(type, prop, descriptor);\n                }\n            });\n        });\n        this.initialNgDefs.clear();\n        this.scopesWithOverriddenProviders.clear();\n        this.restoreComponentResolutionQueue();\n        // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n        ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n    }\n    compileTestModule() {\n        class RootScopeModule {\n        }\n        ɵcompileNgModuleDefs(RootScopeModule, {\n            providers: [...this.rootProviderOverrides],\n        });\n        const providers = [\n            provideZoneChangeDetection(),\n            { provide: Compiler, useFactory: () => new R3TestCompiler(this) },\n            { provide: ɵDEFER_BLOCK_CONFIG, useValue: { behavior: this.deferBlockBehavior } },\n            ...this.providers,\n            ...this.providerOverrides,\n        ];\n        const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n        // clang-format off\n        ɵcompileNgModuleDefs(this.testModuleType, {\n            declarations: this.declarations,\n            imports,\n            schemas: this.schemas,\n            providers,\n        }, /* allowDuplicateDeclarationsInRoot */ true);\n        // clang-format on\n        this.applyProviderOverridesInScope(this.testModuleType);\n    }\n    get injector() {\n        if (this._injector !== null) {\n            return this._injector;\n        }\n        const providers = [];\n        const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n        compilerOptions.forEach(opts => {\n            if (opts.providers) {\n                providers.push(opts.providers);\n            }\n        });\n        if (this.compilerProviders !== null) {\n            providers.push(...this.compilerProviders);\n        }\n        this._injector = Injector.create({ providers, parent: this.platform.injector });\n        return this._injector;\n    }\n    // get overrides for a specific provider (if any)\n    getSingleProviderOverrides(provider) {\n        const token = getProviderToken(provider);\n        return this.providerOverridesByToken.get(token) || null;\n    }\n    getProviderOverrides(providers) {\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        // There are two flattening operations here. The inner flattenProviders() operates on the\n        // metadata's providers and applies a mapping function which retrieves overrides for each\n        // incoming provider. The outer flatten() then flattens the produced overrides array. If this is\n        // not done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n        // providers array and contaminate any error messages that might be generated.\n        return flatten(flattenProviders(providers, (provider) => this.getSingleProviderOverrides(provider) || []));\n    }\n    getOverriddenProviders(providers) {\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        const flattenedProviders = flattenProviders(providers);\n        const overrides = this.getProviderOverrides(flattenedProviders);\n        const overriddenProviders = [...flattenedProviders, ...overrides];\n        const final = [];\n        const seenOverriddenProviders = new Set();\n        // We iterate through the list of providers in reverse order to make sure provider overrides\n        // take precedence over the values defined in provider list. We also filter out all providers\n        // that have overrides, keeping overridden values only. This is needed, since presence of a\n        // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n        forEachRight(overriddenProviders, (provider) => {\n            const token = getProviderToken(provider);\n            if (this.providerOverridesByToken.has(token)) {\n                if (!seenOverriddenProviders.has(token)) {\n                    seenOverriddenProviders.add(token);\n                    // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n                    // make sure that provided override takes highest precedence and is not combined with\n                    // other instances of the same multi provider.\n                    final.unshift({ ...provider, multi: false });\n                }\n            }\n            else {\n                final.unshift(provider);\n            }\n        });\n        return final;\n    }\n    hasProviderOverrides(providers) {\n        return this.getProviderOverrides(providers).length > 0;\n    }\n    patchDefWithProviderOverrides(declaration, field) {\n        const def = declaration[field];\n        if (def && def.providersResolver) {\n            this.maybeStoreNgDef(field, declaration);\n            const resolver = def.providersResolver;\n            const processProvidersFn = (providers) => this.getOverriddenProviders(providers);\n            this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n            def.providersResolver = (ngDef) => resolver(ngDef, processProvidersFn);\n        }\n    }\n}\nfunction initResolvers() {\n    return {\n        module: new NgModuleResolver(),\n        component: new ComponentResolver(),\n        directive: new DirectiveResolver(),\n        pipe: new PipeResolver()\n    };\n}\nfunction isStandaloneComponent(value) {\n    const def = getComponentDef(value);\n    return !!def?.standalone;\n}\nfunction getComponentDef(value) {\n    return value.ɵcmp ?? null;\n}\nfunction hasNgModuleDef(value) {\n    return value.hasOwnProperty('ɵmod');\n}\nfunction isNgModule(value) {\n    return hasNgModuleDef(value);\n}\nfunction maybeUnwrapFn(maybeFn) {\n    return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\nfunction flatten(values) {\n    const out = [];\n    values.forEach(value => {\n        if (Array.isArray(value)) {\n            out.push(...flatten(value));\n        }\n        else {\n            out.push(value);\n        }\n    });\n    return out;\n}\nfunction identityFn(value) {\n    return value;\n}\nfunction flattenProviders(providers, mapFn = identityFn) {\n    const out = [];\n    for (let provider of providers) {\n        if (ɵisEnvironmentProviders(provider)) {\n            provider = provider.ɵproviders;\n        }\n        if (Array.isArray(provider)) {\n            out.push(...flattenProviders(provider, mapFn));\n        }\n        else {\n            out.push(mapFn(provider));\n        }\n    }\n    return out;\n}\nfunction getProviderField(provider, field) {\n    return provider && typeof provider === 'object' && provider[field];\n}\nfunction getProviderToken(provider) {\n    return getProviderField(provider, 'provide') || provider;\n}\nfunction isModuleWithProviders(value) {\n    return value.hasOwnProperty('ngModule');\n}\nfunction forEachRight(values, fn) {\n    for (let idx = values.length - 1; idx >= 0; idx--) {\n        fn(values[idx], idx);\n    }\n}\nfunction invalidTypeError(name, expectedType) {\n    return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\n}\nclass R3TestCompiler {\n    constructor(testBed) {\n        this.testBed = testBed;\n    }\n    compileModuleSync(moduleType) {\n        this.testBed._compileNgModuleSync(moduleType);\n        return new ɵNgModuleFactory(moduleType);\n    }\n    async compileModuleAsync(moduleType) {\n        await this.testBed._compileNgModuleAsync(moduleType);\n        return new ɵNgModuleFactory(moduleType);\n    }\n    compileModuleAndAllComponentsSync(moduleType) {\n        const ngModuleFactory = this.compileModuleSync(moduleType);\n        const componentFactories = this.testBed._getComponentFactories(moduleType);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n    async compileModuleAndAllComponentsAsync(moduleType) {\n        const ngModuleFactory = await this.compileModuleAsync(moduleType);\n        const componentFactories = this.testBed._getComponentFactories(moduleType);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    }\n    clearCache() { }\n    clearCacheFor(type) { }\n    getModuleId(moduleType) {\n        const meta = this.testBed._getModuleResolver().resolve(moduleType);\n        return meta && meta.id || undefined;\n    }\n}\n\n// The formatter and CI disagree on how this import statement should be formatted. Both try to keep\nlet _nextRootElementId = 0;\n/**\n * Returns a singleton of the `TestBed` class.\n *\n * @publicApi\n */\nfunction getTestBed() {\n    return TestBedImpl.INSTANCE;\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n */\nclass TestBedImpl {\n    constructor() {\n        /**\n         * Defer block behavior option that specifies whether defer blocks will be triggered manually\n         * or set to play through.\n         */\n        this._instanceDeferBlockBehavior = DEFER_BLOCK_DEFAULT_BEHAVIOR;\n        // Properties\n        this.platform = null;\n        this.ngModule = null;\n        this._compiler = null;\n        this._testModuleRef = null;\n        this._activeFixtures = [];\n        /**\n         * Internal-only flag to indicate whether a module\n         * scoping queue has been checked and flushed already.\n         * @nodoc\n         */\n        this.globalCompilationChecked = false;\n    }\n    static { this._INSTANCE = null; }\n    static get INSTANCE() {\n        return TestBedImpl._INSTANCE = TestBedImpl._INSTANCE || new TestBedImpl();\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    static initTestEnvironment(ngModule, platform, options) {\n        const testBed = TestBedImpl.INSTANCE;\n        testBed.initTestEnvironment(ngModule, platform, options);\n        return testBed;\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    static resetTestEnvironment() {\n        TestBedImpl.INSTANCE.resetTestEnvironment();\n    }\n    static configureCompiler(config) {\n        return TestBedImpl.INSTANCE.configureCompiler(config);\n    }\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    static configureTestingModule(moduleDef) {\n        return TestBedImpl.INSTANCE.configureTestingModule(moduleDef);\n    }\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    static compileComponents() {\n        return TestBedImpl.INSTANCE.compileComponents();\n    }\n    static overrideModule(ngModule, override) {\n        return TestBedImpl.INSTANCE.overrideModule(ngModule, override);\n    }\n    static overrideComponent(component, override) {\n        return TestBedImpl.INSTANCE.overrideComponent(component, override);\n    }\n    static overrideDirective(directive, override) {\n        return TestBedImpl.INSTANCE.overrideDirective(directive, override);\n    }\n    static overridePipe(pipe, override) {\n        return TestBedImpl.INSTANCE.overridePipe(pipe, override);\n    }\n    static overrideTemplate(component, template) {\n        return TestBedImpl.INSTANCE.overrideTemplate(component, template);\n    }\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    static overrideTemplateUsingTestingModule(component, template) {\n        return TestBedImpl.INSTANCE.overrideTemplateUsingTestingModule(component, template);\n    }\n    static overrideProvider(token, provider) {\n        return TestBedImpl.INSTANCE.overrideProvider(token, provider);\n    }\n    static inject(token, notFoundValue, flags) {\n        return TestBedImpl.INSTANCE.inject(token, notFoundValue, ɵconvertToBitFlags(flags));\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    static get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        return TestBedImpl.INSTANCE.inject(token, notFoundValue, flags);\n    }\n    /**\n     * Runs the given function in the `EnvironmentInjector` context of `TestBed`.\n     *\n     * @see {@link EnvironmentInjector#runInContext}\n     */\n    static runInInjectionContext(fn) {\n        return TestBedImpl.INSTANCE.runInInjectionContext(fn);\n    }\n    static createComponent(component) {\n        return TestBedImpl.INSTANCE.createComponent(component);\n    }\n    static resetTestingModule() {\n        return TestBedImpl.INSTANCE.resetTestingModule();\n    }\n    static execute(tokens, fn, context) {\n        return TestBedImpl.INSTANCE.execute(tokens, fn, context);\n    }\n    static get platform() {\n        return TestBedImpl.INSTANCE.platform;\n    }\n    static get ngModule() {\n        return TestBedImpl.INSTANCE.ngModule;\n    }\n    static flushEffects() {\n        return TestBedImpl.INSTANCE.flushEffects();\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    initTestEnvironment(ngModule, platform, options) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        TestBedImpl._environmentTeardownOptions = options?.teardown;\n        TestBedImpl._environmentErrorOnUnknownElementsOption = options?.errorOnUnknownElements;\n        TestBedImpl._environmentErrorOnUnknownPropertiesOption = options?.errorOnUnknownProperties;\n        this.platform = platform;\n        this.ngModule = ngModule;\n        this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n        // TestBed does not have an API which can reliably detect the start of a test, and thus could be\n        // used to track the state of the NgModule registry and reset it correctly. Instead, when we\n        // know we're in a testing scenario, we disable the check for duplicate NgModule registration\n        // completely.\n        ɵsetAllowDuplicateNgModuleIdsForTest(true);\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    resetTestEnvironment() {\n        this.resetTestingModule();\n        this._compiler = null;\n        this.platform = null;\n        this.ngModule = null;\n        TestBedImpl._environmentTeardownOptions = undefined;\n        ɵsetAllowDuplicateNgModuleIdsForTest(false);\n    }\n    resetTestingModule() {\n        this.checkGlobalCompilationFinished();\n        ɵresetCompiledComponents();\n        if (this._compiler !== null) {\n            this.compiler.restoreOriginalState();\n        }\n        this._compiler = new TestBedCompiler(this.platform, this.ngModule);\n        // Restore the previous value of the \"error on unknown elements\" option\n        ɵsetUnknownElementStrictMode(this._previousErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT);\n        // Restore the previous value of the \"error on unknown properties\" option\n        ɵsetUnknownPropertyStrictMode(this._previousErrorOnUnknownPropertiesOption ?? THROW_ON_UNKNOWN_PROPERTIES_DEFAULT);\n        // We have to chain a couple of try/finally blocks, because each step can\n        // throw errors and we don't want it to interrupt the next step and we also\n        // want an error to be thrown at the end.\n        try {\n            this.destroyActiveFixtures();\n        }\n        finally {\n            try {\n                if (this.shouldTearDownTestingModule()) {\n                    this.tearDownTestingModule();\n                }\n            }\n            finally {\n                this._testModuleRef = null;\n                this._instanceTeardownOptions = undefined;\n                this._instanceErrorOnUnknownElementsOption = undefined;\n                this._instanceErrorOnUnknownPropertiesOption = undefined;\n                this._instanceDeferBlockBehavior = DEFER_BLOCK_DEFAULT_BEHAVIOR;\n            }\n        }\n        return this;\n    }\n    configureCompiler(config) {\n        if (config.useJit != null) {\n            throw new Error('JIT compiler is not configurable via TestBed APIs.');\n        }\n        if (config.providers !== undefined) {\n            this.compiler.setCompilerProviders(config.providers);\n        }\n        return this;\n    }\n    configureTestingModule(moduleDef) {\n        this.assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n        // Trigger module scoping queue flush before executing other TestBed operations in a test.\n        // This is needed for the first test invocation to ensure that globally declared modules have\n        // their components scoped properly. See the `checkGlobalCompilationFinished` function\n        // description for additional info.\n        this.checkGlobalCompilationFinished();\n        // Always re-assign the options, even if they're undefined.\n        // This ensures that we don't carry them between tests.\n        this._instanceTeardownOptions = moduleDef.teardown;\n        this._instanceErrorOnUnknownElementsOption = moduleDef.errorOnUnknownElements;\n        this._instanceErrorOnUnknownPropertiesOption = moduleDef.errorOnUnknownProperties;\n        this._instanceDeferBlockBehavior = moduleDef.deferBlockBehavior ?? DEFER_BLOCK_DEFAULT_BEHAVIOR;\n        // Store the current value of the strict mode option,\n        // so we can restore it later\n        this._previousErrorOnUnknownElementsOption = ɵgetUnknownElementStrictMode();\n        ɵsetUnknownElementStrictMode(this.shouldThrowErrorOnUnknownElements());\n        this._previousErrorOnUnknownPropertiesOption = ɵgetUnknownPropertyStrictMode();\n        ɵsetUnknownPropertyStrictMode(this.shouldThrowErrorOnUnknownProperties());\n        this.compiler.configureTestingModule(moduleDef);\n        return this;\n    }\n    compileComponents() {\n        return this.compiler.compileComponents();\n    }\n    inject(token, notFoundValue, flags) {\n        if (token === TestBed) {\n            return this;\n        }\n        const UNDEFINED = {};\n        const result = this.testModuleRef.injector.get(token, UNDEFINED, ɵconvertToBitFlags(flags));\n        return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) :\n            result;\n    }\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        return this.inject(token, notFoundValue, flags);\n    }\n    runInInjectionContext(fn) {\n        return runInInjectionContext(this.inject(EnvironmentInjector), fn);\n    }\n    execute(tokens, fn, context) {\n        const params = tokens.map(t => this.inject(t));\n        return fn.apply(context, params);\n    }\n    overrideModule(ngModule, override) {\n        this.assertNotInstantiated('overrideModule', 'override module metadata');\n        this.compiler.overrideModule(ngModule, override);\n        return this;\n    }\n    overrideComponent(component, override) {\n        this.assertNotInstantiated('overrideComponent', 'override component metadata');\n        this.compiler.overrideComponent(component, override);\n        return this;\n    }\n    overrideTemplateUsingTestingModule(component, template) {\n        this.assertNotInstantiated('TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n        this.compiler.overrideTemplateUsingTestingModule(component, template);\n        return this;\n    }\n    overrideDirective(directive, override) {\n        this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this.compiler.overrideDirective(directive, override);\n        return this;\n    }\n    overridePipe(pipe, override) {\n        this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this.compiler.overridePipe(pipe, override);\n        return this;\n    }\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    overrideProvider(token, provider) {\n        this.assertNotInstantiated('overrideProvider', 'override provider');\n        this.compiler.overrideProvider(token, provider);\n        return this;\n    }\n    overrideTemplate(component, template) {\n        return this.overrideComponent(component, { set: { template, templateUrl: null } });\n    }\n    createComponent(type) {\n        const testComponentRenderer = this.inject(TestComponentRenderer);\n        const rootElId = `root${_nextRootElementId++}`;\n        testComponentRenderer.insertRootElement(rootElId);\n        if (ɵgetAsyncClassMetadataFn(type)) {\n            throw new Error(`Component '${type.name}' has unresolved metadata. ` +\n                `Please call \\`await TestBed.compileComponents()\\` before running this test.`);\n        }\n        const componentDef = type.ɵcmp;\n        if (!componentDef) {\n            throw new Error(`It looks like '${ɵstringify(type)}' has not been compiled.`);\n        }\n        const componentFactory = new ɵRender3ComponentFactory(componentDef);\n        const initComponent = () => {\n            const componentRef = componentFactory.create(Injector.NULL, [], `#${rootElId}`, this.testModuleRef);\n            return this.runInInjectionContext(() => {\n                const hasScheduler = this.inject(ɵChangeDetectionScheduler, null) !== null;\n                const fixture = hasScheduler ? new ScheduledComponentFixture(componentRef) :\n                    new PseudoApplicationComponentFixture(componentRef);\n                fixture.initialize();\n                return fixture;\n            });\n        };\n        const noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n        const ngZone = noNgZone ? null : this.inject(NgZone, null);\n        const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n        this._activeFixtures.push(fixture);\n        return fixture;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get compiler() {\n        if (this._compiler === null) {\n            throw new Error(`Need to call TestBed.initTestEnvironment() first`);\n        }\n        return this._compiler;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get testModuleRef() {\n        if (this._testModuleRef === null) {\n            this._testModuleRef = this.compiler.finalize();\n        }\n        return this._testModuleRef;\n    }\n    assertNotInstantiated(methodName, methodDescription) {\n        if (this._testModuleRef !== null) {\n            throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` +\n                `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n        }\n    }\n    /**\n     * Check whether the module scoping queue should be flushed, and flush it if needed.\n     *\n     * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n     * in-progress module compilation. This creates a potential hazard - the very first time the\n     * TestBed is initialized (or if it's reset without being initialized), there may be pending\n     * compilations of modules declared in global scope. These compilations should be finished.\n     *\n     * To ensure that globally declared modules have their components scoped properly, this function\n     * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n     * to any other operations, the scoping queue is flushed.\n     */\n    checkGlobalCompilationFinished() {\n        // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n        // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n        if (!this.globalCompilationChecked && this._testModuleRef === null) {\n            ɵflushModuleScopingQueueAsMuchAsPossible();\n        }\n        this.globalCompilationChecked = true;\n    }\n    destroyActiveFixtures() {\n        let errorCount = 0;\n        this._activeFixtures.forEach((fixture) => {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                errorCount++;\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n        if (errorCount > 0 && this.shouldRethrowTeardownErrors()) {\n            throw Error(`${errorCount} ${(errorCount === 1 ? 'component' : 'components')} ` +\n                `threw errors during cleanup`);\n        }\n    }\n    shouldRethrowTeardownErrors() {\n        const instanceOptions = this._instanceTeardownOptions;\n        const environmentOptions = TestBedImpl._environmentTeardownOptions;\n        // If the new teardown behavior hasn't been configured, preserve the old behavior.\n        if (!instanceOptions && !environmentOptions) {\n            return TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n        }\n        // Otherwise use the configured behavior or default to rethrowing.\n        return instanceOptions?.rethrowErrors ?? environmentOptions?.rethrowErrors ??\n            this.shouldTearDownTestingModule();\n    }\n    shouldThrowErrorOnUnknownElements() {\n        // Check if a configuration has been provided to throw when an unknown element is found\n        return this._instanceErrorOnUnknownElementsOption ??\n            TestBedImpl._environmentErrorOnUnknownElementsOption ?? THROW_ON_UNKNOWN_ELEMENTS_DEFAULT;\n    }\n    shouldThrowErrorOnUnknownProperties() {\n        // Check if a configuration has been provided to throw when an unknown property is found\n        return this._instanceErrorOnUnknownPropertiesOption ??\n            TestBedImpl._environmentErrorOnUnknownPropertiesOption ??\n            THROW_ON_UNKNOWN_PROPERTIES_DEFAULT;\n    }\n    shouldTearDownTestingModule() {\n        return this._instanceTeardownOptions?.destroyAfterEach ??\n            TestBedImpl._environmentTeardownOptions?.destroyAfterEach ??\n            TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n    }\n    getDeferBlockBehavior() {\n        return this._instanceDeferBlockBehavior;\n    }\n    tearDownTestingModule() {\n        // If the module ref has already been destroyed, we won't be able to get a test renderer.\n        if (this._testModuleRef === null) {\n            return;\n        }\n        // Resolve the renderer ahead of time, because we want to remove the root elements as the very\n        // last step, but the injector will be destroyed as a part of the module ref destruction.\n        const testRenderer = this.inject(TestComponentRenderer);\n        try {\n            this._testModuleRef.destroy();\n        }\n        catch (e) {\n            if (this.shouldRethrowTeardownErrors()) {\n                throw e;\n            }\n            else {\n                console.error('Error during cleanup of a testing module', {\n                    component: this._testModuleRef.instance,\n                    stacktrace: e,\n                });\n            }\n        }\n        finally {\n            testRenderer.removeAllRootElements?.();\n        }\n    }\n    /**\n     * Execute any pending effects.\n     *\n     * @developerPreview\n     */\n    flushEffects() {\n        this.inject(ɵEffectScheduler).flush();\n    }\n}\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @publicApi\n */\nconst TestBed = TestBedImpl;\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`. Note: this function\n * (imported from the `@angular/core/testing` package) can **only** be used to inject dependencies\n * in tests. To inject dependencies in your application code, use the [`inject`](api/core/inject)\n * function from the `@angular/core` package instead.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * @publicApi\n */\nfunction inject(tokens, fn) {\n    const testBed = TestBedImpl.INSTANCE;\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        return testBed.execute(tokens, fn, this);\n    };\n}\n/**\n * @publicApi\n */\nclass InjectSetupWrapper {\n    constructor(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    _addModule() {\n        const moduleDef = this._moduleDef();\n        if (moduleDef) {\n            TestBedImpl.configureTestingModule(moduleDef);\n        }\n    }\n    inject(tokens, fn) {\n        const self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    }\n}\nfunction withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            const testBed = TestBedImpl.INSTANCE;\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(() => moduleDef);\n}\n\n/**\n * Public Test Library for unit testing Angular applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\n// Reset the test providers and the fake async zone before each test.\n// We keep a guard because somehow this file can make it into a bundle and be executed\n// beforeEach is only defined when executing the tests\nglobalThis.beforeEach?.(getCleanupHook(false));\n// We provide both a `beforeEach` and `afterEach`, because the updated behavior for\n// tearing down the module is supposed to run after the test so that we can associate\n// teardown errors with the correct test.\n// We keep a guard because somehow this file can make it into a bundle and be executed\n// afterEach is only defined when executing the tests\nglobalThis.afterEach?.(getCleanupHook(true));\nfunction getCleanupHook(expectedTeardownValue) {\n    return () => {\n        const testBed = TestBedImpl.INSTANCE;\n        if (testBed.shouldTearDownTestingModule() === expectedTeardownValue) {\n            testBed.resetTestingModule();\n            resetFakeAsyncZone();\n        }\n    };\n}\n/**\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\n * investigation.\n *\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\n *\n * @codeGenApi\n */\n// TODO(iminar): Remove this code in a safe way.\nconst __core_private_testing_placeholder__ = '';\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the core/testing package.\n */\n\n/// <reference types=\"jasmine\" />\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, DeferBlockFixture, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider };\n"],"mappings":"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ACvC,kBAAkB,EAAE;MACzB,MAAM,IAAIpC,KAAK,CAAC,qEAAqE,CAAC;IAC1F;IACA,IAAI,CAAC8E,WAAW,GAAGH,UAAU;IAC7B,IAAI,CAACnE,aAAa,CAAC,CAAC;EACxB;EACAkD,OAAOA,CAAA,EAAG;IACN,IAAI,CAACmB,cAAc,CAACkB,WAAW,CAAC,CAAC;IACjC,KAAK,CAACrC,OAAO,CAAC,CAAC;EACnB;AACJ;AAEA,MAAM5E,KAAK,GAAG,OAAOC,IAAI,KAAK,WAAW,GAAGA,IAAI,GAAG,IAAI;AACvD,MAAMiH,mBAAmB,GAAGlH,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACK,UAAU,CAAC,eAAe,CAAC,CAAC;AAC7E,MAAM8G,wCAAwC,GAAI;AAClD,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAAA,EAAG;EAC1B,IAAIF,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAACE,kBAAkB,CAAC,CAAC;EACnD;EACA,MAAM,IAAIlG,KAAK,CAACiG,wCAAwC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,SAASA,CAACtH,EAAE,EAAE;EACnB,IAAImH,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAACG,SAAS,CAACtH,EAAE,CAAC;EAC5C;EACA,MAAM,IAAImB,KAAK,CAACiG,wCAAwC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS/B,IAAIA,CAACkC,MAAM,GAAG,CAAC,EAAEC,WAAW,GAAG;EACpCC,iCAAiC,EAAE;AACvC,CAAC,EAAE;EACC,IAAIN,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAAC9B,IAAI,CAACkC,MAAM,EAAEC,WAAW,CAAC;EACxD;EACA,MAAM,IAAIrG,KAAK,CAACiG,wCAAwC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAShC,KAAKA,CAACsC,QAAQ,EAAE;EACrB,IAAIP,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAAC/B,KAAK,CAACsC,QAAQ,CAAC;EAC9C;EACA,MAAM,IAAIvG,KAAK,CAACiG,wCAAwC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,oBAAoBA,CAAA,EAAG;EAC5B,IAAIR,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAACQ,oBAAoB,CAAC,CAAC;EACrD;EACA,MAAM,IAAIxG,KAAK,CAACiG,wCAAwC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,eAAeA,CAAA,EAAG;EACvB,IAAIT,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB,CAACS,eAAe,CAAC,CAAC;EAChD;EACA,MAAM,IAAIzG,KAAK,CAACiG,wCAAwC,CAAC;AAC7D;AAEA,IAAIS,gBAAgB,GAAG,CAAC;AACxB,MAAMC,iBAAiB,CAAC;EACpBrH,WAAWA,CAAA,EAAG;IACV,IAAI,CAACsH,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAChC;EACA;AACJ;AACA;AACA;EACIC,gBAAgBA,CAACC,aAAa,EAAEC,WAAW,EAAEC,QAAQ,EAAE;IACnD,MAAMC,KAAK,GAAG,CAAC,CAAC;IAChB,IAAIF,WAAW,EAAE;MACbG,WAAW,CAACH,WAAW,CAAC,CAACI,OAAO,CAAEC,IAAI,IAAKH,KAAK,CAACG,IAAI,CAAC,GAAGL,WAAW,CAACK,IAAI,CAAC,CAAC;IAC/E;IACA,IAAIJ,QAAQ,CAACK,GAAG,EAAE;MACd,IAAIL,QAAQ,CAACM,MAAM,IAAIN,QAAQ,CAAC9B,GAAG,EAAE;QACjC,MAAM,IAAInF,KAAK,CAAE,6BAA4B9E,UAAU,CAAC6L,aAAa,CAAE,oBAAmB,CAAC;MAC/F;MACAS,WAAW,CAACN,KAAK,EAAED,QAAQ,CAACK,GAAG,CAAC;IACpC;IACA,IAAIL,QAAQ,CAACM,MAAM,EAAE;MACjBE,cAAc,CAACP,KAAK,EAAED,QAAQ,CAACM,MAAM,EAAE,IAAI,CAACX,WAAW,CAAC;IAC5D;IACA,IAAIK,QAAQ,CAAC9B,GAAG,EAAE;MACduC,WAAW,CAACR,KAAK,EAAED,QAAQ,CAAC9B,GAAG,CAAC;IACpC;IACA,OAAO,IAAI4B,aAAa,CAACG,KAAK,CAAC;EACnC;AACJ;AACA,SAASO,cAAcA,CAACE,QAAQ,EAAEJ,MAAM,EAAEK,UAAU,EAAE;EAClD,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC/B,KAAK,MAAMT,IAAI,IAAIE,MAAM,EAAE;IACvB,MAAMQ,WAAW,GAAGR,MAAM,CAACF,IAAI,CAAC;IAChC,IAAIW,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,EAAE;MAC5BA,WAAW,CAACX,OAAO,CAAE/C,KAAK,IAAK;QAC3BwD,aAAa,CAAC1C,GAAG,CAAC+C,YAAY,CAACb,IAAI,EAAEhD,KAAK,EAAEuD,UAAU,CAAC,CAAC;MAC5D,CAAC,CAAC;IACN,CAAC,MACI;MACDC,aAAa,CAAC1C,GAAG,CAAC+C,YAAY,CAACb,IAAI,EAAEU,WAAW,EAAEH,UAAU,CAAC,CAAC;IAClE;EACJ;EACA,KAAK,MAAMP,IAAI,IAAIM,QAAQ,EAAE;IACzB,MAAMQ,SAAS,GAAGR,QAAQ,CAACN,IAAI,CAAC;IAChC,IAAIW,KAAK,CAACC,OAAO,CAACE,SAAS,CAAC,EAAE;MAC1BR,QAAQ,CAACN,IAAI,CAAC,GAAGc,SAAS,CAACC,MAAM,CAAE/D,KAAK,IAAK,CAACwD,aAAa,CAACQ,GAAG,CAACH,YAAY,CAACb,IAAI,EAAEhD,KAAK,EAAEuD,UAAU,CAAC,CAAC,CAAC;IAC3G,CAAC,MACI;MACD,IAAIC,aAAa,CAACQ,GAAG,CAACH,YAAY,CAACb,IAAI,EAAEc,SAAS,EAAEP,UAAU,CAAC,CAAC,EAAE;QAC9DD,QAAQ,CAACN,IAAI,CAAC,GAAGhE,SAAS;MAC9B;IACJ;EACJ;AACJ;AACA,SAASqE,WAAWA,CAACC,QAAQ,EAAExC,GAAG,EAAE;EAChC,KAAK,MAAMkC,IAAI,IAAIlC,GAAG,EAAE;IACpB,MAAMmD,QAAQ,GAAGnD,GAAG,CAACkC,IAAI,CAAC;IAC1B,MAAMc,SAAS,GAAGR,QAAQ,CAACN,IAAI,CAAC;IAChC,IAAIc,SAAS,IAAI,IAAI,IAAIH,KAAK,CAACC,OAAO,CAACE,SAAS,CAAC,EAAE;MAC/CR,QAAQ,CAACN,IAAI,CAAC,GAAGc,SAAS,CAACI,MAAM,CAACD,QAAQ,CAAC;IAC/C,CAAC,MACI;MACDX,QAAQ,CAACN,IAAI,CAAC,GAAGiB,QAAQ;IAC7B;EACJ;AACJ;AACA,SAASd,WAAWA,CAACG,QAAQ,EAAEL,GAAG,EAAE;EAChC,KAAK,MAAMD,IAAI,IAAIC,GAAG,EAAE;IACpBK,QAAQ,CAACN,IAAI,CAAC,GAAGC,GAAG,CAACD,IAAI,CAAC;EAC9B;AACJ;AACA,SAASa,YAAYA,CAACM,QAAQ,EAAEL,SAAS,EAAEP,UAAU,EAAE;EACnD,IAAIa,YAAY,GAAG,CAAC;EACpB,MAAMC,SAAS,GAAG,IAAI7B,GAAG,CAAC,CAAC;EAC3B,MAAM8B,QAAQ,GAAGA,CAACC,GAAG,EAAEvE,KAAK,KAAK;IAC7B,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7C,IAAIqE,SAAS,CAACL,GAAG,CAAChE,KAAK,CAAC,EAAE;QACtB,OAAOqE,SAAS,CAACnF,GAAG,CAACc,KAAK,CAAC;MAC/B;MACA;MACA;MACAqE,SAAS,CAACpB,GAAG,CAACjD,KAAK,EAAG,QAAOoE,YAAY,EAAG,EAAC,CAAC;MAC9C;MACA,OAAOpE,KAAK;IAChB,CAAC,MACI,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;MAClCA,KAAK,GAAGwE,mBAAmB,CAACxE,KAAK,EAAEuD,UAAU,CAAC;IAClD;IACA,OAAOvD,KAAK;EAChB,CAAC;EACD,OAAQ,GAAEmE,QAAS,IAAGM,IAAI,CAACC,SAAS,CAACZ,SAAS,EAAEQ,QAAQ,CAAE,EAAC;AAC/D;AACA,SAASE,mBAAmBA,CAACG,GAAG,EAAEpB,UAAU,EAAE;EAC1C,IAAIqB,EAAE,GAAGrB,UAAU,CAACrE,GAAG,CAACyF,GAAG,CAAC;EAC5B,IAAI,CAACC,EAAE,EAAE;IACLA,EAAE,GAAI,GAAE/N,UAAU,CAAC8N,GAAG,CAAE,GAAEtC,gBAAgB,EAAG,EAAC;IAC9CkB,UAAU,CAACN,GAAG,CAAC0B,GAAG,EAAEC,EAAE,CAAC;EAC3B;EACA,OAAOA,EAAE;AACb;AACA,SAAS9B,WAAWA,CAAC+B,GAAG,EAAE;EACtB,MAAMhC,KAAK,GAAG,EAAE;EAChB;EACAiC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAAC9B,OAAO,CAAEC,IAAI,IAAK;IAC/B,IAAI,CAACA,IAAI,CAACgC,UAAU,CAAC,GAAG,CAAC,EAAE;MACvBnC,KAAK,CAACpG,IAAI,CAACuG,IAAI,CAAC;IACpB;EACJ,CAAC,CAAC;EACF;EACA,IAAIiC,KAAK,GAAGJ,GAAG;EACf,OAAOI,KAAK,GAAGH,MAAM,CAACI,cAAc,CAACD,KAAK,CAAC,EAAE;IACzCH,MAAM,CAACC,IAAI,CAACE,KAAK,CAAC,CAAClC,OAAO,CAAEoC,SAAS,IAAK;MACtC,MAAMC,IAAI,GAAGN,MAAM,CAACO,wBAAwB,CAACJ,KAAK,EAAEE,SAAS,CAAC;MAC9D,IAAI,CAACA,SAAS,CAACH,UAAU,CAAC,GAAG,CAAC,IAAII,IAAI,IAAI,KAAK,IAAIA,IAAI,EAAE;QACrDvC,KAAK,CAACpG,IAAI,CAAC0I,SAAS,CAAC;MACzB;IACJ,CAAC,CAAC;EACN;EACA,OAAOtC,KAAK;AAChB;AAEA,MAAMyC,UAAU,GAAG,IAAIxO,uBAAuB,CAAC,CAAC;AAChD;AACA;AACA;AACA,MAAMyO,gBAAgB,CAAC;EACnBtK,WAAWA,CAAA,EAAG;IACV,IAAI,CAACuK,SAAS,GAAG,IAAIhD,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACiD,QAAQ,GAAG,IAAIjD,GAAG,CAAC,CAAC;EAC7B;EACAkD,WAAWA,CAACC,IAAI,EAAE/C,QAAQ,EAAE;IACxB,MAAM4C,SAAS,GAAG,IAAI,CAACA,SAAS,CAACtG,GAAG,CAACyG,IAAI,CAAC,IAAI,EAAE;IAChDH,SAAS,CAAC/I,IAAI,CAACmG,QAAQ,CAAC;IACxB,IAAI,CAAC4C,SAAS,CAACvC,GAAG,CAAC0C,IAAI,EAAEH,SAAS,CAAC;IACnC,IAAI,CAACC,QAAQ,CAACG,MAAM,CAACD,IAAI,CAAC;EAC9B;EACAE,YAAYA,CAACL,SAAS,EAAE;IACpB,IAAI,CAACA,SAAS,CAACM,KAAK,CAAC,CAAC;IACtBN,SAAS,CAACzC,OAAO,CAAC,CAAC,CAAC4C,IAAI,EAAE/C,QAAQ,CAAC,KAAK;MACpC,IAAI,CAAC8C,WAAW,CAACC,IAAI,EAAE/C,QAAQ,CAAC;IACpC,CAAC,CAAC;EACN;EACAmD,aAAaA,CAACJ,IAAI,EAAE;IAChB,MAAMK,WAAW,GAAGV,UAAU,CAACU,WAAW,CAACL,IAAI,CAAC;IAChD;IACA;IACA;IACA;IACA;IACA,KAAK,IAAIM,CAAC,GAAGD,WAAW,CAACxJ,MAAM,GAAG,CAAC,EAAEyJ,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC9C,MAAMC,UAAU,GAAGF,WAAW,CAACC,CAAC,CAAC;MACjC,MAAME,WAAW,GAAGD,UAAU,YAAYnP,SAAS,IAAImP,UAAU,YAAYlP,SAAS,IAClFkP,UAAU,YAAYjP,IAAI,IAAIiP,UAAU,YAAYhP,QAAQ;MAChE,IAAIiP,WAAW,EAAE;QACb,OAAOD,UAAU,YAAY,IAAI,CAACP,IAAI,GAAGO,UAAU,GAAG,IAAI;MAC9D;IACJ;IACA,OAAO,IAAI;EACf;EACAxJ,OAAOA,CAACiJ,IAAI,EAAE;IACV,IAAIF,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACvG,GAAG,CAACyG,IAAI,CAAC,IAAI,IAAI;IAC9C,IAAI,CAACF,QAAQ,EAAE;MACXA,QAAQ,GAAG,IAAI,CAACM,aAAa,CAACJ,IAAI,CAAC;MACnC,IAAIF,QAAQ,EAAE;QACV,MAAMD,SAAS,GAAG,IAAI,CAACA,SAAS,CAACtG,GAAG,CAACyG,IAAI,CAAC;QAC1C,IAAIH,SAAS,EAAE;UACX,MAAMY,SAAS,GAAG,IAAI9D,iBAAiB,CAAC,CAAC;UACzCkD,SAAS,CAACzC,OAAO,CAACH,QAAQ,IAAI;YAC1B6C,QAAQ,GAAGW,SAAS,CAAC3D,gBAAgB,CAAC,IAAI,CAACkD,IAAI,EAAEF,QAAQ,EAAE7C,QAAQ,CAAC;UACxE,CAAC,CAAC;QACN;MACJ;MACA,IAAI,CAAC6C,QAAQ,CAACxC,GAAG,CAAC0C,IAAI,EAAEF,QAAQ,CAAC;IACrC;IACA,OAAOA,QAAQ;EACnB;AACJ;AACA,MAAMY,iBAAiB,SAASd,gBAAgB,CAAC;EAC7C,IAAII,IAAIA,CAAA,EAAG;IACP,OAAO5O,SAAS;EACpB;AACJ;AACA,MAAMuP,iBAAiB,SAASf,gBAAgB,CAAC;EAC7C,IAAII,IAAIA,CAAA,EAAG;IACP,OAAO3O,SAAS;EACpB;AACJ;AACA,MAAMuP,YAAY,SAAShB,gBAAgB,CAAC;EACxC,IAAII,IAAIA,CAAA,EAAG;IACP,OAAO1O,IAAI;EACf;AACJ;AACA,MAAMuP,gBAAgB,SAASjB,gBAAgB,CAAC;EAC5C,IAAII,IAAIA,CAAA,EAAG;IACP,OAAOzO,QAAQ;EACnB;AACJ;AAEA,IAAIuP,qBAAqB;AACzB,CAAC,UAAUA,qBAAqB,EAAE;EAC9BA,qBAAqB,CAACA,qBAAqB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa;EAC/EA,qBAAqB,CAACA,qBAAqB,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB;AAC/F,CAAC,EAAEA,qBAAqB,KAAKA,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC;AACzD,SAASC,uBAAuBA,CAAC1G,KAAK,EAAE;EACpC,OAAOA,KAAK,KAAKyG,qBAAqB,CAACE,WAAW,IAC9C3G,KAAK,KAAKyG,qBAAqB,CAACG,iBAAiB;AACzD;AACA,SAASC,4BAA4BA,CAACC,KAAK,EAAEC,QAAQ,EAAExI,QAAQ,EAAE;EAC7DuI,KAAK,CAAC/D,OAAO,CAAC4C,IAAI,IAAI;IAClB,IAAI,CAACxO,wBAAwB,CAACwO,IAAI,CAAC,EAAE;MACjC,MAAMqB,SAAS,GAAGD,QAAQ,CAACrK,OAAO,CAACiJ,IAAI,CAAC;MACxC,IAAIqB,SAAS,IAAIA,SAAS,CAACC,UAAU,EAAE;QACnC,MAAM,IAAItL,KAAK,CAACvE,sCAAsC,CAACuO,IAAI,EAAEpH,QAAQ,CAAC,CAAC;MAC3E;IACJ;EACJ,CAAC,CAAC;AACN;AACA,MAAM2I,eAAe,CAAC;EAClBjM,WAAWA,CAACkM,QAAQ,EAAEC,qBAAqB,EAAE;IACzC,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACC,gCAAgC,GAAG,IAAI;IAC5C;IACA,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB;IACA,IAAI,CAACC,iBAAiB,GAAG,IAAIjE,GAAG,CAAC,CAAC;IAClC,IAAI,CAACkE,iBAAiB,GAAG,IAAIlE,GAAG,CAAC,CAAC;IAClC,IAAI,CAACmE,YAAY,GAAG,IAAInE,GAAG,CAAC,CAAC;IAC7B;IACA,IAAI,CAACoE,cAAc,GAAG,IAAIpE,GAAG,CAAC,CAAC;IAC/B,IAAI,CAACqE,cAAc,GAAG,IAAIrE,GAAG,CAAC,CAAC;IAC/B;IACA,IAAI,CAACsE,iBAAiB,GAAG,IAAItE,GAAG,CAAC,CAAC;IAClC;IACA;IACA,IAAI,CAACuE,uBAAuB,GAAG,IAAIxF,GAAG,CAAC,CAAC;IACxC,IAAI,CAACyF,SAAS,GAAGC,aAAa,CAAC,CAAC;IAChC;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACC,sBAAsB,GAAG,IAAI3F,GAAG,CAAC,CAAC;IACvC;IACA;IACA;IACA;IACA;IACA,IAAI,CAAC4F,aAAa,GAAG,IAAI5F,GAAG,CAAC,CAAC;IAC9B;IACA;IACA,IAAI,CAAC6F,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,qBAAqB,GAAG,EAAE;IAC/B;IACA;IACA,IAAI,CAACC,yBAAyB,GAAG,IAAIlG,GAAG,CAAC,CAAC;IAC1C,IAAI,CAACmG,wBAAwB,GAAG,IAAInG,GAAG,CAAC,CAAC;IACzC,IAAI,CAACoG,6BAA6B,GAAG,IAAInF,GAAG,CAAC,CAAC;IAC9C,IAAI,CAACoF,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,kBAAkB,GAAG3L,4BAA4B;IACtD,MAAM4L,iBAAiB,CAAC;IAExB,IAAI,CAACC,cAAc,GAAGD,iBAAiB;EAC3C;EACAE,oBAAoBA,CAACzB,SAAS,EAAE;IAC5B,IAAI,CAACe,iBAAiB,GAAGf,SAAS;IAClC,IAAI,CAACc,SAAS,GAAG,IAAI;EACzB;EACAY,sBAAsBA,CAACC,SAAS,EAAE;IAC9B;IACA,IAAIA,SAAS,CAAC7B,YAAY,KAAKtI,SAAS,EAAE;MACtC;MACA6H,4BAA4B,CAACsC,SAAS,CAAC7B,YAAY,EAAE,IAAI,CAACW,SAAS,CAACjB,SAAS,EAAE,uCAAuC,CAAC;MACvH,IAAI,CAACoC,cAAc,CAACD,SAAS,CAAC7B,YAAY,EAAEb,qBAAqB,CAACE,WAAW,CAAC;MAC9E,IAAI,CAACW,YAAY,CAAC7K,IAAI,CAAC,GAAG0M,SAAS,CAAC7B,YAAY,CAAC;IACrD;IACA;IACA,IAAI6B,SAAS,CAAC5B,OAAO,KAAKvI,SAAS,EAAE;MACjC,IAAI,CAACqK,0BAA0B,CAACF,SAAS,CAAC5B,OAAO,CAAC;MAClD,IAAI,CAACA,OAAO,CAAC9K,IAAI,CAAC,GAAG0M,SAAS,CAAC5B,OAAO,CAAC;IAC3C;IACA,IAAI4B,SAAS,CAAC3B,SAAS,KAAKxI,SAAS,EAAE;MACnC,IAAI,CAACwI,SAAS,CAAC/K,IAAI,CAAC,GAAG0M,SAAS,CAAC3B,SAAS,CAAC;IAC/C;IACA,IAAI2B,SAAS,CAAC1B,OAAO,KAAKzI,SAAS,EAAE;MACjC,IAAI,CAACyI,OAAO,CAAChL,IAAI,CAAC,GAAG0M,SAAS,CAAC1B,OAAO,CAAC;IAC3C;IACA,IAAI,CAACqB,kBAAkB,GAAGK,SAAS,CAACL,kBAAkB,IAAI3L,4BAA4B;EAC1F;EACAmM,cAAcA,CAACC,QAAQ,EAAE3G,QAAQ,EAAE;IAC/B,IAAIvL,iCAAiC,EAAE;MACnCC,YAAY,CAACkS,kBAAkB,CAACD,QAAQ,CAAC;IAC7C;IACA,IAAI,CAACxB,iBAAiB,CAACjH,GAAG,CAACyI,QAAQ,CAAC;IACpC;IACA,IAAI,CAACtB,SAAS,CAACwB,MAAM,CAAC/D,WAAW,CAAC6D,QAAQ,EAAE3G,QAAQ,CAAC;IACrD,MAAMU,QAAQ,GAAG,IAAI,CAAC2E,SAAS,CAACwB,MAAM,CAAC/M,OAAO,CAAC6M,QAAQ,CAAC;IACxD,IAAIjG,QAAQ,KAAK,IAAI,EAAE;MACnB,MAAMoG,gBAAgB,CAACH,QAAQ,CAACI,IAAI,EAAE,UAAU,CAAC;IACrD;IACA,IAAI,CAACC,iBAAiB,CAACL,QAAQ,EAAEjG,QAAQ,CAAC;IAC1C;IACA;IACA;IACA,IAAI,CAAC+F,0BAA0B,CAAC,CAACE,QAAQ,CAAC,CAAC;EAC/C;EACAM,iBAAiBA,CAAC7C,SAAS,EAAEpE,QAAQ,EAAE;IACnC,IAAI,CAACkH,+BAA+B,CAAC9C,SAAS,EAAEpE,QAAQ,CAAC;IACzD,IAAI,CAACqF,SAAS,CAACjB,SAAS,CAACtB,WAAW,CAACsB,SAAS,EAAEpE,QAAQ,CAAC;IACzD,IAAI,CAAC8E,iBAAiB,CAAC5G,GAAG,CAACkG,SAAS,CAAC;EACzC;EACA+C,iBAAiBA,CAACC,SAAS,EAAEpH,QAAQ,EAAE;IACnC,IAAI,CAACkH,+BAA+B,CAACE,SAAS,EAAEpH,QAAQ,CAAC;IACzD,IAAI,CAACqF,SAAS,CAAC+B,SAAS,CAACtE,WAAW,CAACsE,SAAS,EAAEpH,QAAQ,CAAC;IACzD,IAAI,CAAC+E,iBAAiB,CAAC7G,GAAG,CAACkJ,SAAS,CAAC;EACzC;EACAC,YAAYA,CAAChK,IAAI,EAAE2C,QAAQ,EAAE;IACzB,IAAI,CAACkH,+BAA+B,CAAC7J,IAAI,EAAE2C,QAAQ,CAAC;IACpD,IAAI,CAACqF,SAAS,CAAChI,IAAI,CAACyF,WAAW,CAACzF,IAAI,EAAE2C,QAAQ,CAAC;IAC/C,IAAI,CAACgF,YAAY,CAAC9G,GAAG,CAACb,IAAI,CAAC;EAC/B;EACA6J,+BAA+BA,CAACnE,IAAI,EAAE/C,QAAQ,EAAE;IAC5C,IAAIA,QAAQ,CAAC9B,GAAG,EAAEoJ,cAAc,CAAC,YAAY,CAAC,IAAItH,QAAQ,CAACK,GAAG,EAAEiH,cAAc,CAAC,YAAY,CAAC,IACxFtH,QAAQ,CAACM,MAAM,EAAEgH,cAAc,CAAC,YAAY,CAAC,EAAE;MAC/C,MAAM,IAAIvO,KAAK,CAAE,uBAAsBgK,IAAI,CAACgE,IAAK,sCAAqC,GACjF,0EAAyE,CAAC;IACnF;EACJ;EACAQ,gBAAgBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC9B,IAAIC,WAAW;IACf,IAAID,QAAQ,CAACE,UAAU,KAAKvL,SAAS,EAAE;MACnCsL,WAAW,GAAG;QACVE,OAAO,EAAEJ,KAAK;QACdG,UAAU,EAAEF,QAAQ,CAACE,UAAU;QAC/BE,IAAI,EAAEJ,QAAQ,CAACI,IAAI,IAAI,EAAE;QACzBC,KAAK,EAAEL,QAAQ,CAACK;MACpB,CAAC;IACL,CAAC,MACI,IAAIL,QAAQ,CAACM,QAAQ,KAAK3L,SAAS,EAAE;MACtCsL,WAAW,GAAG;QAAEE,OAAO,EAAEJ,KAAK;QAAEO,QAAQ,EAAEN,QAAQ,CAACM,QAAQ;QAAED,KAAK,EAAEL,QAAQ,CAACK;MAAM,CAAC;IACxF,CAAC,MACI;MACDJ,WAAW,GAAG;QAAEE,OAAO,EAAEJ;MAAM,CAAC;IACpC;IACA,MAAMQ,aAAa,GAAG,OAAOR,KAAK,KAAK,QAAQ,GAAG7S,iBAAiB,CAAC6S,KAAK,CAAC,GAAG,IAAI;IACjF,MAAMS,UAAU,GAAGD,aAAa,KAAK,IAAI,GAAG,IAAI,GAAGpT,iBAAiB,CAACoT,aAAa,CAACC,UAAU,CAAC;IAC9F,MAAMC,eAAe,GAAGD,UAAU,KAAK,MAAM,GAAG,IAAI,CAACpC,qBAAqB,GAAG,IAAI,CAACD,iBAAiB;IACnGsC,eAAe,CAACrO,IAAI,CAAC6N,WAAW,CAAC;IACjC;IACA,IAAI,CAAC3B,wBAAwB,CAAC1F,GAAG,CAACmH,KAAK,EAAEE,WAAW,CAAC;IACrD,IAAIM,aAAa,KAAK,IAAI,IAAIC,UAAU,KAAK,IAAI,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MACjF,MAAME,iBAAiB,GAAG,IAAI,CAACrC,yBAAyB,CAACxJ,GAAG,CAAC2L,UAAU,CAAC;MACxE,IAAIE,iBAAiB,KAAK/L,SAAS,EAAE;QACjC+L,iBAAiB,CAACtO,IAAI,CAAC6N,WAAW,CAAC;MACvC,CAAC,MACI;QACD,IAAI,CAAC5B,yBAAyB,CAACzF,GAAG,CAAC4H,UAAU,EAAE,CAACP,WAAW,CAAC,CAAC;MACjE;IACJ;EACJ;EACAU,kCAAkCA,CAACrF,IAAI,EAAEsF,QAAQ,EAAE;IAC/C,MAAMC,GAAG,GAAGvF,IAAI,CAAClO,YAAY,CAAC;IAC9B,MAAM0T,YAAY,GAAGA,CAAA,KAAM;MACvB,MAAM7H,QAAQ,GAAG,IAAI,CAAC2E,SAAS,CAACjB,SAAS,CAACtK,OAAO,CAACiJ,IAAI,CAAC;MACvD,OAAO,CAAC,CAACrC,QAAQ,CAAC8H,QAAQ,IAAI,CAAC,CAAC9H,QAAQ,CAAC+H,SAAS,EAAE7O,MAAM;IAC9D,CAAC;IACD,MAAM8O,iBAAiB,GAAG,CAAC,CAACJ,GAAG,IAAI,CAACxT,gCAAgC,CAACiO,IAAI,CAAC,IAAIwF,YAAY,CAAC,CAAC;IAC5F;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMvI,QAAQ,GAAG0I,iBAAiB,GAAG;MAAEL,QAAQ;MAAEM,MAAM,EAAE,EAAE;MAAEF,SAAS,EAAE,EAAE;MAAED,QAAQ,EAAEpM;IAAU,CAAC,GAAG;MAAEiM;IAAS,CAAC;IAChH,IAAI,CAACpB,iBAAiB,CAAClE,IAAI,EAAE;MAAE1C,GAAG,EAAEL;IAAS,CAAC,CAAC;IAC/C,IAAI0I,iBAAiB,IAAIJ,GAAG,CAACK,MAAM,IAAIL,GAAG,CAACK,MAAM,CAAC/O,MAAM,GAAG,CAAC,EAAE;MAC1D,IAAI,CAACwL,uBAAuB,CAAC/E,GAAG,CAAC0C,IAAI,EAAEuF,GAAG,CAACK,MAAM,CAAC;IACtD;IACA;IACA,IAAI,CAACpD,sBAAsB,CAAClF,GAAG,CAAC0C,IAAI,EAAEc,qBAAqB,CAACG,iBAAiB,CAAC;EAClF;EACM4E,yCAAyCA,CAAA,EAAG;IAAA,IAAAC,MAAA;IAAA,OAAAlQ,iBAAA;MAC9C,IAAIkQ,MAAI,CAAC/D,iBAAiB,CAACgE,IAAI,KAAK,CAAC,EACjC;MACJ,MAAMC,QAAQ,GAAG,EAAE;MACnB,KAAK,MAAM3E,SAAS,IAAIyE,MAAI,CAAC/D,iBAAiB,EAAE;QAC5C,MAAMkE,eAAe,GAAGzU,wBAAwB,CAAC6P,SAAS,CAAC;QAC3D,IAAI4E,eAAe,EAAE;UACjBD,QAAQ,CAAClP,IAAI,CAACmP,eAAe,CAAC,CAAC,CAAC;QACpC;MACJ;MACA,MAAMC,YAAY,SAASlR,OAAO,CAACmR,GAAG,CAACH,QAAQ,CAAC;MAChDF,MAAI,CAACpC,0BAA0B,CAACwC,YAAY,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;IAAC;EAC1D;EACMC,iBAAiBA,CAAA,EAAG;IAAA,IAAAC,MAAA;IAAA,OAAA1Q,iBAAA;MACtB0Q,MAAI,CAACC,6BAA6B,CAAC,CAAC;MACpC;MACA;MACA;MACA,MAAMD,MAAI,CAACT,yCAAyC,CAAC,CAAC;MACtD;MACA;MACA;MACA;MACA3E,4BAA4B,CAACoF,MAAI,CAAC3E,YAAY,EAAE2E,MAAI,CAAChE,SAAS,CAACjB,SAAS,EAAE,uCAAuC,CAAC;MAClH;MACA,IAAImF,mBAAmB,GAAGF,MAAI,CAACG,gBAAgB,CAAC,CAAC;MACjD;MACA,IAAID,mBAAmB,EAAE;QACrB,IAAIE,cAAc;QAClB,IAAItF,QAAQ,GAAIuF,GAAG,IAAK;UACpB,IAAI,CAACD,cAAc,EAAE;YACjBA,cAAc,GAAGJ,MAAI,CAAChN,QAAQ,CAACC,GAAG,CAAC5E,cAAc,CAAC;UACtD;UACA,OAAOK,OAAO,CAAC+B,OAAO,CAAC2P,cAAc,CAACnN,GAAG,CAACoN,GAAG,CAAC,CAAC;QACnD,CAAC;QACD,MAAM3U,0BAA0B,CAACoP,QAAQ,CAAC;MAC9C;IAAC;EACL;EACAwF,QAAQA,CAAA,EAAG;IACP;IACA,IAAI,CAACH,gBAAgB,CAAC,CAAC;IACvB;IACA,IAAI,CAACI,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAC5B,IAAI,CAACC,sBAAsB,CAAC,CAAC;IAC7B;IACA;IACA,IAAI,CAACC,iCAAiC,CAAC,CAAC;IACxC;IACA;IACA,IAAI,CAACxE,sBAAsB,CAACrC,KAAK,CAAC,CAAC;IACnC,MAAM8G,cAAc,GAAG,IAAI,CAACzF,QAAQ,CAAClI,QAAQ;IAC7C,IAAI,CAAC4J,aAAa,GAAG,IAAIjR,mBAAmB,CAAC,IAAI,CAACoR,cAAc,EAAE4D,cAAc,EAAE,EAAE,CAAC;IACrF;IACA;IACA,IAAI,CAAC/D,aAAa,CAAC5J,QAAQ,CAACC,GAAG,CAACrH,qBAAqB,CAAC,CAACgV,eAAe,CAAC,CAAC;IACxE;IACA;IACA;IACA,MAAMC,QAAQ,GAAG,IAAI,CAACjE,aAAa,CAAC5J,QAAQ,CAACC,GAAG,CAACpH,SAAS,EAAEC,kBAAkB,CAAC;IAC/EC,YAAY,CAAC8U,QAAQ,CAAC;IACtB,OAAO,IAAI,CAACjE,aAAa;EAC7B;EACA;AACJ;AACA;EACIkE,oBAAoBA,CAACC,UAAU,EAAE;IAC7B,IAAI,CAAC3D,0BAA0B,CAAC,CAAC2D,UAAU,CAAC,CAAC;IAC7C,IAAI,CAACZ,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACM,sBAAsB,CAAC,CAAC;IAC7B,IAAI,CAACO,6BAA6B,CAACD,UAAU,CAAC;IAC9C,IAAI,CAACP,qBAAqB,CAAC,CAAC;EAChC;EACA;AACJ;AACA;EACUS,qBAAqBA,CAACF,UAAU,EAAE;IAAA,IAAAG,MAAA;IAAA,OAAA5R,iBAAA;MACpC4R,MAAI,CAAC9D,0BAA0B,CAAC,CAAC2D,UAAU,CAAC,CAAC;MAC7C,MAAMG,MAAI,CAACnB,iBAAiB,CAAC,CAAC;MAC9BmB,MAAI,CAACT,sBAAsB,CAAC,CAAC;MAC7BS,MAAI,CAACF,6BAA6B,CAACD,UAAU,CAAC;MAC9CG,MAAI,CAACV,qBAAqB,CAAC,CAAC;IAAC;EACjC;EACA;AACJ;AACA;EACIW,kBAAkBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACnF,SAAS,CAACwB,MAAM;EAChC;EACA;AACJ;AACA;EACI4D,sBAAsBA,CAACL,UAAU,EAAE;IAC/B,OAAOM,aAAa,CAACN,UAAU,CAACO,IAAI,CAACjG,YAAY,CAAC,CAACkG,MAAM,CAAC,CAACC,SAAS,EAAEC,WAAW,KAAK;MAClF,MAAMC,YAAY,GAAGD,WAAW,CAACE,IAAI;MACrCD,YAAY,IAAIF,SAAS,CAAChR,IAAI,CAAC,IAAIxE,wBAAwB,CAAC0V,YAAY,EAAE,IAAI,CAAC9E,aAAa,CAAC,CAAC;MAC9F,OAAO4E,SAAS;IACpB,CAAC,EAAE,EAAE,CAAC;EACV;EACArB,gBAAgBA,CAAA,EAAG;IACf;IACA,IAAID,mBAAmB,GAAG,KAAK;IAC/B,IAAI,CAACzE,iBAAiB,CAAC3E,OAAO,CAAC2K,WAAW,IAAI;MAC1C,IAAIvW,wBAAwB,CAACuW,WAAW,CAAC,EAAE;QACvC,MAAM,IAAI/R,KAAK,CAAE,cAAa+R,WAAW,CAAC/D,IAAK,6BAA4B,GACtE,6EAA4E,CAAC;MACtF;MACAwC,mBAAmB,GAAGA,mBAAmB,IAAIzU,gCAAgC,CAACgW,WAAW,CAAC;MAC1F,MAAMpK,QAAQ,GAAG,IAAI,CAAC2E,SAAS,CAACjB,SAAS,CAACtK,OAAO,CAACgR,WAAW,CAAC;MAC9D,IAAIpK,QAAQ,KAAK,IAAI,EAAE;QACnB,MAAMoG,gBAAgB,CAACgE,WAAW,CAAC/D,IAAI,EAAE,WAAW,CAAC;MACzD;MACA,IAAI,CAACkE,eAAe,CAACpW,YAAY,EAAEiW,WAAW,CAAC;MAC/C,IAAIrW,iCAAiC,EAAE;QACnCC,YAAY,CAACkS,kBAAkB,CAACkE,WAAW,CAAC;MAChD;MACAxV,iBAAiB,CAACwV,WAAW,EAAEpK,QAAQ,CAAC;IAC5C,CAAC,CAAC;IACF,IAAI,CAACoE,iBAAiB,CAAC5B,KAAK,CAAC,CAAC;IAC9B,IAAI,CAAC6B,iBAAiB,CAAC5E,OAAO,CAAC2K,WAAW,IAAI;MAC1C,MAAMpK,QAAQ,GAAG,IAAI,CAAC2E,SAAS,CAAC+B,SAAS,CAACtN,OAAO,CAACgR,WAAW,CAAC;MAC9D,IAAIpK,QAAQ,KAAK,IAAI,EAAE;QACnB,MAAMoG,gBAAgB,CAACgE,WAAW,CAAC/D,IAAI,EAAE,WAAW,CAAC;MACzD;MACA,IAAI,CAACkE,eAAe,CAAC1V,WAAW,EAAEuV,WAAW,CAAC;MAC9CtV,iBAAiB,CAACsV,WAAW,EAAEpK,QAAQ,CAAC;IAC5C,CAAC,CAAC;IACF,IAAI,CAACqE,iBAAiB,CAAC7B,KAAK,CAAC,CAAC;IAC9B,IAAI,CAAC8B,YAAY,CAAC7E,OAAO,CAAC2K,WAAW,IAAI;MACrC,MAAMpK,QAAQ,GAAG,IAAI,CAAC2E,SAAS,CAAChI,IAAI,CAACvD,OAAO,CAACgR,WAAW,CAAC;MACzD,IAAIpK,QAAQ,KAAK,IAAI,EAAE;QACnB,MAAMoG,gBAAgB,CAACgE,WAAW,CAAC/D,IAAI,EAAE,MAAM,CAAC;MACpD;MACA,IAAI,CAACkE,eAAe,CAACxV,YAAY,EAAEqV,WAAW,CAAC;MAC/CpV,YAAY,CAACoV,WAAW,EAAEpK,QAAQ,CAAC;IACvC,CAAC,CAAC;IACF,IAAI,CAACsE,YAAY,CAAC9B,KAAK,CAAC,CAAC;IACzB,OAAOqG,mBAAmB;EAC9B;EACAM,qBAAqBA,CAAA,EAAG;IACpB,IAAI,IAAI,CAAC1E,iBAAiB,CAAC2D,IAAI,GAAG,CAAC,EAAE;MACjC;MACA;MACA;MACA,MAAMoC,gBAAgB,GAAG,IAAI,CAAC9E,cAAc,CAACzQ,WAAW,CAAC;MACzD,MAAMwV,eAAe,GAAG,IAAI,CAACC,iCAAiC,CAACF,gBAAgB,CAACvG,OAAO,CAAC;MACxF,IAAIwG,eAAe,CAACrC,IAAI,GAAG,CAAC,EAAE;QAC1BqC,eAAe,CAAChL,OAAO,CAACiK,UAAU,IAAI;UAClC,IAAI,CAAC3V,iCAAiC,EAAE;YACpC,IAAI,CAAC4W,qBAAqB,CAACjB,UAAU,EAAEzU,WAAW,EAAE,yBAAyB,CAAC;YAC9EyU,UAAU,CAACzU,WAAW,CAAC,CAAC2V,uBAAuB,GAAG,IAAI;UAC1D,CAAC,MACI;YACD5W,YAAY,CAACkS,kBAAkB,CAACwD,UAAU,CAAC;UAC/C;QACJ,CAAC,CAAC;MACN;IACJ;IACA,MAAMmB,aAAa,GAAG,IAAI3L,GAAG,CAAC,CAAC;IAC/B,MAAM4L,gBAAgB,GAAIpB,UAAU,IAAK;MACrC,IAAI,CAACmB,aAAa,CAACnK,GAAG,CAACgJ,UAAU,CAAC,EAAE;QAChC,MAAMqB,eAAe,GAAG3H,uBAAuB,CAACsG,UAAU,CAAC;QAC3D,MAAMsB,QAAQ,GAAGD,eAAe,GAAG,IAAI,CAACrF,cAAc,GAAGgE,UAAU;QACnEmB,aAAa,CAAClL,GAAG,CAAC+J,UAAU,EAAExU,oBAAoB,CAAC8V,QAAQ,CAAC,CAAC;MACjE;MACA,OAAOH,aAAa,CAACjP,GAAG,CAAC8N,UAAU,CAAC;IACxC,CAAC;IACD,IAAI,CAAC7E,sBAAsB,CAACpF,OAAO,CAAC,CAACiK,UAAU,EAAEuB,aAAa,KAAK;MAC/D,IAAIvB,UAAU,KAAK,IAAI,EAAE;QACrB,MAAMwB,WAAW,GAAGJ,gBAAgB,CAACpB,UAAU,CAAC;QAChD,IAAI,CAACiB,qBAAqB,CAACM,aAAa,EAAE9W,YAAY,EAAE,eAAe,CAAC;QACxE,IAAI,CAACwW,qBAAqB,CAACM,aAAa,EAAE9W,YAAY,EAAE,UAAU,CAAC;QACnEgB,2BAA2B,CAACgW,eAAe,CAACF,aAAa,CAAC,EAAEC,WAAW,CAAC;MAC5E;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,CAACP,qBAAqB,CAACM,aAAa,EAAE9W,YAAY,EAAE,OAAO,CAAC;IACpE,CAAC,CAAC;IACF,IAAI,CAAC0Q,sBAAsB,CAACrC,KAAK,CAAC,CAAC;EACvC;EACA4G,sBAAsBA,CAAA,EAAG;IACrB,MAAMgC,mBAAmB,GAAIC,KAAK,IAAMhJ,IAAI,IAAK;MAC7C,MAAMoB,QAAQ,GAAG4H,KAAK,KAAKlX,YAAY,GAAG,IAAI,CAACwQ,SAAS,CAACjB,SAAS,GAAG,IAAI,CAACiB,SAAS,CAAC+B,SAAS;MAC7F,MAAM1G,QAAQ,GAAGyD,QAAQ,CAACrK,OAAO,CAACiJ,IAAI,CAAC;MACvC,IAAI,IAAI,CAACiJ,oBAAoB,CAACtL,QAAQ,CAACkE,SAAS,CAAC,EAAE;QAC/C,IAAI,CAACqH,6BAA6B,CAAClJ,IAAI,EAAEgJ,KAAK,CAAC;MACnD;IACJ,CAAC;IACD,IAAI,CAAC9G,cAAc,CAAC9E,OAAO,CAAC2L,mBAAmB,CAACjX,YAAY,CAAC,CAAC;IAC9D,IAAI,CAACqQ,cAAc,CAAC/E,OAAO,CAAC2L,mBAAmB,CAACvW,WAAW,CAAC,CAAC;IAC7D,IAAI,CAAC0P,cAAc,CAAC/B,KAAK,CAAC,CAAC;IAC3B,IAAI,CAACgC,cAAc,CAAChC,KAAK,CAAC,CAAC;EAC/B;EACA;AACJ;AACA;AACA;EACImH,6BAA6BA,CAACtH,IAAI,EAAE;IAChC,MAAMmJ,QAAQ,GAAGC,qBAAqB,CAACpJ,IAAI,CAAC,IAAIqJ,UAAU,CAACrJ,IAAI,CAAC;IAChE;IACA;IACA;IACA;IACA,IAAI,CAACmJ,QAAQ,IAAI,IAAI,CAAClG,6BAA6B,CAAC5E,GAAG,CAAC2B,IAAI,CAAC,EAAE;MAC3D;IACJ;IACA,IAAI,CAACiD,6BAA6B,CAAC9H,GAAG,CAAC6E,IAAI,CAAC;IAC5C;IACA;IACA;IACA;IACA;IACA,MAAMsJ,WAAW,GAAGtJ,IAAI,CAACjN,WAAW,CAAC;IACrC;IACA,IAAI,IAAI,CAACiQ,wBAAwB,CAAC+C,IAAI,KAAK,CAAC,EACxC;IACJ,IAAIqD,qBAAqB,CAACpJ,IAAI,CAAC,EAAE;MAC7B;MACA,MAAMuF,GAAG,GAAGuD,eAAe,CAAC9I,IAAI,CAAC;MACjC,MAAMuJ,YAAY,GAAG5B,aAAa,CAACpC,GAAG,CAACgE,YAAY,IAAI,EAAE,CAAC;MAC1D,KAAK,MAAMC,UAAU,IAAID,YAAY,EAAE;QACnC,IAAI,CAACjC,6BAA6B,CAACkC,UAAU,CAAC;MAClD;IACJ,CAAC,MACI;MACD,MAAM3H,SAAS,GAAG,CACd,GAAGyH,WAAW,CAACzH,SAAS,EACxB,IAAI,IAAI,CAACkB,yBAAyB,CAACxJ,GAAG,CAACyG,IAAI,CAAC,IAAI,EAAE,CAAC,CACtD;MACD,IAAI,IAAI,CAACiJ,oBAAoB,CAACpH,SAAS,CAAC,EAAE;QACtC,IAAI,CAACqG,eAAe,CAACnV,WAAW,EAAEiN,IAAI,CAAC;QACvC,IAAI,CAACsI,qBAAqB,CAACtI,IAAI,EAAEjN,WAAW,EAAE,WAAW,CAAC;QAC1DuW,WAAW,CAACzH,SAAS,GAAG,IAAI,CAAC4H,sBAAsB,CAAC5H,SAAS,CAAC;MAClE;MACA;MACA,MAAM2B,SAAS,GAAGxD,IAAI,CAACpN,WAAW,CAAC;MACnC,MAAMgP,OAAO,GAAG+F,aAAa,CAACnE,SAAS,CAAC5B,OAAO,CAAC;MAChD,KAAK,MAAM8H,cAAc,IAAI9H,OAAO,EAAE;QAClC,IAAI,CAAC0F,6BAA6B,CAACoC,cAAc,CAAC;MACtD;MACA;MACA;MACA,KAAK,MAAMA,cAAc,IAAIC,OAAO,CAACL,WAAW,CAAC1H,OAAO,CAAC,EAAE;QACvD,IAAIgI,qBAAqB,CAACF,cAAc,CAAC,EAAE;UACvC,IAAI,CAAChH,aAAa,CAAC5L,IAAI,CAAC;YACpB+S,MAAM,EAAEH,cAAc;YACtBI,SAAS,EAAE,WAAW;YACtBC,aAAa,EAAEL,cAAc,CAAC7H;UAClC,CAAC,CAAC;UACF6H,cAAc,CAAC7H,SAAS,GAAG,IAAI,CAAC4H,sBAAsB,CAACC,cAAc,CAAC7H,SAAS,CAAC;QACpF;MACJ;IACJ;EACJ;EACAmF,iCAAiCA,CAAA,EAAG;IAChC,IAAI,CAAC3E,uBAAuB,CAACjF,OAAO,CAAC,CAACwI,MAAM,EAAE5F,IAAI,KAAKA,IAAI,CAAClO,YAAY,CAAC,CAAC8T,MAAM,GAAGA,MAAM,CAAC;IAC1F,IAAI,CAACvD,uBAAuB,CAAClC,KAAK,CAAC,CAAC;EACxC;EACAsD,cAAcA,CAACuG,GAAG,EAAE3C,UAAU,EAAE;IAC5B,KAAK,MAAMhN,KAAK,IAAI2P,GAAG,EAAE;MACrB,IAAIhM,KAAK,CAACC,OAAO,CAAC5D,KAAK,CAAC,EAAE;QACtB,IAAI,CAACoJ,cAAc,CAACpJ,KAAK,EAAEgN,UAAU,CAAC;MAC1C,CAAC,MACI;QACD,IAAI,CAAC4C,SAAS,CAAC5P,KAAK,EAAEgN,UAAU,CAAC;MACrC;IACJ;EACJ;EACApD,iBAAiBA,CAACL,QAAQ,EAAEjG,QAAQ,EAAE;IAClC;IACA,IAAI,CAACuK,eAAe,CAACtV,WAAW,EAAEgR,QAAQ,CAAC;IAC3C,IAAI,CAACsE,eAAe,CAACnV,WAAW,EAAE6Q,QAAQ,CAAC;IAC3C5Q,oBAAoB,CAAC4Q,QAAQ,EAAEjG,QAAQ,CAAC;EAC5C;EACAsM,SAASA,CAACjK,IAAI,EAAEqH,UAAU,EAAE;IACxB,MAAMhG,SAAS,GAAG,IAAI,CAACiB,SAAS,CAACjB,SAAS,CAACtK,OAAO,CAACiJ,IAAI,CAAC;IACxD,IAAIqB,SAAS,EAAE;MACX;MACA;MACA;MACA,IAAItP,gCAAgC,CAACiO,IAAI,CAAC,IAAI,CAACA,IAAI,CAACuE,cAAc,CAACzS,YAAY,CAAC,EAAE;QAC9E,IAAI,CAACiQ,iBAAiB,CAAC5G,GAAG,CAAC6E,IAAI,CAAC;MACpC;MACA,IAAI,CAACkC,cAAc,CAAC/G,GAAG,CAAC6E,IAAI,CAAC;MAC7B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAK,CAAC,IAAI,CAACwC,sBAAsB,CAACnE,GAAG,CAAC2B,IAAI,CAAC,IACvC,IAAI,CAACwC,sBAAsB,CAACjJ,GAAG,CAACyG,IAAI,CAAC,KAAKc,qBAAqB,CAACE,WAAW,EAAG;QAC9E,IAAI,CAACwB,sBAAsB,CAAClF,GAAG,CAAC0C,IAAI,EAAEqH,UAAU,CAAC;MACrD;MACA;IACJ;IACA,MAAMhD,SAAS,GAAG,IAAI,CAAC/B,SAAS,CAAC+B,SAAS,CAACtN,OAAO,CAACiJ,IAAI,CAAC;IACxD,IAAIqE,SAAS,EAAE;MACX,IAAI,CAACrE,IAAI,CAACuE,cAAc,CAAC/R,WAAW,CAAC,EAAE;QACnC,IAAI,CAACwP,iBAAiB,CAAC7G,GAAG,CAAC6E,IAAI,CAAC;MACpC;MACA,IAAI,CAACmC,cAAc,CAAChH,GAAG,CAAC6E,IAAI,CAAC;MAC7B;IACJ;IACA,MAAM1F,IAAI,GAAG,IAAI,CAACgI,SAAS,CAAChI,IAAI,CAACvD,OAAO,CAACiJ,IAAI,CAAC;IAC9C,IAAI1F,IAAI,IAAI,CAAC0F,IAAI,CAACuE,cAAc,CAAC7R,YAAY,CAAC,EAAE;MAC5C,IAAI,CAACuP,YAAY,CAAC9G,GAAG,CAAC6E,IAAI,CAAC;MAC3B;IACJ;EACJ;EACA0D,0BAA0BA,CAACsG,GAAG,EAAE;IAC5B;IACA;IACA;IACA;IACA,MAAME,aAAa,GAAG,IAAIpM,GAAG,CAAC,CAAC;IAC/B,MAAMqM,+BAA+B,GAAIH,GAAG,IAAK;MAC7C,KAAK,MAAM3P,KAAK,IAAI2P,GAAG,EAAE;QACrB,IAAIhM,KAAK,CAACC,OAAO,CAAC5D,KAAK,CAAC,EAAE;UACtB8P,+BAA+B,CAAC9P,KAAK,CAAC;QAC1C,CAAC,MACI,IAAI+P,cAAc,CAAC/P,KAAK,CAAC,EAAE;UAC5B,MAAMkL,GAAG,GAAGlL,KAAK,CAACuN,IAAI;UACtB,IAAIsC,aAAa,CAAC7L,GAAG,CAACkH,GAAG,CAAC,EAAE;YACxB;UACJ;UACA2E,aAAa,CAAC/O,GAAG,CAACoK,GAAG,CAAC;UACtB;UACA;UACA,IAAI,CAAC9B,cAAc,CAACkE,aAAa,CAACpC,GAAG,CAAC5D,YAAY,CAAC,EAAEtH,KAAK,CAAC;UAC3D8P,+BAA+B,CAACxC,aAAa,CAACpC,GAAG,CAAC3D,OAAO,CAAC,CAAC;UAC3DuI,+BAA+B,CAACxC,aAAa,CAACpC,GAAG,CAAC8E,OAAO,CAAC,CAAC;QAC/D,CAAC,MACI,IAAIT,qBAAqB,CAACvP,KAAK,CAAC,EAAE;UACnC8P,+BAA+B,CAAC,CAAC9P,KAAK,CAACuJ,QAAQ,CAAC,CAAC;QACrD,CAAC,MACI,IAAIwF,qBAAqB,CAAC/O,KAAK,CAAC,EAAE;UACnC,IAAI,CAAC4P,SAAS,CAAC5P,KAAK,EAAE,IAAI,CAAC;UAC3B,MAAMkL,GAAG,GAAGuD,eAAe,CAACzO,KAAK,CAAC;UAClC,IAAI6P,aAAa,CAAC7L,GAAG,CAACkH,GAAG,CAAC,EAAE;YACxB;UACJ;UACA2E,aAAa,CAAC/O,GAAG,CAACoK,GAAG,CAAC;UACtB,MAAMgE,YAAY,GAAG5B,aAAa,CAACpC,GAAG,CAACgE,YAAY,IAAI,EAAE,CAAC;UAC1DA,YAAY,CAACnM,OAAO,CAAEoM,UAAU,IAAK;YACjC;YACA;YACA;YACA;YACA,IAAIJ,qBAAqB,CAACI,UAAU,CAAC,IAAIY,cAAc,CAACZ,UAAU,CAAC,EAAE;cACjEW,+BAA+B,CAAC,CAACX,UAAU,CAAC,CAAC;YACjD,CAAC,MACI;cACD,IAAI,CAACS,SAAS,CAACT,UAAU,EAAE,IAAI,CAAC;YACpC;UACJ,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;IACDW,+BAA+B,CAACH,GAAG,CAAC;EACxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA3B,iCAAiCA,CAAC2B,GAAG,EAAE;IACnC,MAAMM,WAAW,GAAG,IAAIxM,GAAG,CAAC,CAAC;IAC7B,MAAMsK,eAAe,GAAG,IAAItK,GAAG,CAAC,CAAC;IACjC,MAAMyM,wBAAwB,GAAGA,CAACP,GAAG,EAAEQ,IAAI,KAAK;MAC5C,KAAK,MAAMnQ,KAAK,IAAI2P,GAAG,EAAE;QACrB,IAAIhM,KAAK,CAACC,OAAO,CAAC5D,KAAK,CAAC,EAAE;UACtB;UACA;UACAkQ,wBAAwB,CAAClQ,KAAK,EAAEmQ,IAAI,CAAC;QACzC,CAAC,MACI,IAAIJ,cAAc,CAAC/P,KAAK,CAAC,EAAE;UAC5B,IAAIiQ,WAAW,CAACjM,GAAG,CAAChE,KAAK,CAAC,EAAE;YACxB;YACA;YACA;YACA,IAAI+N,eAAe,CAAC/J,GAAG,CAAChE,KAAK,CAAC,EAAE;cAC5BmQ,IAAI,CAACpN,OAAO,CAACqN,IAAI,IAAIrC,eAAe,CAACjN,GAAG,CAACsP,IAAI,CAAC,CAAC;YACnD;YACA;UACJ;UACAH,WAAW,CAACnP,GAAG,CAACd,KAAK,CAAC;UACtB,IAAI,IAAI,CAAC+H,iBAAiB,CAAC/D,GAAG,CAAChE,KAAK,CAAC,EAAE;YACnCmQ,IAAI,CAACpN,OAAO,CAACqN,IAAI,IAAIrC,eAAe,CAACjN,GAAG,CAACsP,IAAI,CAAC,CAAC;UACnD;UACA;UACA,MAAMjH,SAAS,GAAGnJ,KAAK,CAACzH,WAAW,CAAC;UACpC2X,wBAAwB,CAAC5C,aAAa,CAACnE,SAAS,CAAC5B,OAAO,CAAC,EAAE4I,IAAI,CAACjM,MAAM,CAAClE,KAAK,CAAC,CAAC;QAClF;MACJ;IACJ,CAAC;IACDkQ,wBAAwB,CAACP,GAAG,EAAE,EAAE,CAAC;IACjC,OAAO5B,eAAe;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIF,eAAeA,CAAC7K,IAAI,EAAE2C,IAAI,EAAE;IACxB,IAAI,CAAC,IAAI,CAACyC,aAAa,CAACpE,GAAG,CAAC2B,IAAI,CAAC,EAAE;MAC/B,IAAI,CAACyC,aAAa,CAACnF,GAAG,CAAC0C,IAAI,EAAE,IAAInD,GAAG,CAAC,CAAC,CAAC;IAC3C;IACA,MAAM6N,WAAW,GAAG,IAAI,CAACjI,aAAa,CAAClJ,GAAG,CAACyG,IAAI,CAAC;IAChD,IAAI,CAAC0K,WAAW,CAACrM,GAAG,CAAChB,IAAI,CAAC,EAAE;MACxB,MAAMsN,UAAU,GAAGxL,MAAM,CAACO,wBAAwB,CAACM,IAAI,EAAE3C,IAAI,CAAC;MAC9DqN,WAAW,CAACpN,GAAG,CAACD,IAAI,EAAEsN,UAAU,CAAC;IACrC;EACJ;EACArC,qBAAqBA,CAACtI,IAAI,EAAE4K,QAAQ,EAAEd,SAAS,EAAE;IAC7C,MAAMvE,GAAG,GAAGvF,IAAI,CAAC4K,QAAQ,CAAC;IAC1B,MAAMb,aAAa,GAAGxE,GAAG,CAACuE,SAAS,CAAC;IACpC,IAAI,CAACpH,aAAa,CAAC5L,IAAI,CAAC;MAAE+S,MAAM,EAAEtE,GAAG;MAAEuE,SAAS;MAAEC;IAAc,CAAC,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;EACIxD,6BAA6BA,CAAA,EAAG;IAC5B,IAAI,IAAI,CAAC7E,gCAAgC,KAAK,IAAI,EAAE;MAChD,IAAI,CAACA,gCAAgC,GAAG,IAAI7E,GAAG,CAAC,CAAC;IACrD;IACA5J,yCAAyC,CAAC,CAAC,CAACmK,OAAO,CAAC,CAAC/C,KAAK,EAAEuE,GAAG,KAAK,IAAI,CAAC8C,gCAAgC,CAACpE,GAAG,CAACsB,GAAG,EAAEvE,KAAK,CAAC,CAAC;EAC9H;EACA;AACJ;AACA;AACA;AACA;EACIwQ,+BAA+BA,CAAA,EAAG;IAC9B,IAAI,IAAI,CAACnJ,gCAAgC,KAAK,IAAI,EAAE;MAChDxO,gCAAgC,CAAC,IAAI,CAACwO,gCAAgC,CAAC;MACvE,IAAI,CAACA,gCAAgC,GAAG,IAAI;IAChD;EACJ;EACAoJ,oBAAoBA,CAAA,EAAG;IACnB;IACA;IACAC,YAAY,CAAC,IAAI,CAACrI,aAAa,EAAGsI,EAAE,IAAK;MACrCA,EAAE,CAACnB,MAAM,CAACmB,EAAE,CAAClB,SAAS,CAAC,GAAGkB,EAAE,CAACjB,aAAa;IAC9C,CAAC,CAAC;IACF;IACA,IAAI,CAACtH,aAAa,CAACrF,OAAO,CAAC,CAAC6N,IAAI,EAAEjL,IAAI,KAAK;MACvC,IAAItO,iCAAiC,EAAE;QACnCC,YAAY,CAACkS,kBAAkB,CAAC7D,IAAI,CAAC;MACzC;MACAiL,IAAI,CAAC7N,OAAO,CAAC,CAAC8N,UAAU,EAAE7N,IAAI,KAAK;QAC/B,IAAI,CAAC6N,UAAU,EAAE;UACb;UACA;UACA;UACA;UACA;UACA;UACA,OAAOlL,IAAI,CAAC3C,IAAI,CAAC;QACrB,CAAC,MACI;UACD8B,MAAM,CAACgM,cAAc,CAACnL,IAAI,EAAE3C,IAAI,EAAE6N,UAAU,CAAC;QACjD;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IACF,IAAI,CAACzI,aAAa,CAACtC,KAAK,CAAC,CAAC;IAC1B,IAAI,CAAC8C,6BAA6B,CAAC9C,KAAK,CAAC,CAAC;IAC1C,IAAI,CAAC0K,+BAA+B,CAAC,CAAC;IACtC;IACAxY,YAAY,CAACD,kBAAkB,CAAC;EACpC;EACAyU,iBAAiBA,CAAA,EAAG;IAChB,MAAMuE,eAAe,CAAC;IAEtBpY,oBAAoB,CAACoY,eAAe,EAAE;MAClCvJ,SAAS,EAAE,CAAC,GAAG,IAAI,CAACiB,qBAAqB;IAC7C,CAAC,CAAC;IACF,MAAMjB,SAAS,GAAG,CACd1O,0BAA0B,CAAC,CAAC,EAC5B;MAAE0R,OAAO,EAAEzR,QAAQ;MAAEwR,UAAU,EAAEA,CAAA,KAAM,IAAIyG,cAAc,CAAC,IAAI;IAAE,CAAC,EACjE;MAAExG,OAAO,EAAExR,mBAAmB;MAAE2R,QAAQ,EAAE;QAAEsG,QAAQ,EAAE,IAAI,CAACnI;MAAmB;IAAE,CAAC,EACjF,GAAG,IAAI,CAACtB,SAAS,EACjB,GAAG,IAAI,CAACgB,iBAAiB,CAC5B;IACD,MAAMjB,OAAO,GAAG,CAACwJ,eAAe,EAAE,IAAI,CAAC3J,qBAAqB,EAAE,IAAI,CAACG,OAAO,IAAI,EAAE,CAAC;IACjF;IACA5O,oBAAoB,CAAC,IAAI,CAACqQ,cAAc,EAAE;MACtC1B,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BC,OAAO;MACPE,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBD;IACJ,CAAC,EAAE,sCAAuC,IAAI,CAAC;IAC/C;IACA,IAAI,CAACyF,6BAA6B,CAAC,IAAI,CAACjE,cAAc,CAAC;EAC3D;EACA,IAAI/J,QAAQA,CAAA,EAAG;IACX,IAAI,IAAI,CAACqJ,SAAS,KAAK,IAAI,EAAE;MACzB,OAAO,IAAI,CAACA,SAAS;IACzB;IACA,MAAMd,SAAS,GAAG,EAAE;IACpB,MAAM0J,eAAe,GAAG,IAAI,CAAC/J,QAAQ,CAAClI,QAAQ,CAACC,GAAG,CAACjG,gBAAgB,CAAC;IACpEiY,eAAe,CAACnO,OAAO,CAACoO,IAAI,IAAI;MAC5B,IAAIA,IAAI,CAAC3J,SAAS,EAAE;QAChBA,SAAS,CAAC/K,IAAI,CAAC0U,IAAI,CAAC3J,SAAS,CAAC;MAClC;IACJ,CAAC,CAAC;IACF,IAAI,IAAI,CAACe,iBAAiB,KAAK,IAAI,EAAE;MACjCf,SAAS,CAAC/K,IAAI,CAAC,GAAG,IAAI,CAAC8L,iBAAiB,CAAC;IAC7C;IACA,IAAI,CAACD,SAAS,GAAGpP,QAAQ,CAACkY,MAAM,CAAC;MAAE5J,SAAS;MAAE6J,MAAM,EAAE,IAAI,CAAClK,QAAQ,CAAClI;IAAS,CAAC,CAAC;IAC/E,OAAO,IAAI,CAACqJ,SAAS;EACzB;EACA;EACAgJ,0BAA0BA,CAACjH,QAAQ,EAAE;IACjC,MAAMD,KAAK,GAAGmH,gBAAgB,CAAClH,QAAQ,CAAC;IACxC,OAAO,IAAI,CAAC1B,wBAAwB,CAACzJ,GAAG,CAACkL,KAAK,CAAC,IAAI,IAAI;EAC3D;EACAoH,oBAAoBA,CAAChK,SAAS,EAAE;IAC5B,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAAChL,MAAM,IAAI,IAAI,CAACmM,wBAAwB,CAAC+C,IAAI,KAAK,CAAC,EAC3E,OAAO,EAAE;IACb;IACA;IACA;IACA;IACA;IACA,OAAO4D,OAAO,CAACmC,gBAAgB,CAACjK,SAAS,EAAG6C,QAAQ,IAAK,IAAI,CAACiH,0BAA0B,CAACjH,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;EAC9G;EACA+E,sBAAsBA,CAAC5H,SAAS,EAAE;IAC9B,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAAChL,MAAM,IAAI,IAAI,CAACmM,wBAAwB,CAAC+C,IAAI,KAAK,CAAC,EAC3E,OAAO,EAAE;IACb,MAAMgG,kBAAkB,GAAGD,gBAAgB,CAACjK,SAAS,CAAC;IACtD,MAAMhC,SAAS,GAAG,IAAI,CAACgM,oBAAoB,CAACE,kBAAkB,CAAC;IAC/D,MAAMC,mBAAmB,GAAG,CAAC,GAAGD,kBAAkB,EAAE,GAAGlM,SAAS,CAAC;IACjE,MAAMoM,KAAK,GAAG,EAAE;IAChB,MAAMC,uBAAuB,GAAG,IAAIpO,GAAG,CAAC,CAAC;IACzC;IACA;IACA;IACA;IACAiN,YAAY,CAACiB,mBAAmB,EAAGtH,QAAQ,IAAK;MAC5C,MAAMD,KAAK,GAAGmH,gBAAgB,CAAClH,QAAQ,CAAC;MACxC,IAAI,IAAI,CAAC1B,wBAAwB,CAAC3E,GAAG,CAACoG,KAAK,CAAC,EAAE;QAC1C,IAAI,CAACyH,uBAAuB,CAAC7N,GAAG,CAACoG,KAAK,CAAC,EAAE;UACrCyH,uBAAuB,CAAC/Q,GAAG,CAACsJ,KAAK,CAAC;UAClC;UACA;UACA;UACAwH,KAAK,CAACE,OAAO,CAAC;YAAE,GAAGzH,QAAQ;YAAEK,KAAK,EAAE;UAAM,CAAC,CAAC;QAChD;MACJ,CAAC,MACI;QACDkH,KAAK,CAACE,OAAO,CAACzH,QAAQ,CAAC;MAC3B;IACJ,CAAC,CAAC;IACF,OAAOuH,KAAK;EAChB;EACAhD,oBAAoBA,CAACpH,SAAS,EAAE;IAC5B,OAAO,IAAI,CAACgK,oBAAoB,CAAChK,SAAS,CAAC,CAAChL,MAAM,GAAG,CAAC;EAC1D;EACAqS,6BAA6BA,CAACnB,WAAW,EAAEiB,KAAK,EAAE;IAC9C,MAAMzD,GAAG,GAAGwC,WAAW,CAACiB,KAAK,CAAC;IAC9B,IAAIzD,GAAG,IAAIA,GAAG,CAAC6G,iBAAiB,EAAE;MAC9B,IAAI,CAAClE,eAAe,CAACc,KAAK,EAAEjB,WAAW,CAAC;MACxC,MAAM3G,QAAQ,GAAGmE,GAAG,CAAC6G,iBAAiB;MACtC,MAAMC,kBAAkB,GAAIxK,SAAS,IAAK,IAAI,CAAC4H,sBAAsB,CAAC5H,SAAS,CAAC;MAChF,IAAI,CAACyG,qBAAqB,CAACP,WAAW,EAAEiB,KAAK,EAAE,mBAAmB,CAAC;MACnEzD,GAAG,CAAC6G,iBAAiB,GAAIE,KAAK,IAAKlL,QAAQ,CAACkL,KAAK,EAAED,kBAAkB,CAAC;IAC1E;EACJ;AACJ;AACA,SAAS9J,aAAaA,CAAA,EAAG;EACrB,OAAO;IACHuB,MAAM,EAAE,IAAIjD,gBAAgB,CAAC,CAAC;IAC9BQ,SAAS,EAAE,IAAIV,iBAAiB,CAAC,CAAC;IAClC0D,SAAS,EAAE,IAAI3D,iBAAiB,CAAC,CAAC;IAClCpG,IAAI,EAAE,IAAIsG,YAAY,CAAC;EAC3B,CAAC;AACL;AACA,SAASwI,qBAAqBA,CAAC/O,KAAK,EAAE;EAClC,MAAMkL,GAAG,GAAGuD,eAAe,CAACzO,KAAK,CAAC;EAClC,OAAO,CAAC,CAACkL,GAAG,EAAEjE,UAAU;AAC5B;AACA,SAASwH,eAAeA,CAACzO,KAAK,EAAE;EAC5B,OAAOA,KAAK,CAAC4N,IAAI,IAAI,IAAI;AAC7B;AACA,SAASmC,cAAcA,CAAC/P,KAAK,EAAE;EAC3B,OAAOA,KAAK,CAACkK,cAAc,CAAC,MAAM,CAAC;AACvC;AACA,SAAS8E,UAAUA,CAAChP,KAAK,EAAE;EACvB,OAAO+P,cAAc,CAAC/P,KAAK,CAAC;AAChC;AACA,SAASsN,aAAaA,CAAC4E,OAAO,EAAE;EAC5B,OAAOA,OAAO,YAAYC,QAAQ,GAAGD,OAAO,CAAC,CAAC,GAAGA,OAAO;AAC5D;AACA,SAAS5C,OAAOA,CAAC8C,MAAM,EAAE;EACrB,MAAMC,GAAG,GAAG,EAAE;EACdD,MAAM,CAACrP,OAAO,CAAC/C,KAAK,IAAI;IACpB,IAAI2D,KAAK,CAACC,OAAO,CAAC5D,KAAK,CAAC,EAAE;MACtBqS,GAAG,CAAC5V,IAAI,CAAC,GAAG6S,OAAO,CAACtP,KAAK,CAAC,CAAC;IAC/B,CAAC,MACI;MACDqS,GAAG,CAAC5V,IAAI,CAACuD,KAAK,CAAC;IACnB;EACJ,CAAC,CAAC;EACF,OAAOqS,GAAG;AACd;AACA,SAASC,UAAUA,CAACtS,KAAK,EAAE;EACvB,OAAOA,KAAK;AAChB;AACA,SAASyR,gBAAgBA,CAACjK,SAAS,EAAE+K,KAAK,GAAGD,UAAU,EAAE;EACrD,MAAMD,GAAG,GAAG,EAAE;EACd,KAAK,IAAIhI,QAAQ,IAAI7C,SAAS,EAAE;IAC5B,IAAIrO,uBAAuB,CAACkR,QAAQ,CAAC,EAAE;MACnCA,QAAQ,GAAGA,QAAQ,CAACmI,UAAU;IAClC;IACA,IAAI7O,KAAK,CAACC,OAAO,CAACyG,QAAQ,CAAC,EAAE;MACzBgI,GAAG,CAAC5V,IAAI,CAAC,GAAGgV,gBAAgB,CAACpH,QAAQ,EAAEkI,KAAK,CAAC,CAAC;IAClD,CAAC,MACI;MACDF,GAAG,CAAC5V,IAAI,CAAC8V,KAAK,CAAClI,QAAQ,CAAC,CAAC;IAC7B;EACJ;EACA,OAAOgI,GAAG;AACd;AACA,SAASI,gBAAgBA,CAACpI,QAAQ,EAAEsE,KAAK,EAAE;EACvC,OAAOtE,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAACsE,KAAK,CAAC;AACtE;AACA,SAAS4C,gBAAgBA,CAAClH,QAAQ,EAAE;EAChC,OAAOoI,gBAAgB,CAACpI,QAAQ,EAAE,SAAS,CAAC,IAAIA,QAAQ;AAC5D;AACA,SAASkF,qBAAqBA,CAACvP,KAAK,EAAE;EAClC,OAAOA,KAAK,CAACkK,cAAc,CAAC,UAAU,CAAC;AAC3C;AACA,SAASwG,YAAYA,CAAC0B,MAAM,EAAE5X,EAAE,EAAE;EAC9B,KAAK,IAAIkY,GAAG,GAAGN,MAAM,CAAC5V,MAAM,GAAG,CAAC,EAAEkW,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;IAC/ClY,EAAE,CAAC4X,MAAM,CAACM,GAAG,CAAC,EAAEA,GAAG,CAAC;EACxB;AACJ;AACA,SAAShJ,gBAAgBA,CAACC,IAAI,EAAEgJ,YAAY,EAAE;EAC1C,OAAO,IAAIhX,KAAK,CAAE,GAAEgO,IAAK,wBAAuBgJ,YAAa,oCAAmC,CAAC;AACrG;AACA,MAAM3B,cAAc,CAAC;EACjB/V,WAAWA,CAAC2X,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACAC,iBAAiBA,CAAC7F,UAAU,EAAE;IAC1B,IAAI,CAAC4F,OAAO,CAAC7F,oBAAoB,CAACC,UAAU,CAAC;IAC7C,OAAO,IAAI5T,gBAAgB,CAAC4T,UAAU,CAAC;EAC3C;EACM8F,kBAAkBA,CAAC9F,UAAU,EAAE;IAAA,IAAA+F,MAAA;IAAA,OAAAxX,iBAAA;MACjC,MAAMwX,MAAI,CAACH,OAAO,CAAC1F,qBAAqB,CAACF,UAAU,CAAC;MACpD,OAAO,IAAI5T,gBAAgB,CAAC4T,UAAU,CAAC;IAAC;EAC5C;EACAgG,iCAAiCA,CAAChG,UAAU,EAAE;IAC1C,MAAMiG,eAAe,GAAG,IAAI,CAACJ,iBAAiB,CAAC7F,UAAU,CAAC;IAC1D,MAAMkG,kBAAkB,GAAG,IAAI,CAACN,OAAO,CAACvF,sBAAsB,CAACL,UAAU,CAAC;IAC1E,OAAO,IAAI3T,4BAA4B,CAAC4Z,eAAe,EAAEC,kBAAkB,CAAC;EAChF;EACMC,kCAAkCA,CAACnG,UAAU,EAAE;IAAA,IAAAoG,MAAA;IAAA,OAAA7X,iBAAA;MACjD,MAAM0X,eAAe,SAASG,MAAI,CAACN,kBAAkB,CAAC9F,UAAU,CAAC;MACjE,MAAMkG,kBAAkB,GAAGE,MAAI,CAACR,OAAO,CAACvF,sBAAsB,CAACL,UAAU,CAAC;MAC1E,OAAO,IAAI3T,4BAA4B,CAAC4Z,eAAe,EAAEC,kBAAkB,CAAC;IAAC;EACjF;EACAG,UAAUA,CAAA,EAAG,CAAE;EACfC,aAAaA,CAAC3N,IAAI,EAAE,CAAE;EACtB4N,WAAWA,CAACvG,UAAU,EAAE;IACpB,MAAMwG,IAAI,GAAG,IAAI,CAACZ,OAAO,CAACxF,kBAAkB,CAAC,CAAC,CAAC1Q,OAAO,CAACsQ,UAAU,CAAC;IAClE,OAAOwG,IAAI,IAAIA,IAAI,CAAC5O,EAAE,IAAI5F,SAAS;EACvC;AACJ;;AAEA;AACA,IAAIyU,kBAAkB,GAAG,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAA,EAAG;EAClB,OAAOC,WAAW,CAACC,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,WAAW,CAAC;EACd1Y,WAAWA,CAAA,EAAG;IACV;AACR;AACA;AACA;IACQ,IAAI,CAAC4Y,2BAA2B,GAAG1W,4BAA4B;IAC/D;IACA,IAAI,CAACgK,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACoC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACuK,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,eAAe,GAAG,EAAE;IACzB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,wBAAwB,GAAG,KAAK;EACzC;EAAC,QAAAC,CAAA,GACQ,IAAI,CAACC,SAAS,GAAG,IAAI;EAC9B,WAAWP,QAAQA,CAAA,EAAG;IAClB,OAAOD,WAAW,CAACQ,SAAS,GAAGR,WAAW,CAACQ,SAAS,IAAI,IAAIR,WAAW,CAAC,CAAC;EAC7E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOS,mBAAmBA,CAAC7K,QAAQ,EAAEpC,QAAQ,EAAEkN,OAAO,EAAE;IACpD,MAAMzB,OAAO,GAAGe,WAAW,CAACC,QAAQ;IACpChB,OAAO,CAACwB,mBAAmB,CAAC7K,QAAQ,EAAEpC,QAAQ,EAAEkN,OAAO,CAAC;IACxD,OAAOzB,OAAO;EAClB;EACA;AACJ;AACA;AACA;AACA;EACI,OAAO0B,oBAAoBA,CAAA,EAAG;IAC1BX,WAAW,CAACC,QAAQ,CAACU,oBAAoB,CAAC,CAAC;EAC/C;EACA,OAAOC,iBAAiBA,CAACC,MAAM,EAAE;IAC7B,OAAOb,WAAW,CAACC,QAAQ,CAACW,iBAAiB,CAACC,MAAM,CAAC;EACzD;EACA;AACJ;AACA;AACA;EACI,OAAOtL,sBAAsBA,CAACC,SAAS,EAAE;IACrC,OAAOwK,WAAW,CAACC,QAAQ,CAAC1K,sBAAsB,CAACC,SAAS,CAAC;EACjE;EACA;AACJ;AACA;AACA;AACA;EACI,OAAO6C,iBAAiBA,CAAA,EAAG;IACvB,OAAO2H,WAAW,CAACC,QAAQ,CAAC5H,iBAAiB,CAAC,CAAC;EACnD;EACA,OAAO1C,cAAcA,CAACC,QAAQ,EAAE3G,QAAQ,EAAE;IACtC,OAAO+Q,WAAW,CAACC,QAAQ,CAACtK,cAAc,CAACC,QAAQ,EAAE3G,QAAQ,CAAC;EAClE;EACA,OAAOiH,iBAAiBA,CAAC7C,SAAS,EAAEpE,QAAQ,EAAE;IAC1C,OAAO+Q,WAAW,CAACC,QAAQ,CAAC/J,iBAAiB,CAAC7C,SAAS,EAAEpE,QAAQ,CAAC;EACtE;EACA,OAAOmH,iBAAiBA,CAACC,SAAS,EAAEpH,QAAQ,EAAE;IAC1C,OAAO+Q,WAAW,CAACC,QAAQ,CAAC7J,iBAAiB,CAACC,SAAS,EAAEpH,QAAQ,CAAC;EACtE;EACA,OAAOqH,YAAYA,CAAChK,IAAI,EAAE2C,QAAQ,EAAE;IAChC,OAAO+Q,WAAW,CAACC,QAAQ,CAAC3J,YAAY,CAAChK,IAAI,EAAE2C,QAAQ,CAAC;EAC5D;EACA,OAAO6R,gBAAgBA,CAACzN,SAAS,EAAEiE,QAAQ,EAAE;IACzC,OAAO0I,WAAW,CAACC,QAAQ,CAACa,gBAAgB,CAACzN,SAAS,EAAEiE,QAAQ,CAAC;EACrE;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOD,kCAAkCA,CAAChE,SAAS,EAAEiE,QAAQ,EAAE;IAC3D,OAAO0I,WAAW,CAACC,QAAQ,CAAC5I,kCAAkC,CAAChE,SAAS,EAAEiE,QAAQ,CAAC;EACvF;EACA,OAAOd,gBAAgBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACrC,OAAOsJ,WAAW,CAACC,QAAQ,CAACzJ,gBAAgB,CAACC,KAAK,EAAEC,QAAQ,CAAC;EACjE;EACA,OAAOjU,MAAMA,CAACgU,KAAK,EAAEsK,aAAa,EAAEC,KAAK,EAAE;IACvC,OAAOhB,WAAW,CAACC,QAAQ,CAACxd,MAAM,CAACgU,KAAK,EAAEsK,aAAa,EAAEpb,kBAAkB,CAACqb,KAAK,CAAC,CAAC;EACvF;EACA;EACA,OAAOzV,GAAGA,CAACkL,KAAK,EAAEsK,aAAa,GAAGxb,QAAQ,CAAC0b,kBAAkB,EAAED,KAAK,GAAGpb,WAAW,CAACsb,OAAO,EAAE;IACxF,OAAOlB,WAAW,CAACC,QAAQ,CAACxd,MAAM,CAACgU,KAAK,EAAEsK,aAAa,EAAEC,KAAK,CAAC;EACnE;EACA;AACJ;AACA;AACA;AACA;EACI,OAAO7a,qBAAqBA,CAACU,EAAE,EAAE;IAC7B,OAAOmZ,WAAW,CAACC,QAAQ,CAAC9Z,qBAAqB,CAACU,EAAE,CAAC;EACzD;EACA,OAAOsa,eAAeA,CAAC9N,SAAS,EAAE;IAC9B,OAAO2M,WAAW,CAACC,QAAQ,CAACkB,eAAe,CAAC9N,SAAS,CAAC;EAC1D;EACA,OAAO+N,kBAAkBA,CAAA,EAAG;IACxB,OAAOpB,WAAW,CAACC,QAAQ,CAACmB,kBAAkB,CAAC,CAAC;EACpD;EACA,OAAOC,OAAOA,CAACC,MAAM,EAAEza,EAAE,EAAE0a,OAAO,EAAE;IAChC,OAAOvB,WAAW,CAACC,QAAQ,CAACoB,OAAO,CAACC,MAAM,EAAEza,EAAE,EAAE0a,OAAO,CAAC;EAC5D;EACA,WAAW/N,QAAQA,CAAA,EAAG;IAClB,OAAOwM,WAAW,CAACC,QAAQ,CAACzM,QAAQ;EACxC;EACA,WAAWoC,QAAQA,CAAA,EAAG;IAClB,OAAOoK,WAAW,CAACC,QAAQ,CAACrK,QAAQ;EACxC;EACA,OAAO4L,YAAYA,CAAA,EAAG;IAClB,OAAOxB,WAAW,CAACC,QAAQ,CAACuB,YAAY,CAAC,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIf,mBAAmBA,CAAC7K,QAAQ,EAAEpC,QAAQ,EAAEkN,OAAO,EAAE;IAC7C,IAAI,IAAI,CAAClN,QAAQ,IAAI,IAAI,CAACoC,QAAQ,EAAE;MAChC,MAAM,IAAI5N,KAAK,CAAC,8DAA8D,CAAC;IACnF;IACAgY,WAAW,CAACyB,2BAA2B,GAAGf,OAAO,EAAEgB,QAAQ;IAC3D1B,WAAW,CAAC2B,wCAAwC,GAAGjB,OAAO,EAAEkB,sBAAsB;IACtF5B,WAAW,CAAC6B,0CAA0C,GAAGnB,OAAO,EAAEoB,wBAAwB;IAC1F,IAAI,CAACtO,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACoC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACuK,SAAS,GAAG,IAAI5M,eAAe,CAAC,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACoC,QAAQ,CAAC;IAClE;IACA;IACA;IACA;IACA/P,oCAAoC,CAAC,IAAI,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACI8a,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAACS,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAACjB,SAAS,GAAG,IAAI;IACrB,IAAI,CAAC3M,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACoC,QAAQ,GAAG,IAAI;IACpBoK,WAAW,CAACyB,2BAA2B,GAAGpW,SAAS;IACnDxF,oCAAoC,CAAC,KAAK,CAAC;EAC/C;EACAub,kBAAkBA,CAAA,EAAG;IACjB,IAAI,CAACW,8BAA8B,CAAC,CAAC;IACrCjc,wBAAwB,CAAC,CAAC;IAC1B,IAAI,IAAI,CAACqa,SAAS,KAAK,IAAI,EAAE;MACzB,IAAI,CAAC6B,QAAQ,CAAClF,oBAAoB,CAAC,CAAC;IACxC;IACA,IAAI,CAACqD,SAAS,GAAG,IAAI5M,eAAe,CAAC,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACoC,QAAQ,CAAC;IAClE;IACA7P,4BAA4B,CAAC,IAAI,CAACkc,qCAAqC,IAAI3Y,iCAAiC,CAAC;IAC7G;IACAtD,6BAA6B,CAAC,IAAI,CAACkc,uCAAuC,IAAI3Y,mCAAmC,CAAC;IAClH;IACA;IACA;IACA,IAAI;MACA,IAAI,CAAC4Y,qBAAqB,CAAC,CAAC;IAChC,CAAC,SACO;MACJ,IAAI;QACA,IAAI,IAAI,CAACC,2BAA2B,CAAC,CAAC,EAAE;UACpC,IAAI,CAACC,qBAAqB,CAAC,CAAC;QAChC;MACJ,CAAC,SACO;QACJ,IAAI,CAACjC,cAAc,GAAG,IAAI;QAC1B,IAAI,CAACkC,wBAAwB,GAAGjX,SAAS;QACzC,IAAI,CAACkX,qCAAqC,GAAGlX,SAAS;QACtD,IAAI,CAACmX,uCAAuC,GAAGnX,SAAS;QACxD,IAAI,CAAC6U,2BAA2B,GAAG1W,4BAA4B;MACnE;IACJ;IACA,OAAO,IAAI;EACf;EACAoX,iBAAiBA,CAACC,MAAM,EAAE;IACtB,IAAIA,MAAM,CAAC4B,MAAM,IAAI,IAAI,EAAE;MACvB,MAAM,IAAIza,KAAK,CAAC,oDAAoD,CAAC;IACzE;IACA,IAAI6Y,MAAM,CAAChN,SAAS,KAAKxI,SAAS,EAAE;MAChC,IAAI,CAAC2W,QAAQ,CAAC1M,oBAAoB,CAACuL,MAAM,CAAChN,SAAS,CAAC;IACxD;IACA,OAAO,IAAI;EACf;EACA0B,sBAAsBA,CAACC,SAAS,EAAE;IAC9B,IAAI,CAACkN,qBAAqB,CAAC,gCAAgC,EAAE,2BAA2B,CAAC;IACzF;IACA;IACA;IACA;IACA,IAAI,CAACX,8BAA8B,CAAC,CAAC;IACrC;IACA;IACA,IAAI,CAACO,wBAAwB,GAAG9M,SAAS,CAACkM,QAAQ;IAClD,IAAI,CAACa,qCAAqC,GAAG/M,SAAS,CAACoM,sBAAsB;IAC7E,IAAI,CAACY,uCAAuC,GAAGhN,SAAS,CAACsM,wBAAwB;IACjF,IAAI,CAAC5B,2BAA2B,GAAG1K,SAAS,CAACL,kBAAkB,IAAI3L,4BAA4B;IAC/F;IACA;IACA,IAAI,CAACyY,qCAAqC,GAAGhc,4BAA4B,CAAC,CAAC;IAC3EF,4BAA4B,CAAC,IAAI,CAAC4c,iCAAiC,CAAC,CAAC,CAAC;IACtE,IAAI,CAACT,uCAAuC,GAAGhc,6BAA6B,CAAC,CAAC;IAC9EF,6BAA6B,CAAC,IAAI,CAAC4c,mCAAmC,CAAC,CAAC,CAAC;IACzE,IAAI,CAACZ,QAAQ,CAACzM,sBAAsB,CAACC,SAAS,CAAC;IAC/C,OAAO,IAAI;EACf;EACA6C,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAAC2J,QAAQ,CAAC3J,iBAAiB,CAAC,CAAC;EAC5C;EACA5V,MAAMA,CAACgU,KAAK,EAAEsK,aAAa,EAAEC,KAAK,EAAE;IAChC,IAAIvK,KAAK,KAAKoM,OAAO,EAAE;MACnB,OAAO,IAAI;IACf;IACA,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpB,MAAMC,MAAM,GAAG,IAAI,CAAC7N,aAAa,CAAC5J,QAAQ,CAACC,GAAG,CAACkL,KAAK,EAAEqM,SAAS,EAAEnd,kBAAkB,CAACqb,KAAK,CAAC,CAAC;IAC3F,OAAO+B,MAAM,KAAKD,SAAS,GAAG,IAAI,CAACd,QAAQ,CAAC1W,QAAQ,CAACC,GAAG,CAACkL,KAAK,EAAEsK,aAAa,EAAEC,KAAK,CAAC,GACjF+B,MAAM;EACd;EACA;EACAxX,GAAGA,CAACkL,KAAK,EAAEsK,aAAa,GAAGxb,QAAQ,CAAC0b,kBAAkB,EAAED,KAAK,GAAGpb,WAAW,CAACsb,OAAO,EAAE;IACjF,OAAO,IAAI,CAACze,MAAM,CAACgU,KAAK,EAAEsK,aAAa,EAAEC,KAAK,CAAC;EACnD;EACA7a,qBAAqBA,CAACU,EAAE,EAAE;IACtB,OAAOV,qBAAqB,CAAC,IAAI,CAAC1D,MAAM,CAAC2D,mBAAmB,CAAC,EAAES,EAAE,CAAC;EACtE;EACAwa,OAAOA,CAACC,MAAM,EAAEza,EAAE,EAAE0a,OAAO,EAAE;IACzB,MAAMyB,MAAM,GAAG1B,MAAM,CAAC2B,GAAG,CAACC,CAAC,IAAI,IAAI,CAACzgB,MAAM,CAACygB,CAAC,CAAC,CAAC;IAC9C,OAAOrc,EAAE,CAACsc,KAAK,CAAC5B,OAAO,EAAEyB,MAAM,CAAC;EACpC;EACArN,cAAcA,CAACC,QAAQ,EAAE3G,QAAQ,EAAE;IAC/B,IAAI,CAACyT,qBAAqB,CAAC,gBAAgB,EAAE,0BAA0B,CAAC;IACxE,IAAI,CAACV,QAAQ,CAACrM,cAAc,CAACC,QAAQ,EAAE3G,QAAQ,CAAC;IAChD,OAAO,IAAI;EACf;EACAiH,iBAAiBA,CAAC7C,SAAS,EAAEpE,QAAQ,EAAE;IACnC,IAAI,CAACyT,qBAAqB,CAAC,mBAAmB,EAAE,6BAA6B,CAAC;IAC9E,IAAI,CAACV,QAAQ,CAAC9L,iBAAiB,CAAC7C,SAAS,EAAEpE,QAAQ,CAAC;IACpD,OAAO,IAAI;EACf;EACAoI,kCAAkCA,CAAChE,SAAS,EAAEiE,QAAQ,EAAE;IACpD,IAAI,CAACoL,qBAAqB,CAAC,4CAA4C,EAAE,6EAA6E,CAAC;IACvJ,IAAI,CAACV,QAAQ,CAAC3K,kCAAkC,CAAChE,SAAS,EAAEiE,QAAQ,CAAC;IACrE,OAAO,IAAI;EACf;EACAlB,iBAAiBA,CAACC,SAAS,EAAEpH,QAAQ,EAAE;IACnC,IAAI,CAACyT,qBAAqB,CAAC,mBAAmB,EAAE,6BAA6B,CAAC;IAC9E,IAAI,CAACV,QAAQ,CAAC5L,iBAAiB,CAACC,SAAS,EAAEpH,QAAQ,CAAC;IACpD,OAAO,IAAI;EACf;EACAqH,YAAYA,CAAChK,IAAI,EAAE2C,QAAQ,EAAE;IACzB,IAAI,CAACyT,qBAAqB,CAAC,cAAc,EAAE,wBAAwB,CAAC;IACpE,IAAI,CAACV,QAAQ,CAAC1L,YAAY,CAAChK,IAAI,EAAE2C,QAAQ,CAAC;IAC1C,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACIuH,gBAAgBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC9B,IAAI,CAACgM,qBAAqB,CAAC,kBAAkB,EAAE,mBAAmB,CAAC;IACnE,IAAI,CAACV,QAAQ,CAACxL,gBAAgB,CAACC,KAAK,EAAEC,QAAQ,CAAC;IAC/C,OAAO,IAAI;EACf;EACAoK,gBAAgBA,CAACzN,SAAS,EAAEiE,QAAQ,EAAE;IAClC,OAAO,IAAI,CAACpB,iBAAiB,CAAC7C,SAAS,EAAE;MAAE/D,GAAG,EAAE;QAAEgI,QAAQ;QAAE8L,WAAW,EAAE;MAAK;IAAE,CAAC,CAAC;EACtF;EACAjC,eAAeA,CAACnP,IAAI,EAAE;IAClB,MAAMqR,qBAAqB,GAAG,IAAI,CAAC5gB,MAAM,CAACiH,qBAAqB,CAAC;IAChE,MAAM4Z,QAAQ,GAAI,OAAMxD,kBAAkB,EAAG,EAAC;IAC9CuD,qBAAqB,CAAC1Z,iBAAiB,CAAC2Z,QAAQ,CAAC;IACjD,IAAI9f,wBAAwB,CAACwO,IAAI,CAAC,EAAE;MAChC,MAAM,IAAIhK,KAAK,CAAE,cAAagK,IAAI,CAACgE,IAAK,6BAA4B,GAC/D,6EAA4E,CAAC;IACtF;IACA,MAAMgE,YAAY,GAAGhI,IAAI,CAACiI,IAAI;IAC9B,IAAI,CAACD,YAAY,EAAE;MACf,MAAM,IAAIhS,KAAK,CAAE,kBAAiB9E,UAAU,CAAC8O,IAAI,CAAE,0BAAyB,CAAC;IACjF;IACA,MAAMuR,gBAAgB,GAAG,IAAIjf,wBAAwB,CAAC0V,YAAY,CAAC;IACnE,MAAMwJ,aAAa,GAAGA,CAAA,KAAM;MACxB,MAAMtZ,YAAY,GAAGqZ,gBAAgB,CAAC9F,MAAM,CAAClY,QAAQ,CAACke,IAAI,EAAE,EAAE,EAAG,IAAGH,QAAS,EAAC,EAAE,IAAI,CAACpO,aAAa,CAAC;MACnG,OAAO,IAAI,CAAC/O,qBAAqB,CAAC,MAAM;QACpC,MAAMud,YAAY,GAAG,IAAI,CAACjhB,MAAM,CAAC4D,yBAAyB,EAAE,IAAI,CAAC,KAAK,IAAI;QAC1E,MAAMsd,OAAO,GAAGD,YAAY,GAAG,IAAI/X,yBAAyB,CAACzB,YAAY,CAAC,GACtE,IAAI0C,iCAAiC,CAAC1C,YAAY,CAAC;QACvDyZ,OAAO,CAAC5X,UAAU,CAAC,CAAC;QACpB,OAAO4X,OAAO;MAClB,CAAC,CAAC;IACN,CAAC;IACD,MAAMC,QAAQ,GAAG,IAAI,CAACnhB,MAAM,CAACuH,wBAAwB,EAAE,KAAK,CAAC;IAC7D,MAAMS,MAAM,GAAGmZ,QAAQ,GAAG,IAAI,GAAG,IAAI,CAACnhB,MAAM,CAACG,MAAM,EAAE,IAAI,CAAC;IAC1D,MAAM+gB,OAAO,GAAGlZ,MAAM,GAAGA,MAAM,CAACoD,GAAG,CAAC2V,aAAa,CAAC,GAAGA,aAAa,CAAC,CAAC;IACpE,IAAI,CAACnD,eAAe,CAACvX,IAAI,CAAC6a,OAAO,CAAC;IAClC,OAAOA,OAAO;EAClB;EACA;AACJ;AACA;AACA;EACI,IAAI3B,QAAQA,CAAA,EAAG;IACX,IAAI,IAAI,CAAC7B,SAAS,KAAK,IAAI,EAAE;MACzB,MAAM,IAAInY,KAAK,CAAE,kDAAiD,CAAC;IACvE;IACA,OAAO,IAAI,CAACmY,SAAS;EACzB;EACA;AACJ;AACA;AACA;EACI,IAAIjL,aAAaA,CAAA,EAAG;IAChB,IAAI,IAAI,CAACkL,cAAc,KAAK,IAAI,EAAE;MAC9B,IAAI,CAACA,cAAc,GAAG,IAAI,CAAC4B,QAAQ,CAACpJ,QAAQ,CAAC,CAAC;IAClD;IACA,OAAO,IAAI,CAACwH,cAAc;EAC9B;EACAsC,qBAAqBA,CAACmB,UAAU,EAAEC,iBAAiB,EAAE;IACjD,IAAI,IAAI,CAAC1D,cAAc,KAAK,IAAI,EAAE;MAC9B,MAAM,IAAIpY,KAAK,CAAE,UAAS8b,iBAAkB,uDAAsD,GAC7F,mDAAkDD,UAAW,KAAI,CAAC;IAC3E;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI9B,8BAA8BA,CAAA,EAAG;IAC7B;IACA;IACA,IAAI,CAAC,IAAI,CAACzB,wBAAwB,IAAI,IAAI,CAACF,cAAc,KAAK,IAAI,EAAE;MAChE9Z,wCAAwC,CAAC,CAAC;IAC9C;IACA,IAAI,CAACga,wBAAwB,GAAG,IAAI;EACxC;EACA6B,qBAAqBA,CAAA,EAAG;IACpB,IAAI4B,UAAU,GAAG,CAAC;IAClB,IAAI,CAAC1D,eAAe,CAACjR,OAAO,CAAEuU,OAAO,IAAK;MACtC,IAAI;QACAA,OAAO,CAACjY,OAAO,CAAC,CAAC;MACrB,CAAC,CACD,OAAOsY,CAAC,EAAE;QACND,UAAU,EAAE;QACZE,OAAO,CAACrW,KAAK,CAAC,mCAAmC,EAAE;UAC/CyF,SAAS,EAAEsQ,OAAO,CAAC5Y,iBAAiB;UACpCmZ,UAAU,EAAEF;QAChB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IACF,IAAI,CAAC3D,eAAe,GAAG,EAAE;IACzB,IAAI0D,UAAU,GAAG,CAAC,IAAI,IAAI,CAACI,2BAA2B,CAAC,CAAC,EAAE;MACtD,MAAMnc,KAAK,CAAE,GAAE+b,UAAW,IAAIA,UAAU,KAAK,CAAC,GAAG,WAAW,GAAG,YAAc,GAAE,GAC1E,6BAA4B,CAAC;IACtC;EACJ;EACAI,2BAA2BA,CAAA,EAAG;IAC1B,MAAMC,eAAe,GAAG,IAAI,CAAC9B,wBAAwB;IACrD,MAAM+B,kBAAkB,GAAGrE,WAAW,CAACyB,2BAA2B;IAClE;IACA,IAAI,CAAC2C,eAAe,IAAI,CAACC,kBAAkB,EAAE;MACzC,OAAOhb,0CAA0C;IACrD;IACA;IACA,OAAO+a,eAAe,EAAEE,aAAa,IAAID,kBAAkB,EAAEC,aAAa,IACtE,IAAI,CAAClC,2BAA2B,CAAC,CAAC;EAC1C;EACAO,iCAAiCA,CAAA,EAAG;IAChC;IACA,OAAO,IAAI,CAACJ,qCAAqC,IAC7CvC,WAAW,CAAC2B,wCAAwC,IAAIrY,iCAAiC;EACjG;EACAsZ,mCAAmCA,CAAA,EAAG;IAClC;IACA,OAAO,IAAI,CAACJ,uCAAuC,IAC/CxC,WAAW,CAAC6B,0CAA0C,IACtDtY,mCAAmC;EAC3C;EACA6Y,2BAA2BA,CAAA,EAAG;IAC1B,OAAO,IAAI,CAACE,wBAAwB,EAAEiC,gBAAgB,IAClDvE,WAAW,CAACyB,2BAA2B,EAAE8C,gBAAgB,IACzDlb,0CAA0C;EAClD;EACAmb,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACtE,2BAA2B;EAC3C;EACAmC,qBAAqBA,CAAA,EAAG;IACpB;IACA,IAAI,IAAI,CAACjC,cAAc,KAAK,IAAI,EAAE;MAC9B;IACJ;IACA;IACA;IACA,MAAMqE,YAAY,GAAG,IAAI,CAAChiB,MAAM,CAACiH,qBAAqB,CAAC;IACvD,IAAI;MACA,IAAI,CAAC0W,cAAc,CAAC1U,OAAO,CAAC,CAAC;IACjC,CAAC,CACD,OAAOsY,CAAC,EAAE;MACN,IAAI,IAAI,CAACG,2BAA2B,CAAC,CAAC,EAAE;QACpC,MAAMH,CAAC;MACX,CAAC,MACI;QACDC,OAAO,CAACrW,KAAK,CAAC,0CAA0C,EAAE;UACtDyF,SAAS,EAAE,IAAI,CAAC+M,cAAc,CAACpV,QAAQ;UACvCkZ,UAAU,EAAEF;QAChB,CAAC,CAAC;MACN;IACJ,CAAC,SACO;MACJS,YAAY,CAAC5a,qBAAqB,GAAG,CAAC;IAC1C;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI2X,YAAYA,CAAA,EAAG;IACX,IAAI,CAAC/e,MAAM,CAACI,gBAAgB,CAAC,CAACoJ,KAAK,CAAC,CAAC;EACzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4W,OAAO,GAAG7C,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASvd,MAAMA,CAAC6e,MAAM,EAAEza,EAAE,EAAE;EACxB,MAAMoY,OAAO,GAAGe,WAAW,CAACC,QAAQ;EACpC;EACA,OAAO,YAAY;IACf,OAAOhB,OAAO,CAACoC,OAAO,CAACC,MAAM,EAAEza,EAAE,EAAE,IAAI,CAAC;EAC5C,CAAC;AACL;AACA;AACA;AACA;AACA,MAAM6d,kBAAkB,CAAC;EACrBpd,WAAWA,CAACqd,UAAU,EAAE;IACpB,IAAI,CAACA,UAAU,GAAGA,UAAU;EAChC;EACAC,UAAUA,CAAA,EAAG;IACT,MAAMpP,SAAS,GAAG,IAAI,CAACmP,UAAU,CAAC,CAAC;IACnC,IAAInP,SAAS,EAAE;MACXwK,WAAW,CAACzK,sBAAsB,CAACC,SAAS,CAAC;IACjD;EACJ;EACA/S,MAAMA,CAAC6e,MAAM,EAAEza,EAAE,EAAE;IACf,MAAMge,IAAI,GAAG,IAAI;IACjB;IACA,OAAO,YAAY;MACfA,IAAI,CAACD,UAAU,CAAC,CAAC;MACjB,OAAOniB,MAAM,CAAC6e,MAAM,EAAEza,EAAE,CAAC,CAACie,IAAI,CAAC,IAAI,CAAC;IACxC,CAAC;EACL;AACJ;AACA,SAASC,UAAUA,CAACvP,SAAS,EAAE3O,EAAE,EAAE;EAC/B,IAAIA,EAAE,EAAE;IACJ;IACA,OAAO,YAAY;MACf,MAAMoY,OAAO,GAAGe,WAAW,CAACC,QAAQ;MACpC,IAAIzK,SAAS,EAAE;QACXyJ,OAAO,CAAC1J,sBAAsB,CAACC,SAAS,CAAC;MAC7C;MACA,OAAO3O,EAAE,CAACsc,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;EACL;EACA,OAAO,IAAIuB,kBAAkB,CAAC,MAAMlP,SAAS,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAwP,UAAU,CAACC,UAAU,GAAGC,cAAc,CAAC,KAAK,CAAC,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACAF,UAAU,CAACG,SAAS,GAAGD,cAAc,CAAC,IAAI,CAAC,CAAC;AAC5C,SAASA,cAAcA,CAACE,qBAAqB,EAAE;EAC3C,OAAO,MAAM;IACT,MAAMnG,OAAO,GAAGe,WAAW,CAACC,QAAQ;IACpC,IAAIhB,OAAO,CAACmD,2BAA2B,CAAC,CAAC,KAAKgD,qBAAqB,EAAE;MACjEnG,OAAO,CAACmC,kBAAkB,CAAC,CAAC;MAC5BlT,kBAAkB,CAAC,CAAC;IACxB;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmX,oCAAoC,GAAG,EAAE;;AAE/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,SAASpb,gBAAgB,EAAEH,0BAA0B,EAAEE,wBAAwB,EAAE3C,iBAAiB,EAAEqd,kBAAkB,EAAE7B,OAAO,EAAEnZ,qBAAqB,EAAE2b,oCAAoC,EAAEje,KAAK,EAAEoH,oBAAoB,EAAEL,SAAS,EAAElC,KAAK,EAAEwC,eAAe,EAAEsR,UAAU,EAAEtd,MAAM,EAAEyL,kBAAkB,EAAEhC,IAAI,EAAEtF,YAAY,EAAEme,UAAU,EAAEpW,iBAAiB,IAAI2W,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}